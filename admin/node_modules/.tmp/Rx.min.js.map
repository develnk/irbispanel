{"version":3,"sources":["../rxjs/src/observable/BoundCallbackObservable.ts","../rxjs/src/observable/bindCallback.ts","../rxjs/src/add/observable/bindCallback.ts","../rxjs/src/observable/BoundNodeCallbackObservable.ts","../rxjs/src/observable/bindNodeCallback.ts","../rxjs/src/add/observable/bindNodeCallback.ts","../rxjs/src/observable/combineLatest.ts","../rxjs/src/add/observable/combineLatest.ts","../rxjs/src/observable/concat.ts","../rxjs/src/add/observable/concat.ts","../rxjs/src/observable/DeferObservable.ts","../rxjs/src/observable/defer.ts","../rxjs/src/add/observable/defer.ts","../rxjs/src/observable/empty.ts","../rxjs/src/add/observable/empty.ts","../rxjs/src/observable/ForkJoinObservable.ts","../rxjs/src/observable/forkJoin.ts","../rxjs/src/add/observable/forkJoin.ts","../rxjs/src/observable/from.ts","../rxjs/src/add/observable/from.ts","../rxjs/src/observable/FromEventObservable.ts","../rxjs/src/observable/fromEvent.ts","../rxjs/src/add/observable/fromEvent.ts","../rxjs/src/observable/FromEventPatternObservable.ts","../rxjs/src/observable/fromEventPattern.ts","../rxjs/src/add/observable/fromEventPattern.ts","../rxjs/src/observable/fromPromise.ts","../rxjs/src/add/observable/fromPromise.ts","../rxjs/src/observable/GenerateObservable.ts","../rxjs/src/add/observable/generate.ts","../rxjs/src/observable/IfObservable.ts","../rxjs/src/observable/if.ts","../rxjs/src/add/observable/if.ts","../rxjs/src/observable/IntervalObservable.ts","../rxjs/src/observable/interval.ts","../rxjs/src/add/observable/interval.ts","../rxjs/src/observable/merge.ts","../rxjs/src/add/observable/merge.ts","../rxjs/src/add/observable/race.ts","../rxjs/src/observable/NeverObservable.ts","../rxjs/src/observable/never.ts","../rxjs/src/add/observable/never.ts","../rxjs/src/observable/of.ts","../rxjs/src/add/observable/of.ts","../rxjs/src/add/observable/onErrorResumeNext.ts","../rxjs/src/observable/PairsObservable.ts","../rxjs/src/observable/pairs.ts","../rxjs/src/add/observable/pairs.ts","../rxjs/src/observable/RangeObservable.ts","../rxjs/src/observable/range.ts","../rxjs/src/add/observable/range.ts","../rxjs/src/observable/UsingObservable.ts","../rxjs/src/observable/using.ts","../rxjs/src/add/observable/using.ts","../rxjs/src/observable/ErrorObservable.ts","../rxjs/src/observable/throw.ts","../rxjs/src/add/observable/throw.ts","../rxjs/src/observable/TimerObservable.ts","../rxjs/src/observable/timer.ts","../rxjs/src/add/observable/timer.ts","../rxjs/src/observable/zip.ts","../rxjs/src/add/observable/zip.ts","../rxjs/src/observable/dom/ajax.ts","../rxjs/src/add/observable/dom/ajax.ts","../rxjs/src/util/assign.ts","../rxjs/src/observable/dom/WebSocketSubject.ts","../rxjs/src/observable/dom/webSocket.ts","../rxjs/src/add/observable/dom/webSocket.ts","../rxjs/src/operator/buffer.ts","../rxjs/src/add/operator/buffer.ts","../rxjs/src/operator/bufferCount.ts","../rxjs/src/add/operator/bufferCount.ts","../rxjs/src/operator/bufferTime.ts","../rxjs/src/add/operator/bufferTime.ts","../rxjs/src/operator/bufferToggle.ts","../rxjs/src/add/operator/bufferToggle.ts","../rxjs/src/operator/bufferWhen.ts","../rxjs/src/add/operator/bufferWhen.ts","../rxjs/src/operator/catch.ts","../rxjs/src/add/operator/catch.ts","../rxjs/src/operator/combineAll.ts","../rxjs/src/add/operator/combineAll.ts","../rxjs/src/operator/combineLatest.ts","../rxjs/src/add/operator/combineLatest.ts","../rxjs/src/add/operator/concat.ts","../rxjs/src/operator/concatAll.ts","../rxjs/src/add/operator/concatAll.ts","../rxjs/src/operator/concatMap.ts","../rxjs/src/add/operator/concatMap.ts","../rxjs/src/operator/concatMapTo.ts","../rxjs/src/add/operator/concatMapTo.ts","../rxjs/src/operator/count.ts","../rxjs/src/add/operator/count.ts","../rxjs/src/operator/dematerialize.ts","../rxjs/src/add/operator/dematerialize.ts","../rxjs/src/operator/debounce.ts","../rxjs/src/add/operator/debounce.ts","../rxjs/src/operator/debounceTime.ts","../rxjs/src/add/operator/debounceTime.ts","../rxjs/src/operator/defaultIfEmpty.ts","../rxjs/src/add/operator/defaultIfEmpty.ts","../rxjs/src/operator/delay.ts","../rxjs/src/add/operator/delay.ts","../rxjs/src/operator/delayWhen.ts","../rxjs/src/add/operator/delayWhen.ts","../rxjs/src/add/operator/distinct.ts","../rxjs/src/operator/distinct.ts","../rxjs/src/operator/distinctKey.ts","../rxjs/src/add/operator/distinctKey.ts","../rxjs/src/add/operator/distinctUntilChanged.ts","../rxjs/src/operator/distinctUntilChanged.ts","../rxjs/src/operator/distinctUntilKeyChanged.ts","../rxjs/src/add/operator/distinctUntilKeyChanged.ts","../rxjs/src/operator/do.ts","../rxjs/src/add/operator/do.ts","../rxjs/src/operator/exhaust.ts","../rxjs/src/add/operator/exhaust.ts","../rxjs/src/operator/exhaustMap.ts","../rxjs/src/add/operator/exhaustMap.ts","../rxjs/src/operator/expand.ts","../rxjs/src/add/operator/expand.ts","../rxjs/src/operator/elementAt.ts","../rxjs/src/add/operator/elementAt.ts","../rxjs/src/add/operator/filter.ts","../rxjs/src/operator/finally.ts","../rxjs/src/add/operator/finally.ts","../rxjs/src/add/operator/find.ts","../rxjs/src/operator/find.ts","../rxjs/src/operator/findIndex.ts","../rxjs/src/add/operator/findIndex.ts","../rxjs/src/operator/first.ts","../rxjs/src/add/operator/first.ts","../rxjs/src/util/MapPolyfill.ts","../rxjs/src/util/Map.ts","../rxjs/src/util/FastMap.ts","../rxjs/src/operator/groupBy.ts","../rxjs/src/add/operator/groupBy.ts","../rxjs/src/util/noop.ts","../rxjs/src/operator/ignoreElements.ts","../rxjs/src/add/operator/ignoreElements.ts","../rxjs/src/operator/isEmpty.ts","../rxjs/src/add/operator/isEmpty.ts","../rxjs/src/operator/audit.ts","../rxjs/src/add/operator/audit.ts","../rxjs/src/operator/auditTime.ts","../rxjs/src/add/operator/auditTime.ts","../rxjs/src/operator/last.ts","../rxjs/src/add/operator/last.ts","../rxjs/src/operator/let.ts","../rxjs/src/add/operator/let.ts","../rxjs/src/operator/every.ts","../rxjs/src/add/operator/every.ts","../rxjs/src/add/operator/map.ts","../rxjs/src/operator/mapTo.ts","../rxjs/src/add/operator/mapTo.ts","../rxjs/src/operator/materialize.ts","../rxjs/src/add/operator/materialize.ts","../rxjs/src/operator/max.ts","../rxjs/src/add/operator/max.ts","../rxjs/src/operator/merge.ts","../rxjs/src/add/operator/merge.ts","../rxjs/src/add/operator/mergeAll.ts","../rxjs/src/operator/mergeMap.ts","../rxjs/src/add/operator/mergeMap.ts","../rxjs/src/operator/mergeMapTo.ts","../rxjs/src/add/operator/mergeMapTo.ts","../rxjs/src/operator/mergeScan.ts","../rxjs/src/add/operator/mergeScan.ts","../rxjs/src/operator/min.ts","../rxjs/src/add/operator/min.ts","../rxjs/src/add/operator/multicast.ts","../rxjs/src/add/operator/observeOn.ts","../rxjs/src/observable/PromiseObservable.ts","../rxjs/src/observable/IteratorObservable.ts","../rxjs/src/observable/ArrayLikeObservable.ts","../rxjs/src/observable/FromObservable.ts","../rxjs/src/operator/onErrorResumeNext.ts","../rxjs/src/add/operator/onErrorResumeNext.ts","../rxjs/src/operator/pairwise.ts","../rxjs/src/add/operator/pairwise.ts","../rxjs/src/util/not.ts","../rxjs/src/operator/filter.ts","../rxjs/src/operator/partition.ts","../rxjs/src/add/operator/partition.ts","../rxjs/src/operator/pluck.ts","../rxjs/src/add/operator/pluck.ts","../rxjs/src/operator/publish.ts","../rxjs/src/add/operator/publish.ts","../rxjs/src/operator/publishBehavior.ts","../rxjs/src/add/operator/publishBehavior.ts","../rxjs/src/operator/publishReplay.ts","../rxjs/src/add/operator/publishReplay.ts","../rxjs/src/operator/publishLast.ts","../rxjs/src/add/operator/publishLast.ts","../rxjs/src/operator/race.ts","../rxjs/src/add/operator/race.ts","../rxjs/src/operator/reduce.ts","../rxjs/src/add/operator/reduce.ts","../rxjs/src/operator/repeat.ts","../rxjs/src/add/operator/repeat.ts","../rxjs/src/operator/repeatWhen.ts","../rxjs/src/add/operator/repeatWhen.ts","../rxjs/src/operator/retry.ts","../rxjs/src/add/operator/retry.ts","../rxjs/src/operator/retryWhen.ts","../rxjs/src/add/operator/retryWhen.ts","../rxjs/src/operator/sample.ts","../rxjs/src/add/operator/sample.ts","../rxjs/src/operator/sampleTime.ts","../rxjs/src/add/operator/sampleTime.ts","../rxjs/src/operator/scan.ts","../rxjs/src/add/operator/scan.ts","../rxjs/src/operator/sequenceEqual.ts","../rxjs/src/add/operator/sequenceEqual.ts","../rxjs/src/operator/multicast.ts","../rxjs/src/operator/share.ts","../rxjs/src/add/operator/share.ts","../rxjs/src/operator/single.ts","../rxjs/src/add/operator/single.ts","../rxjs/src/operator/skip.ts","../rxjs/src/add/operator/skip.ts","../rxjs/src/operator/skipUntil.ts","../rxjs/src/add/operator/skipUntil.ts","../rxjs/src/operator/skipWhile.ts","../rxjs/src/add/operator/skipWhile.ts","../rxjs/src/operator/mergeAll.ts","../rxjs/src/operator/concat.ts","../rxjs/src/operator/startWith.ts","../rxjs/src/add/operator/startWith.ts","../rxjs/src/util/isNumeric.ts","../rxjs/src/observable/SubscribeOnObservable.ts","../rxjs/src/operator/subscribeOn.ts","../rxjs/src/add/operator/subscribeOn.ts","../rxjs/src/operator/switch.ts","../rxjs/src/add/operator/switch.ts","../rxjs/src/operator/switchMap.ts","../rxjs/src/add/operator/switchMap.ts","../rxjs/src/operator/switchMapTo.ts","../rxjs/src/add/operator/switchMapTo.ts","../rxjs/src/operator/take.ts","../rxjs/src/add/operator/take.ts","../rxjs/src/operator/takeLast.ts","../rxjs/src/add/operator/takeLast.ts","../rxjs/src/operator/takeUntil.ts","../rxjs/src/add/operator/takeUntil.ts","../rxjs/src/operator/takeWhile.ts","../rxjs/src/add/operator/takeWhile.ts","../rxjs/src/operator/throttle.ts","../rxjs/src/add/operator/throttle.ts","../rxjs/src/operator/throttleTime.ts","../rxjs/src/add/operator/throttleTime.ts","../rxjs/src/add/operator/timeInterval.ts","../rxjs/src/operator/timeout.ts","../rxjs/src/add/operator/timeout.ts","../rxjs/src/util/isDate.ts","../rxjs/src/operator/timeoutWith.ts","../rxjs/src/add/operator/timeoutWith.ts","../rxjs/src/add/operator/timestamp.ts","../rxjs/src/operator/toArray.ts","../rxjs/src/add/operator/toArray.ts","../rxjs/src/operator/toPromise.ts","../rxjs/src/add/operator/toPromise.ts","../rxjs/src/operator/window.ts","../rxjs/src/add/operator/window.ts","../rxjs/src/operator/windowCount.ts","../rxjs/src/add/operator/windowCount.ts","../rxjs/src/operator/windowTime.ts","../rxjs/src/add/operator/windowTime.ts","../rxjs/src/operator/windowToggle.ts","../rxjs/src/add/operator/windowToggle.ts","../rxjs/src/operator/windowWhen.ts","../rxjs/src/add/operator/windowWhen.ts","../rxjs/src/operator/withLatestFrom.ts","../rxjs/src/add/operator/withLatestFrom.ts","../rxjs/src/add/operator/zip.ts","../rxjs/src/observable/ScalarObservable.ts","../rxjs/src/observable/EmptyObservable.ts","../rxjs/src/util/isScheduler.ts","../rxjs/src/observable/ArrayObservable.ts","../rxjs/src/OuterSubscriber.ts","../rxjs/src/util/isPromise.ts","../rxjs/src/InnerSubscriber.ts","../rxjs/src/util/subscribeToResult.ts","../rxjs/src/operator/zip.ts","../rxjs/src/operator/zipAll.ts","../rxjs/src/add/operator/zipAll.ts","../rxjs/src/AsyncSubject.ts","../rxjs/src/operator/observeOn.ts","../rxjs/src/ReplaySubject.ts","../rxjs/src/BehaviorSubject.ts","../rxjs/src/observable/ConnectableObservable.ts","../rxjs/src/util/EmptyError.ts","../rxjs/src/util/ArgumentOutOfRangeError.ts","../rxjs/src/util/TimeoutError.ts","../rxjs/src/operator/timeInterval.ts","../rxjs/src/operator/timestamp.ts","../rxjs/src/Notification.ts","../rxjs/src/testing/ColdObservable.ts","../rxjs/src/util/ObjectUnsubscribedError.ts","../rxjs/src/SubjectSubscription.ts","../rxjs/src/Subject.ts","../rxjs/src/testing/SubscriptionLoggable.ts","../rxjs/src/util/applyMixins.ts","../rxjs/src/testing/HotObservable.ts","../rxjs/src/testing/SubscriptionLog.ts","../rxjs/src/testing/TestScheduler.ts","../rxjs/src/scheduler/VirtualTimeScheduler.ts","../rxjs/src/util/toSubscriber.ts","../rxjs/src/Observable.ts","../rxjs/src/Observer.ts","../rxjs/src/Subscriber.ts","../rxjs/src/operator/map.ts","../rxjs/src/observable/dom/AjaxObservable.ts","../rxjs/src/util/Immediate.ts","../rxjs/src/scheduler/AsapAction.ts","../rxjs/src/scheduler/AsapScheduler.ts","../rxjs/src/scheduler/asap.ts","../rxjs/src/scheduler/async.ts","../rxjs/src/scheduler/QueueAction.ts","../rxjs/src/scheduler/QueueScheduler.ts","../rxjs/src/scheduler/queue.ts","../rxjs/src/util/isArray.ts","../rxjs/src/util/isObject.ts","../rxjs/src/util/isFunction.ts","../rxjs/src/util/tryCatch.ts","../rxjs/src/util/errorObject.ts","../rxjs/src/util/UnsubscriptionError.ts","../rxjs/src/Subscription.ts","../rxjs/src/scheduler/Action.ts","../rxjs/src/scheduler/AsyncAction.ts","../rxjs/src/util/AnimationFrame.ts","../rxjs/src/scheduler/AnimationFrameAction.ts","../rxjs/src/Scheduler.ts","../rxjs/src/scheduler/AsyncScheduler.ts","../rxjs/src/scheduler/AnimationFrameScheduler.ts","../rxjs/src/scheduler/animationFrame.ts","../rxjs/src/symbol/rxSubscriber.ts","../rxjs/src/symbol/iterator.ts","../rxjs/src/util/root.ts","../rxjs/src/symbol/observable.ts","../rxjs/src/Rx.ts"],"names":["dispatchNext","arg","value","subject","next","complete","dispatchError","err","error","Observable_1","$__require","tryCatch_1","errorObject_1","AsyncSubject_1","BoundCallbackObservable","_super","callbackFunc","selector","args","scheduler","call","this","__extends","create","func","undefined","_i","arguments","length","prototype","_subscribe","subscriber","schedule","dispatch","source","AsyncSubject","handler","handlerFn","innerArgs","result_1","tryCatch","apply","errorObject","e","result","concat","subscribe","state","self","result_2","add","Observable","exports","BoundCallbackObservable_1","bindCallback","bindCallback_1","_a","shift","BoundNodeCallbackObservable","BoundNodeCallbackObservable_1","bindNodeCallback","bindNodeCallback_1","combineLatest","observables","project","isScheduler_1","isScheduler","pop","isArray_1","isArray","ArrayObservable_1","ArrayObservable","lift","combineLatest_1","CombineLatestOperator","concat_1","concatStatic","subscribeToResult_1","OuterSubscriber_1","DeferObservable","observableFactory","DeferSubscriber","destination","factory","tryDefer","_callFactory","_error","subscribeToResult","OuterSubscriber","DeferObservable_1","defer","defer_1","EmptyObservable_1","empty","EmptyObservable","empty_1","ForkJoinObservable","sources","resultSelector","ForkJoinSubscriber","completed","haveValues","len","total","values","Array","i","innerSubscription","outerIndex","notifyNext","outerValue","innerValue","innerIndex","innerSub","_hasValue","notifyComplete","ForkJoinObservable_1","forkJoin","forkJoin_1","FromObservable_1","from","FromObservable","from_1","isNodeStyleEventEmmitter","sourceObj","addListener","removeListener","isJQueryStyleEventEmitter","on","off","isNodeList","toString","isHTMLCollection","isEventTarget","addEventListener","removeEventListener","isFunction_1","Subscription_1","FromEventObservable","eventName","options","target","isFunction","setupSubscription","unsubscribe","source_1","source_2","source_3","Subscription","FromEventObservable_1","fromEvent","fromEvent_1","FromEventPatternObservable","addHandler","removeHandler","_this","_callSelector","_callAddHandler","errorSubscriber","FromEventPatternObservable_1","fromEventPattern","fromEventPattern_1","PromiseObservable_1","fromPromise","PromiseObservable","fromPromise_1","selfSelector","GenerateObservable","initialState","condition","iterate","initialStateOrOptions","resultSelectorOrObservable","conditionResult","closed","needIterate","GenerateObservable_1","generate","IfObservable","thenSource","elseSource","IfSubscriber","tryIf","_complete","IfObservable_1","_if","if_1","if","isNumeric_1","async_1","IntervalObservable","period","async","isNumeric","index","IntervalObservable_1","interval","interval_1","merge_1","merge","mergeStatic","race_1","race","raceStatic","noop_1","NeverObservable","noop","NeverObservable_1","never","never_1","of","of_1","onErrorResumeNext_1","onErrorResumeNext","onErrorResumeNextStatic","obj","keys","key","PairsObservable","Object","idx","PairsObservable_1","pairs","pairs_1","RangeObservable","start","count","_count","RangeObservable_1","range","range_1","UsingObservable","resourceFactory","resource","UsingSubscriber","tryUse","UsingObservable_1","using","using_1","ErrorObservable","ErrorObservable_1","_throw","throw_1","throw","isDate_1","TimerObservable","dueTime","Number","isDate","now","initialDelay","action","TimerObservable_1","timer","timer_1","zip_1","zip","zipStatic","AjaxObservable_1","ajax","AjaxObservable","ajax_1","root_1","root","assign","TypeError","output","hasOwnProperty","Subject_1","Subscriber_1","ReplaySubject_1","assign_1","WebSocketSubject","urlConfigOrSource","WebSocketCtor","WebSocket","_output","Subject","url","Error","ReplaySubject","JSON","parse","data","operator","sock","_resetState","socket","multiplex","subMsg","unsubMsg","messageFilter","observer","subscription","x","_connectSocket","protocol","readyState","close","onopen","openObserver","queue","Subscriber","send","closingObserver","code","reason","onerror","onclose","closeObserver","wasClean","onmessage","observers","AnonymousSubject","WebSocketSubject_1","webSocket","webSocket_1","buffer","closingNotifier","BufferOperator","BufferSubscriber","_next","push","buffer_1","bufferCount","bufferSize","startBufferEvery","BufferCountOperator","BufferCountSubscriber","buffers","remove","splice","bufferCount_1","bufferTime","bufferTimeSpan","bufferCreationInterval","maxBufferSize","POSITIVE_INFINITY","BufferTimeOperator","dispatchBufferTimeSpanOnly","prevContext","context","closeContext","openContext","closeAction","dispatchBufferCreation","dispatchBufferClose","BufferTimeSubscriber","Context","contexts","timespanOnly","timeSpanOnlyState","closeState","creationState","filledBufferContext","onBufferFull","_unsubscribe","spliceIndex","indexOf","bufferTime_1","bufferToggle","openings","closingSelector","BufferToggleOperator","BufferToggleSubscriber","closeBuffer","openBuffer","trySubscribe","bufferToggle_1","bufferWhen","BufferWhenOperator","BufferWhenSubscriber","subscribing","closingSubscription","bufferWhen_1","_catch","CatchOperator","caught","CatchSubscriber","isStopped","catch_1","catch","combineAll","combineAll_1","unshift","none","CombineLatestSubscriber","active","observable","toRespond","unused","oldVal","_tryProject","slice","concatAll","mergeAll_1","MergeAllOperator","concatAll_1","concatMap","mergeMap_1","MergeMapOperator","concatMap_1","concatMapTo","innerObservable","mergeMapTo_1","MergeMapToOperator","concatMapTo_1","predicate","CountOperator","CountSubscriber","_tryPredicate","count_1","dematerialize","DeMaterializeOperator","DeMaterializeSubscriber","observe","dematerialize_1","debounce","durationSelector","DebounceOperator","DebounceSubscriber","hasValue","durationSubscription","_tryNext","emitValue","duration","debounce_1","debounceTime","DebounceTimeOperator","debouncedNext","DebounceTimeSubscriber","debouncedSubscription","lastValue","clearDebounce","debounceTime_1","defaultIfEmpty","defaultValue","DefaultIfEmptyOperator","DefaultIfEmptySubscriber","isEmpty","defaultIfEmpty_1","delay","absoluteDelay","delayFor","Math","abs","DelayOperator","Notification_1","DelaySubscriber","errored","time","notification","delay_1","max","_schedule","scheduleNotification","message","DelayMessage","Notification","createNext","createComplete","delayWhen","delayDurationSelector","subscriptionDelay","SubscriptionDelayObservable","DelayWhenOperator","DelayWhenSubscriber","delayNotifierSubscriptions","removeSubscription","tryComplete","notifyError","delayNotifier","tryDelay","subscriptionIdx","notifierSubscription","SubscriptionDelaySubscriber","parent","sourceSubscribed","subscribeToSource","delayWhen_1","distinct_1","distinct","compare","flushes","DistinctOperator","DistinctSubscriber","found","y","distinctKey","distinctKey_1","distinctUntilChanged_1","distinctUntilChanged","keySelector","DistinctUntilChangedOperator","DistinctUntilChangedSubscriber","hasKey","Boolean","distinctUntilKeyChanged","distinctUntilKeyChanged_1","_do","nextOrObserver","DoOperator","DoSubscriber","safeSubscriber","syncErrorThrowable","syncErrorThrown","syncErrorValue","do_1","do","exhaust","SwitchFirstOperator","SwitchFirstSubscriber","hasCompleted","hasSubscription","exhaust_1","exhaustMap","SwitchFirstMapOperator","SwitchFirstMapSubscriber","tryNext","trySelectResult","exhaustMap_1","expand","concurrent","ExpandOperator","ExpandSubscriber","subscribeToProjection","expand_1","elementAt","ElementAtOperator","ArgumentOutOfRangeError_1","ArgumentOutOfRangeError","ElementAtSubscriber","elementAt_1","filter_1","filter","_finally","callback","FinallyOperator","FinallySubscriber","finally_1","finally","find_1","find","thisArg","FindValueOperator","yieldIndex","FindValueSubscriber","findIndex","findIndex_1","first","FirstOperator","EmptyError_1","FirstSubscriber","_emit","_tryResultSelector","_emitFinal","EmptyError","first_1","MapPolyfill","size","_values","_keys","get","set","delete","clear","forEach","cb","MapPolyfill_1","Map","FastMap","groupBy","elementSelector","GroupByOperator","Map_1","FastMap_1","GroupBySubscriber","groups","attemptedToUnsubscribe","_group","element","group","groupedObservable","GroupedObservable","GroupDurationSubscriber","removeGroup","groupSubject","refCountSubscription","InnerRefCountSubscription","groupBy_1","ignoreElements","IgnoreElementsOperator","IgnoreElementsSubscriber","ignoreElements_1","IsEmptyOperator","IsEmptySubscriber","isEmpty_1","audit","AuditOperator","AuditSubscriber","throttled","clearThrottle","audit_1","auditTime","AuditTimeOperator","AuditTimeSubscriber","auditTime_1","last","LastOperator","LastSubscriber","last_1","letProto","let_1","let","letBind","every","EveryOperator","EverySubscriber","everyValueMatch","every_1","map_1","map","mapTo","MapToOperator","MapToSubscriber","mapTo_1","materialize","MaterializeOperator","MaterializeSubscriber","createError","materialize_1","comparer","reduce_1","ReduceOperator","max_1","mergeAll","mergeMap","MergeMapSubscriber","_innerSub","ish","_notifyResultSelector","flatMap","mergeMapTo","MergeMapToSubscriber","flatMapTo","mergeScan","seed","MergeScanOperator","MergeScanSubscriber","acc","mergeScan_1","min","min_1","multicast_1","multicast","observeOn_1","observeOn","promise","_isScalar","then","setTimeout","getIterator","iterator_1","$$iterator","StringIterator","ArrayIterator","toLength","o","isNaN","numberIsFinite","sign","floor","maxSafeInteger","isFinite","valueAsNumber","IteratorObservable","iterator","hasError","done","str","charAt","arr","pow","ScalarObservable_1","ArrayLikeObservable","arrayLike","ScalarObservable","isPromise_1","IteratorObservable_1","ArrayLikeObservable_1","observable_1","isArrayLike","$$observable","isPromise","ObserveOnSubscriber","nextSources","OnErrorResumeNextOperator","OnErrorResumeNextSubscriber","subscribeToNextSource","pairwise","PairwiseOperator","PairwiseSubscriber","hasPrev","prev","pairwise_1","not","pred","notPred","FilterOperator","FilterSubscriber","partition","not_1","partition_1","pluck","properties","plucker","props","mapper","currentProp","p","pluck_1","publish","publish_1","publishBehavior","BehaviorSubject_1","BehaviorSubject","publishBehavior_1","publishReplay","windowTime","publishReplay_1","publishLast","publishLast_1","RaceOperator","RaceSubscriber","hasFirst","subscriptions","reduce","accumulator","ReduceSubscriber","hasSeed","_tryReduce","repeat","RepeatOperator","RepeatSubscriber","repeat_1","repeatWhen","notifier","RepeatWhenOperator","RepeatWhenSubscriber","notifications","retries","retriesSubscription","repeatWhen_1","retry","RetryOperator","RetrySubscriber","retry_1","retryWhen","RetryWhenOperator","RetryWhenSubscriber","errors","retryWhen_1","sample","SampleOperator","SampleSubscriber","sample_1","sampleTime","SampleTimeOperator","dispatchNotification","SampleTimeSubscriber","sampleTime_1","scan","ScanOperator","ScanSubscriber","accumulatorSet","defineProperty","_seed","scan_1","sequenceEqual","compareTo","comparor","SequenceEqualOperator","SequenceEqualSubscriber","_b","_oneComplete","SequenceEqualCompareToSubscriber","emit","checkValues","_c","a","b","areEqual","nextB","sequenceEqual_1","subjectOrSubjectFactory","subjectFactory","MulticastOperator","connectable","ConnectableObservable_1","connectableObservableDescriptor","ConnectableObservable","connect","shareSubjectFactory","share","refCount","share_1","single","SingleOperator","SingleSubscriber","seenValue","applySingleValue","singleValue","single_1","skip","SkipOperator","SkipSubscriber","skip_1","skipUntil","SkipUntilOperator","SkipUntilSubscriber","isInnerStopped","skipUntil_1","skipWhile","SkipWhileOperator","SkipWhileSubscriber","skipping","tryCallPredicate","skipWhile_1","MergeAllSubscriber","startWith","array","startWith_1","val","parseFloat","asap_1","SubscribeOnObservable","delayTime","asap","subscribeOn","SubscribeOnObservable_1","subscribeOn_1","_switch","SwitchOperator","SwitchSubscriber","unsubscribeInner","switch_1","switch","switchMap","SwitchMapOperator","SwitchMapSubscriber","_tryNotifyNext","switchMap_1","switchMapTo","SwitchMapToOperator","SwitchMapToSubscriber","inner","tryResultSelector","switchMapTo_1","take","TakeOperator","TakeSubscriber","take_1","takeLast","TakeLastOperator","TakeLastSubscriber","ring","takeLast_1","takeUntil","TakeUntilOperator","TakeUntilSubscriber","takeUntil_1","takeWhile","TakeWhileOperator","TakeWhileSubscriber","nextOrComplete","predicateResult","takeWhile_1","throttle","ThrottleOperator","ThrottleSubscriber","tryDurationSelector","emitAndThrottle","throttle_1","throttleTime","ThrottleTimeOperator","ThrottleTimeSubscriber","throttleTime_1","timeInterval_1","timeInterval","timeout","due","errorToSend","absoluteTimeout","waitFor","TimeoutOperator","TimeoutError_1","TimeoutSubscriber","_previousIndex","_hasCompleted","scheduleTimeout","dispatchTimeout","currentIndex","previousIndex","notifyTimeout","TimeoutError","timeout_1","Date","timeoutWith","withObservable","TimeoutWithOperator","TimeoutWithSubscriber","timeoutSubscription","handleTimeout","timeoutState","timeoutWith_1","timestamp_1","timestamp","toArray","ToArrayOperator","ToArraySubscriber","toArray_1","toPromise","PromiseCtor","Rx","config","Promise","resolve","reject","toPromise_1","window","windowBoundaries","WindowOperator","windowSubscriber","WindowSubscriber","sourceSubscription","openWindow","prevWindow","newWindow","window_1","windowCount","windowSize","startWindowEvery","WindowCountOperator","WindowCountSubscriber","windows","c","windowCount_1","windowTimeSpan","windowCreationInterval","WindowTimeOperator","dispatchWindowTimeSpanOnly","dispatchWindowCreation","timeSpanState","dispatchWindowClose","closeWindow","WindowTimeSubscriber","window_2","window_3","window_4","windowTime_1","windowToggle","WindowToggleOperator","WindowToggleSubscriber","openSubscription","windowToggle_1","windowWhen","unsubscribeClosingNotification","closingNotification","windowWhen_1","withLatestFrom","WithLatestFromOperator","WithLatestFromSubscriber","withLatestFrom_1","zipProto","InnerSubscriber","outerSubscriber","InnerSubscriber_1","item","obs","ZipOperator","ZipSubscriber","iterators","StaticArrayIterator","StaticIterator","ZipBufferIterator","stillUnsubscribed","notifyInactive","checkIterators","shouldComplete","nextResult","isComplete","zipAll","zipAll_1","hasNext","EMPTY","thrownError","ObserveOnOperator","scheduleMessage","ObserveOnMessage","queue_1","_events","_bufferSize","_windowTime","_getNow","ReplayEvent","_trimBufferThenGetEvents","eventsCount","spliceCount","ObjectUnsubscribedError_1","_value","getValue","ObjectUnsubscribedError","_refCount","getSubject","_subject","connection","_connection","ConnectableSubscriber","RefCountOperator","writable","SubjectSubscriber","refCounter","RefCountSubscriber","sharedConnection","name","stack","TimeIntervalOperator","TimeInterval","TimeIntervalSubscriber","lastTime","span","TimestampOperator","Timestamp","TimestampSubscriber","kind","exception","accept","toObservable","undefinedValueNotification","completeNotification","SubscriptionLoggable_1","applyMixins_1","ColdObservable","messages","logSubscribedFrame","logUnsubscribedFrame","scheduleMessages","messagesLength","frame","applyMixins","SubscriptionLoggable","SubjectSubscription","subscriberIndex","SubjectSubscription_1","rxSubscriber_1","$$rxSubscriber","copy","asObservable","SubscriptionLog_1","SubscriptionLog","subscriptionLogs","oldSubscriptionLog","subscribedFrame","derivedCtor","baseCtors","baseCtor","propertyKeys","getOwnPropertyNames","j","len2","name_1","HotObservable","setup","unsubscribedFrame","ColdObservable_1","HotObservable_1","VirtualTimeScheduler_1","defaultMaxFrame","TestScheduler","assertDeepEqual","VirtualAction","hotObservables","coldObservables","flushTests","createTime","marbles","frameTimeFactor","createColdObservable","parseMarbles","cold","createHotObservable","materializeInnerObservable","outerFrame","expectObservable","unsubscriptionMarbles","actual","flushTest","ready","unsubscriptionFrame","parseMarblesAsSubscriptions","toBe","errorValue","expected","expectSubscriptions","actualSubscriptionLogs","marblesArray","flush","readyFlushTests","test","groupStart","subscriptionFrame","materializeInnerObservables","testMessages","subIndex","frameOffset","VirtualTimeScheduler","AsyncAction_1","AsyncScheduler_1","SchedulerAction","maxFrames","actions","execute","AsyncScheduler","work","id","requestAsyncId","sort","sortActions","recycleAsyncId","AsyncAction","toSubscriber","Observer_1","toSubscriber_1","observerOrNext","sink","destinationOrNext","SafeSubscriber","_parent","bind","_context","__tryOrSetError","__tryOrUnsub","fn","MapOperator","MapSubscriber","getCORSRequest","XMLHttpRequest","xhr","withCredentials","XDomainRequest","getXMLHttpRequest","progId","progIds","ActiveXObject","ajaxGet","headers","method","ajaxPost","body","ajaxDelete","ajaxPut","ajaxGetJSON","responseType","response","urlOrRequest","request","createXHR","crossDomain","prop","AjaxSubscriber","post","put","getJSON","FormData","serializeBody","AjaxResponse","user","password","open","setHeaders","setupEvents","contentType","splitIndex","substring","encodeURI","join","stringify","setRequestHeader","progressSubscriber","ontimeout","xhrTimeout","AjaxTimeoutError","upload","onprogress","xhrProgress","xhrError","AjaxError","onreadystatechange","xhrReadyStateChange","status_1","status","responseText","abort","originalEvent","responseXML","ImmediateDefinition","setImmediate","clearImmediate","nextHandle","tasksByHandle","currentlyRunningATask","canUseProcessNextTick","createProcessNextTickSetImmediate","canUsePostMessage","createPostMessageSetImmediate","canUseMessageChannel","createMessageChannelSetImmediate","canUseReadyStateChange","createReadyStateChangeSetImmediate","createSetTimeoutSetImmediate","ci","handle","instance","identify","process","MessageChannel","document","createElement","postMessage","importScripts","postMessageIsAsynchronous_1","oldOnMessage","partiallyApplied","Function","addFromSetImmediateArguments","nextTick","runIfPresent","messagePrefix","random","onGlobalMessage","globalMessageHandler","event","task","channel","port1","port2","doc","html","documentElement","script","removeChild","appendChild","Immediate","Immediate_1","AsapAction","scheduled","AsapScheduler","AsapAction_1","AsapScheduler_1","QueueAction","_execute","QueueScheduler","QueueAction_1","QueueScheduler_1","isObject","tryCatcher","tryCatchTarget","UnsubscriptionError","isObject_1","UnsubscriptionError_1","hasErrors","_subscriptions","trial","sub","teardown","subscriptionIndex","Action","Action_1","pending","setInterval","clearInterval","RequestAnimationFrameDefinition","requestAnimationFrame","cancelAnimationFrame","mozRequestAnimationFrame","mozCancelAnimationFrame","webkitRequestAnimationFrame","webkitCancelAnimationFrame","msRequestAnimationFrame","msCancelAnimationFrame","oRequestAnimationFrame","oCancelAnimationFrame","clearTimeout","AnimationFrame","AnimationFrame_1","AnimationFrameAction","Scheduler","Scheduler_1","AnimationFrameScheduler","AnimationFrameAction_1","AnimationFrameScheduler_1","animationFrame","Symbol","for","Set","global","getSymbolObservable","TestScheduler_1","animationFrame_1","rxSubscriber"],"mappings":"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","file":"Rx.min.js","sourcesContent":["import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Scheduler } from '../Scheduler';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { AsyncSubject } from '../AsyncSubject';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class BoundCallbackObservable<T> extends Observable<T> {\n  subject: AsyncSubject<T>;\n\n  /* tslint:disable:max-line-length */\n  static create<R>(callbackFunc: (callback: (result: R) => any) => any, selector?: void, scheduler?: Scheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<R>(callbackFunc: (callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: Scheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: Scheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: Scheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<T>(callbackFunc: Function, selector?: void, scheduler?: Scheduler): (...args: any[]) => Observable<T>;\n  static create<T>(callbackFunc: Function, selector?: (...args: any[]) => T, scheduler?: Scheduler): (...args: any[]) => Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Converts a callback API to a function that returns an Observable.\n   *\n   * <span class=\"informal\">Give it a function `f` of type `f(x, callback)` and\n   * it will return a function `g` that when called as `g(x)` will output an\n   * Observable.</span>\n   *\n   * `bindCallback` is not an operator because its input and output are not\n   * Observables. The input is a function `func` with some parameters, but the\n   * last parameter must be a callback function that `func` calls when it is\n   * done. The output of `bindCallback` is a function that takes the same\n   * parameters as `func`, except the last one (the callback). When the output\n   * function is called with arguments, it will return an Observable where the\n   * results will be delivered to.\n   *\n   * @example <caption>Convert jQuery's getJSON to an Observable API</caption>\n   * // Suppose we have jQuery.getJSON('/my/url', callback)\n   * var getJSONAsObservable = Rx.Observable.bindCallback(jQuery.getJSON);\n   * var result = getJSONAsObservable('/my/url');\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link bindNodeCallback}\n   * @see {@link from}\n   * @see {@link fromPromise}\n   *\n   * @param {function} func Function with a callback as the last parameter.\n   * @param {function} [selector] A function which takes the arguments from the\n   * callback and maps those a value to emit on the output Observable.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * callbacks.\n   * @return {function(...params: *): Observable} A function which returns the\n   * Observable that delivers the same values the callback would deliver.\n   * @static true\n   * @name bindCallback\n   * @owner Observable\n   */\n  static create<T>(func: Function,\n                   selector: Function | void = undefined,\n                   scheduler?: Scheduler): (...args: any[]) => Observable<T> {\n    return (...args: any[]): Observable<T> => {\n      return new BoundCallbackObservable<T>(func, <any>selector, args, scheduler);\n    };\n  }\n\n  constructor(private callbackFunc: Function,\n              private selector: Function,\n              private args: any[],\n              private scheduler: Scheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T | T[]>): Subscription {\n    const callbackFunc = this.callbackFunc;\n    const args = this.args;\n    const scheduler = this.scheduler;\n    let subject = this.subject;\n\n    if (!scheduler) {\n      if (!subject) {\n        subject = this.subject = new AsyncSubject<T>();\n        const handler = function handlerFn(...innerArgs: any[]) {\n          const source = (<any>handlerFn).source;\n          const { selector, subject } = source;\n          if (selector) {\n            const result = tryCatch(selector).apply(this, innerArgs);\n            if (result === errorObject) {\n              subject.error(errorObject.e);\n          } else {\n              subject.next(result);\n              subject.complete();\n            }\n          } else {\n            subject.next(innerArgs.length === 1 ? innerArgs[0] : innerArgs);\n            subject.complete();\n          }\n        };\n        // use named function instance to avoid closure.\n        (<any>handler).source = this;\n\n        const result = tryCatch(callbackFunc).apply(this, args.concat(handler));\n        if (result === errorObject) {\n          subject.error(errorObject.e);\n        }\n      }\n      return subject.subscribe(subscriber);\n    } else {\n      return scheduler.schedule(BoundCallbackObservable.dispatch, 0, { source: this, subscriber });\n    }\n  }\n\n  static dispatch<T>(state: { source: BoundCallbackObservable<T>, subscriber: Subscriber<T> }) {\n    const self = (<Subscription><any>this);\n    const { source, subscriber } = state;\n    const { callbackFunc, args, scheduler } = source;\n    let subject = source.subject;\n\n    if (!subject) {\n      subject = source.subject = new AsyncSubject<T>();\n\n      const handler = function handlerFn(...innerArgs: any[]) {\n        const source = (<any>handlerFn).source;\n        const { selector, subject } = source;\n        if (selector) {\n          const result = tryCatch(selector).apply(this, innerArgs);\n          if (result === errorObject) {\n            self.add(scheduler.schedule(dispatchError, 0, { err: errorObject.e, subject }));\n          } else {\n            self.add(scheduler.schedule(dispatchNext, 0, { value: result, subject }));\n          }\n        } else {\n          const value = innerArgs.length === 1 ? innerArgs[0] : innerArgs;\n          self.add(scheduler.schedule(dispatchNext, 0, { value, subject }));\n        }\n      };\n      // use named function to pass values in without closure\n      (<any>handler).source = source;\n\n      const result = tryCatch(callbackFunc).apply(this, args.concat(handler));\n      if (result === errorObject) {\n        subject.error(errorObject.e);\n      }\n    }\n\n    self.add(subject.subscribe(subscriber));\n  }\n}\n\ninterface DispatchNextArg<T> {\n  subject: AsyncSubject<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subject } = arg;\n  subject.next(value);\n  subject.complete();\n}\n\ninterface DispatchErrorArg<T> {\n  subject: AsyncSubject<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subject } = arg;\n  subject.error(err);\n}\n","import {  BoundCallbackObservable  } from './BoundCallbackObservable';\n\nexport const bindCallback = BoundCallbackObservable.create;","import { Observable } from '../../Observable';\nimport { bindCallback as staticBindCallback } from '../../observable/bindCallback';\n\nObservable.bindCallback = staticBindCallback;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let bindCallback: typeof staticBindCallback;\n  }\n}\n","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Scheduler } from '../Scheduler';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { AsyncSubject } from '../AsyncSubject';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class BoundNodeCallbackObservable<T> extends Observable<T> {\n  subject: AsyncSubject<T>;\n\n  /* tslint:disable:max-line-length */\n  static create<R>(callbackFunc: (callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: Scheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<T>(callbackFunc: Function, selector?: void, scheduler?: Scheduler): (...args: any[]) => Observable<T>;\n  static create<T>(callbackFunc: Function, selector?: (...args: any[]) => T, scheduler?: Scheduler): (...args: any[]) => Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Converts a Node.js-style callback API to a function that returns an\n   * Observable.\n   *\n   * <span class=\"informal\">It's just like {@link bindCallback}, but the\n   * callback is expected to be of type `callback(error, result)`.</span>\n   *\n   * `bindNodeCallback` is not an operator because its input and output are not\n   * Observables. The input is a function `func` with some parameters, but the\n   * last parameter must be a callback function that `func` calls when it is\n   * done. The callback function is expected to follow Node.js conventions,\n   * where the first argument to the callback is an error, while remaining\n   * arguments are the callback result. The output of `bindNodeCallback` is a\n   * function that takes the same parameters as `func`, except the last one (the\n   * callback). When the output function is called with arguments, it will\n   * return an Observable where the results will be delivered to.\n   *\n   * @example <caption>Read a file from the filesystem and get the data as an Observable</caption>\n   * import * as fs from 'fs';\n   * var readFileAsObservable = Rx.Observable.bindNodeCallback(fs.readFile);\n   * var result = readFileAsObservable('./roadNames.txt', 'utf8');\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link bindCallback}\n   * @see {@link from}\n   * @see {@link fromPromise}\n   *\n   * @param {function} func Function with a callback as the last parameter.\n   * @param {function} [selector] A function which takes the arguments from the\n   * callback and maps those a value to emit on the output Observable.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * callbacks.\n   * @return {function(...params: *): Observable} A function which returns the\n   * Observable that delivers the same values the Node.js callback would\n   * deliver.\n   * @static true\n   * @name bindNodeCallback\n   * @owner Observable\n   */\n  static create<T>(func: Function,\n                   selector: Function | void = undefined,\n                   scheduler?: Scheduler): (...args: any[]) => Observable<T> {\n    return (...args: any[]): Observable<T> => {\n      return new BoundNodeCallbackObservable<T>(func, <any>selector, args, scheduler);\n    };\n  }\n\n  constructor(private callbackFunc: Function,\n              private selector: Function,\n              private args: any[],\n              public scheduler: Scheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T | T[]>): Subscription {\n    const callbackFunc = this.callbackFunc;\n    const args = this.args;\n    const scheduler = this.scheduler;\n    let subject = this.subject;\n\n    if (!scheduler) {\n      if (!subject) {\n        subject = this.subject = new AsyncSubject<T>();\n        const handler = function handlerFn(...innerArgs: any[]) {\n          const source = (<any>handlerFn).source;\n          const { selector, subject } = source;\n          const err = innerArgs.shift();\n\n          if (err) {\n            subject.error(err);\n          } else if (selector) {\n            const result = tryCatch(selector).apply(this, innerArgs);\n            if (result === errorObject) {\n              subject.error(errorObject.e);\n            } else {\n              subject.next(result);\n              subject.complete();\n            }\n          } else {\n            subject.next(innerArgs.length === 1 ? innerArgs[0] : innerArgs);\n            subject.complete();\n          }\n        };\n        // use named function instance to avoid closure.\n        (<any>handler).source = this;\n\n        const result = tryCatch(callbackFunc).apply(this, args.concat(handler));\n        if (result === errorObject) {\n          subject.error(errorObject.e);\n        }\n      }\n      return subject.subscribe(subscriber);\n    } else {\n      return scheduler.schedule(dispatch, 0, { source: this, subscriber });\n    }\n  }\n}\n\nfunction dispatch<T>(state: { source: BoundNodeCallbackObservable<T>, subscriber: Subscriber<T> }) {\n  const self = (<Subscription> this);\n  const { source, subscriber } = state;\n  // XXX: cast to `any` to access to the private field in `source`.\n  const { callbackFunc, args, scheduler } = source as any;\n  let subject = source.subject;\n\n  if (!subject) {\n    subject = source.subject = new AsyncSubject<T>();\n\n    const handler = function handlerFn(...innerArgs: any[]) {\n      const source = (<any>handlerFn).source;\n      const { selector, subject } = source;\n      const err = innerArgs.shift();\n\n      if (err) {\n        subject.error(err);\n      } else if (selector) {\n        const result = tryCatch(selector).apply(this, innerArgs);\n        if (result === errorObject) {\n          self.add(scheduler.schedule(dispatchError, 0, { err: errorObject.e, subject }));\n        } else {\n          self.add(scheduler.schedule(dispatchNext, 0, { value: result, subject }));\n        }\n      } else {\n        const value = innerArgs.length === 1 ? innerArgs[0] : innerArgs;\n        self.add(scheduler.schedule(dispatchNext, 0, { value, subject }));\n      }\n    };\n    // use named function to pass values in without closure\n    (<any>handler).source = source;\n\n    const result = tryCatch(callbackFunc).apply(this, args.concat(handler));\n    if (result === errorObject) {\n      subject.error(errorObject.e);\n    }\n  }\n\n  self.add(subject.subscribe(subscriber));\n}\n\ninterface DispatchNextArg<T> {\n  subject: AsyncSubject<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subject } = arg;\n  subject.next(value);\n  subject.complete();\n}\n\ninterface DispatchErrorArg<T> {\n  subject: AsyncSubject<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subject } = arg;\n  subject.error(err);\n}\n","import {  BoundNodeCallbackObservable  } from './BoundNodeCallbackObservable';\n\nexport const bindNodeCallback = BoundNodeCallbackObservable.create;","import { Observable } from '../../Observable';\nimport { bindNodeCallback as staticBindNodeCallback } from '../../observable/bindNodeCallback';\n\nObservable.bindNodeCallback = staticBindNodeCallback;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let bindNodeCallback: typeof staticBindNodeCallback;\n  }\n}","import {  Observable, ObservableInput  } from '../Observable';\nimport {  Scheduler  } from '../Scheduler';\nimport {  isScheduler  } from '../util/isScheduler';\nimport {  isArray  } from '../util/isArray';\nimport {  ArrayObservable  } from './ArrayObservable';\nimport {  CombineLatestOperator  } from '../operator/combineLatest';\n\n/* tslint:disable:max-line-length */\nexport function combineLatest<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: Scheduler): Observable<[T, T2]>;\nexport function combineLatest<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: Scheduler): Observable<[T, T2, T3]>;\nexport function combineLatest<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: Scheduler): Observable<[T, T2, T3, T4]>;\nexport function combineLatest<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: Scheduler): Observable<[T, T2, T3, T4, T5]>;\nexport function combineLatest<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: Scheduler): Observable<[T, T2, T3, T4, T5, T6]>;\n\nexport function combineLatest<T, R>(v1: ObservableInput<T>, project: (v1: T) => R, scheduler?: Scheduler): Observable<R>;\nexport function combineLatest<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R, scheduler?: Scheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R, scheduler?: Scheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R, scheduler?: Scheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R, scheduler?: Scheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R, scheduler?: Scheduler): Observable<R>;\n\nexport function combineLatest<T>(array: ObservableInput<T>[], scheduler?: Scheduler): Observable<T[]>;\nexport function combineLatest<R>(array: ObservableInput<any>[], scheduler?: Scheduler): Observable<R>;\nexport function combineLatest<T, R>(array: ObservableInput<T>[], project: (...values: Array<T>) => R, scheduler?: Scheduler): Observable<R>;\nexport function combineLatest<R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R, scheduler?: Scheduler): Observable<R>;\nexport function combineLatest<T>(...observables: Array<ObservableInput<T> | Scheduler>): Observable<T[]>;\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R) | Scheduler>): Observable<R>;\nexport function combineLatest<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R) | Scheduler>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from all the Observables passed as\n * arguments. This is done by subscribing to each Observable, in order, and\n * collecting an array of each of the most recent values any time any of the\n * input Observables emits, then either taking that array and passing it as\n * arguments to an optional `project` function and emitting the return value of\n * that, or just emitting the array of recent values directly if there is no\n * `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = Rx.Observable.combineLatest(weight, height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} observable1 An input Observable to combine with the\n * source Observable.\n * @param {Observable} observable2 An input Observable to combine with the\n * source Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @param {Scheduler} [scheduler=null] The Scheduler to use for subscribing to\n * each input Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @static true\n * @name combineLatest\n * @owner Observable\n */\nexport function combineLatest<T, R>(...observables: Array<any | ObservableInput<any> |\n                                                    Array<ObservableInput<any>> |\n                                                    (((...values: Array<any>) => R)) |\n                                                    Scheduler>): Observable<R> {\n  let project: (...values: Array<any>) => R =  null;\n  let scheduler: Scheduler = null;\n\n  if (isScheduler(observables[observables.length - 1])) {\n    scheduler = <Scheduler>observables.pop();\n  }\n\n  if (typeof observables[observables.length - 1] === 'function') {\n    project = <(...values: Array<any>) => R>observables.pop();\n  }\n\n  // if the first and only other argument besides the resultSelector is an array\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = <Array<Observable<any>>>observables[0];\n  }\n\n  return new ArrayObservable(observables, scheduler).lift(new CombineLatestOperator<T, R>(project));\n}","import { Observable } from '../../Observable';\nimport { combineLatest as combineLatestStatic } from '../../observable/combineLatest';\n\nObservable.combineLatest = combineLatestStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let combineLatest: typeof combineLatestStatic;\n  }\n}","import {  concatStatic  } from '../operator/concat';\n\nexport const concat = concatStatic;","import { Observable } from '../../Observable';\nimport { concat as concatStatic } from '../../observable/concat';\n\nObservable.concat = concatStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let concat: typeof concatStatic;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class DeferObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable that, on subscribe, calls an Observable factory to\n   * make an Observable for each new Observer.\n   *\n   * <span class=\"informal\">Creates the Observable lazily, that is, only when it\n   * is subscribed.\n   * </span>\n   *\n   * <img src=\"./img/defer.png\" width=\"100%\">\n   *\n   * `defer` allows you to create the Observable only when the Observer\n   * subscribes, and create a fresh Observable for each Observer. It waits until\n   * an Observer subscribes to it, and then it generates an Observable,\n   * typically with an Observable factory function. It does this afresh for each\n   * subscriber, so although each subscriber may think it is subscribing to the\n   * same Observable, in fact each subscriber gets its own individual\n   * Observable.\n   *\n   * @example <caption>Subscribe to either an Observable of clicks or an Observable of interval, at random</caption>\n   * var clicksOrInterval = Rx.Observable.defer(function () {\n   *   if (Math.random() > 0.5) {\n   *     return Rx.Observable.fromEvent(document, 'click');\n   *   } else {\n   *     return Rx.Observable.interval(1000);\n   *   }\n   * });\n   * clicksOrInterval.subscribe(x => console.log(x));\n   *\n   * @see {@link create}\n   *\n   * @param {function(): Observable|Promise} observableFactory The Observable\n   * factory function to invoke for each Observer that subscribes to the output\n   * Observable. May also return a Promise, which will be converted on the fly\n   * to an Observable.\n   * @return {Observable} An Observable whose Observers' subscriptions trigger\n   * an invocation of the given Observable factory function.\n   * @static true\n   * @name defer\n   * @owner Observable\n   */\n  static create<T>(observableFactory: () => SubscribableOrPromise<T> | void): Observable<T> {\n    return new DeferObservable(observableFactory);\n  }\n\n  constructor(private observableFactory: () => SubscribableOrPromise<T> | void) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    return new DeferSubscriber(subscriber, this.observableFactory);\n  }\n}\n\nclass DeferSubscriber<T> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private factory: () => SubscribableOrPromise<T> | void) {\n    super(destination);\n    this.tryDefer();\n  }\n\n  private tryDefer(): void {\n    try {\n      this._callFactory();\n    } catch (err) {\n      this._error(err);\n    }\n  }\n\n  private _callFactory(): void {\n    const result = this.factory();\n    if (result) {\n      this.add(subscribeToResult(this, result));\n    }\n  }\n}\n","import {  DeferObservable  } from './DeferObservable';\n\nexport const defer = DeferObservable.create;","import { Observable } from '../../Observable';\nimport { defer as staticDefer } from '../../observable/defer';\n\nObservable.defer = staticDefer;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let defer: typeof staticDefer;\n  }\n}","import {  EmptyObservable  } from './EmptyObservable';\n\nexport const empty = EmptyObservable.create;","import { Observable } from '../../Observable';\nimport { empty as staticEmpty } from '../../observable/empty';\n\nObservable.empty = staticEmpty;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let empty: typeof staticEmpty;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { EmptyObservable } from './EmptyObservable';\nimport { isArray } from '../util/isArray';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ForkJoinObservable<T> extends Observable<T> {\n  constructor(private sources: Array<SubscribableOrPromise<any>>,\n              private resultSelector?: (...values: Array<any>) => T) {\n    super();\n  }\n\n  /* tslint:disable:max-line-length */\n  static create<T, T2>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>): Observable<[T, T2]>;\n  static create<T, T2, T3>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>): Observable<[T, T2, T3]>;\n  static create<T, T2, T3, T4>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>): Observable<[T, T2, T3, T4]>;\n  static create<T, T2, T3, T4, T5>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>): Observable<[T, T2, T3, T4, T5]>;\n  static create<T, T2, T3, T4, T5, T6>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, v6: SubscribableOrPromise<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n  static create<T, T2, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\n  static create<T, T2, T3, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\n  static create<T, T2, T3, T4, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, v6: SubscribableOrPromise<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n  static create<T>(sources: SubscribableOrPromise<T>[]): Observable<T[]>;\n  static create<R>(sources: SubscribableOrPromise<any>[]): Observable<R>;\n  static create<T, R>(sources: SubscribableOrPromise<T>[], project: (...values: Array<T>) => R): Observable<R>;\n  static create<R>(sources: SubscribableOrPromise<any>[], project: (...values: Array<any>) => R): Observable<R>;\n  static create<T>(...sources: SubscribableOrPromise<T>[]): Observable<T[]>;\n  static create<R>(...sources: SubscribableOrPromise<any>[]): Observable<R>;\n  /* tslint:enable:max-line-length */\n  /**\n   * @param sources\n   * @return {any}\n   * @static true\n   * @name forkJoin\n   * @owner Observable\n   */\n  static create<T>(...sources: Array<SubscribableOrPromise<any> |\n                                  Array<SubscribableOrPromise<any>> |\n                                  ((...values: Array<any>) => any)>): Observable<T> {\n    if (sources === null || arguments.length === 0) {\n      return new EmptyObservable<T>();\n    }\n\n    let resultSelector: (...values: Array<any>) => any = null;\n    if (typeof sources[sources.length - 1] === 'function') {\n      resultSelector = <(...values: Array<any>) => any>sources.pop();\n    }\n\n    // if the first and only other argument besides the resultSelector is an array\n    // assume it's been called with `forkJoin([obs1, obs2, obs3], resultSelector)`\n    if (sources.length === 1 && isArray(sources[0])) {\n      sources = <Array<SubscribableOrPromise<any>>>sources[0];\n    }\n\n    if (sources.length === 0) {\n      return new EmptyObservable<T>();\n    }\n\n    return new ForkJoinObservable(<Array<SubscribableOrPromise<any>>>sources, resultSelector);\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription {\n    return new ForkJoinSubscriber(subscriber, this.sources, this.resultSelector);\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ForkJoinSubscriber<T> extends OuterSubscriber<T, T> {\n  private completed = 0;\n  private total: number;\n  private values: any[];\n  private haveValues = 0;\n\n  constructor(destination: Subscriber<T>,\n              private sources: Array<SubscribableOrPromise<any>>,\n              private resultSelector?: (...values: Array<any>) => T) {\n    super(destination);\n\n    const len = sources.length;\n    this.total = len;\n    this.values = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      const source = sources[i];\n      const innerSubscription = subscribeToResult(this, source, null, i);\n\n      if (innerSubscription) {\n        (<any> innerSubscription).outerIndex = i;\n        this.add(innerSubscription);\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    this.values[outerIndex] = innerValue;\n    if (!(<any>innerSub)._hasValue) {\n      (<any>innerSub)._hasValue = true;\n      this.haveValues++;\n    }\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, T>): void {\n    const destination = this.destination;\n    const { haveValues, resultSelector, values } = this;\n    const len = values.length;\n\n    if (!(<any>innerSub)._hasValue) {\n      destination.complete();\n      return;\n    }\n\n    this.completed++;\n\n    if (this.completed !== len) {\n      return;\n    }\n\n    if (haveValues === len) {\n      const value = resultSelector ? resultSelector.apply(this, values) : values;\n      destination.next(value);\n    }\n\n    destination.complete();\n  }\n}","import {  ForkJoinObservable  } from './ForkJoinObservable';\n\nexport const forkJoin = ForkJoinObservable.create;","import { Observable } from '../../Observable';\nimport { forkJoin as staticForkJoin } from '../../observable/forkJoin';\n\nObservable.forkJoin = staticForkJoin;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let forkJoin: typeof staticForkJoin;\n  }\n}","import {  FromObservable  } from './FromObservable';\n\nexport const from = FromObservable.create;","import { Observable } from '../../Observable';\nimport { from as staticFrom } from '../../observable/from';\n\nObservable.from = staticFrom;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let from: typeof staticFrom;\n  }\n}","import { Observable } from '../Observable';\nimport { tryCatch } from '../util/tryCatch';\nimport { isFunction } from '../util/isFunction';\nimport { errorObject } from '../util/errorObject';\nimport { Subscription } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\nexport type NodeStyleEventEmmitter = {\n  addListener: (eventName: string, handler: Function) => void;\n  removeListener: (eventName: string, handler: Function) => void;\n};\nfunction isNodeStyleEventEmmitter(sourceObj: any): sourceObj is NodeStyleEventEmmitter {\n  return !!sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';\n}\n\nexport type JQueryStyleEventEmitter = {\n  on: (eventName: string, handler: Function) => void;\n  off: (eventName: string, handler: Function) => void;\n};\nfunction isJQueryStyleEventEmitter(sourceObj: any): sourceObj is JQueryStyleEventEmitter {\n  return !!sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';\n}\n\nfunction isNodeList(sourceObj: any): sourceObj is NodeList {\n  return !!sourceObj && sourceObj.toString() === '[object NodeList]';\n}\n\nfunction isHTMLCollection(sourceObj: any): sourceObj is HTMLCollection {\n  return !!sourceObj && sourceObj.toString() === '[object HTMLCollection]';\n}\n\nfunction isEventTarget(sourceObj: any): sourceObj is EventTarget {\n  return !!sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';\n}\n\nexport type EventTargetLike = EventTarget | NodeStyleEventEmmitter | JQueryStyleEventEmitter | NodeList | HTMLCollection;\n\nexport type EventListenerOptions = {\n  capture?: boolean;\n  passive?: boolean;\n  once?: boolean;\n} | boolean;\n\nexport type SelectorMethodSignature<T> = (...args: Array<any>) => T;\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromEventObservable<T, R> extends Observable<T> {\n\n  /* tslint:disable:max-line-length */\n  static create<T>(target: EventTargetLike, eventName: string): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, selector: SelectorMethodSignature<T>): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, options: EventListenerOptions): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, options: EventListenerOptions, selector: SelectorMethodSignature<T>): Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Creates an Observable that emits events of a specific type coming from the\n   * given event target.\n   *\n   * <span class=\"informal\">Creates an Observable from DOM events, or Node\n   * EventEmitter events or others.</span>\n   *\n   * <img src=\"./img/fromEvent.png\" width=\"100%\">\n   *\n   * Creates an Observable by attaching an event listener to an \"event target\",\n   * which may be an object with `addEventListener` and `removeEventListener`,\n   * a Node.js EventEmitter, a jQuery style EventEmitter, a NodeList from the\n   * DOM, or an HTMLCollection from the DOM. The event handler is attached when\n   * the output Observable is subscribed, and removed when the Subscription is\n   * unsubscribed.\n   *\n   * @example <caption>Emits clicks happening on the DOM document</caption>\n   * var clicks = Rx.Observable.fromEvent(document, 'click');\n   * clicks.subscribe(x => console.log(x));\n   *\n   * @see {@link from}\n   * @see {@link fromEventPattern}\n   *\n   * @param {EventTargetLike} target The DOMElement, event target, Node.js\n   * EventEmitter, NodeList or HTMLCollection to attach the event handler to.\n   * @param {string} eventName The event name of interest, being emitted by the\n   * `target`.\n   * @parm {EventListenerOptions} [options] Options to pass through to addEventListener\n   * @param {SelectorMethodSignature<T>} [selector] An optional function to\n   * post-process results. It takes the arguments from the event handler and\n   * should return a single value.\n   * @return {Observable<T>}\n   * @static true\n   * @name fromEvent\n   * @owner Observable\n   */\n  static create<T>(target: EventTargetLike,\n                   eventName: string,\n                   options?: EventListenerOptions,\n                   selector?: SelectorMethodSignature<T>): Observable<T> {\n    if (isFunction(options)) {\n      selector = <any>options;\n      options = undefined;\n    }\n    return new FromEventObservable(target, eventName, selector, options);\n  }\n\n  constructor(private sourceObj: EventTargetLike,\n              private eventName: string,\n              private selector?: SelectorMethodSignature<T>,\n              private options?: EventListenerOptions) {\n    super();\n  }\n\n  private static setupSubscription<T>(sourceObj: EventTargetLike,\n                                      eventName: string,\n                                      handler: Function,\n                                      subscriber: Subscriber<T>,\n                                      options?: EventListenerOptions) {\n    let unsubscribe: () => void;\n    if (isNodeList(sourceObj) || isHTMLCollection(sourceObj)) {\n      for (let i = 0, len = sourceObj.length; i < len; i++) {\n        FromEventObservable.setupSubscription(sourceObj[i], eventName, handler, subscriber, options);\n      }\n    } else if (isEventTarget(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.addEventListener(eventName, <EventListener>handler, <boolean>options);\n      unsubscribe = () => source.removeEventListener(eventName, <EventListener>handler);\n    } else if (isJQueryStyleEventEmitter(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.on(eventName, handler);\n      unsubscribe = () => source.off(eventName, handler);\n    } else if (isNodeStyleEventEmmitter(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.addListener(eventName, handler);\n      unsubscribe = () => source.removeListener(eventName, handler);\n    }\n\n    subscriber.add(new Subscription(unsubscribe));\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const sourceObj = this.sourceObj;\n    const eventName = this.eventName;\n    const options = this.options;\n    const selector = this.selector;\n    let handler = selector ? (...args: any[]) => {\n      let result = tryCatch(selector)(...args);\n      if (result === errorObject) {\n        subscriber.error(errorObject.e);\n      } else {\n        subscriber.next(result);\n      }\n    } : (e: any) => subscriber.next(e);\n\n    FromEventObservable.setupSubscription(sourceObj, eventName, handler, subscriber, options);\n  }\n}\n","import {  FromEventObservable  } from './FromEventObservable';\n\nexport const fromEvent = FromEventObservable.create;","import { Observable } from '../../Observable';\nimport { fromEvent as staticFromEvent } from '../../observable/fromEvent';\n\nObservable.fromEvent = staticFromEvent;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let fromEvent: typeof staticFromEvent;\n  }\n}","import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromEventPatternObservable<T, R> extends Observable<T> {\n\n  /**\n   * Creates an Observable from an API based on addHandler/removeHandler\n   * functions.\n   *\n   * <span class=\"informal\">Converts any addHandler/removeHandler API to an\n   * Observable.</span>\n   *\n   * <img src=\"./img/fromEventPattern.png\" width=\"100%\">\n   *\n   * Creates an Observable by using the `addHandler` and `removeHandler`\n   * functions to add and remove the handlers, with an optional selector\n   * function to project the event arguments to a result. The `addHandler` is\n   * called when the output Observable is subscribed, and `removeHandler` is\n   * called when the Subscription is unsubscribed.\n   *\n   * @example <caption>Emits clicks happening on the DOM document</caption>\n   * function addClickHandler(handler) {\n   *   document.addEventListener('click', handler);\n   * }\n   *  \n   * function removeClickHandler(handler) {\n   *   document.removeEventListener('click', handler);\n   * }\n   *  \n   * var clicks = Rx.Observable.fromEventPattern(\n   *   addClickHandler,\n   *   removeClickHandler\n   * );\n   * clicks.subscribe(x => console.log(x));\n   *\n   * @see {@link from}\n   * @see {@link fromEvent}\n   *\n   * @param {function(handler: Function): any} addHandler A function that takes\n   * a `handler` function as argument and attaches it somehow to the actual\n   * source of events.\n   * @param {function(handler: Function): void} removeHandler A function that\n   * takes a `handler` function as argument and removes it in case it was\n   * previously attached using `addHandler`.\n   * @param {function(...args: any): T} [selector] An optional function to\n   * post-process results. It takes the arguments from the event handler and\n   * should return a single value.\n   * @return {Observable<T>}\n   * @static true\n   * @name fromEventPattern\n   * @owner Observable\n   */\n  static create<T>(addHandler: (handler: Function) => any,\n                   removeHandler: (handler: Function) => void,\n                   selector?: (...args: Array<any>) => T) {\n    return new FromEventPatternObservable(addHandler, removeHandler, selector);\n  }\n\n  constructor(private addHandler: (handler: Function) => any,\n              private removeHandler: (handler: Function) => void,\n              private selector?: (...args: Array<any>) => T) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const removeHandler = this.removeHandler;\n\n    const handler = !!this.selector ? (...args: Array<any>) => {\n      this._callSelector(subscriber, args);\n    } : function(e: any) { subscriber.next(e); };\n\n    this._callAddHandler(handler, subscriber);\n    subscriber.add(new Subscription(() => {\n      //TODO: determine whether or not to forward to error handler\n      removeHandler(handler);\n    }));\n  }\n\n  private _callSelector(subscriber: Subscriber<T>, args: Array<any>): void {\n    try {\n      const result: T = this.selector(...args);\n      subscriber.next(result);\n    }\n    catch (e) {\n      subscriber.error(e);\n    }\n  }\n\n  private _callAddHandler(handler: (e: any) => void, errorSubscriber: Subscriber<T>): void {\n    try {\n      this.addHandler(handler);\n    }\n    catch (e) {\n      errorSubscriber.error(e);\n    }\n  }\n}","import {  FromEventPatternObservable  } from './FromEventPatternObservable';\n\nexport const fromEventPattern = FromEventPatternObservable.create;","import { Observable } from '../../Observable';\nimport { fromEventPattern as staticFromEventPattern } from '../../observable/fromEventPattern';\n\nObservable.fromEventPattern = staticFromEventPattern;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let fromEventPattern: typeof staticFromEventPattern;\n  }\n}","import {  PromiseObservable  } from './PromiseObservable';\n\nexport const fromPromise = PromiseObservable.create;","import { Observable } from '../../Observable';\nimport { fromPromise as staticFromPromise } from '../../observable/fromPromise';\n\nObservable.fromPromise = staticFromPromise;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let fromPromise: typeof staticFromPromise;\n  }\n}","import { Scheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Observable } from '../Observable' ;\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { isScheduler } from '../util/isScheduler';\n\nconst selfSelector = <T>(value: T) => value;\n\nexport type ConditionFunc<S> = (state: S) => boolean;\nexport type IterateFunc<S> = (state: S) => S;\nexport type ResultFunc<S, T> = (state: S) => T;\n\ninterface SchedulerState<T, S> {\n  needIterate?: boolean;\n  state: S;\n  subscriber: Subscriber<T>;\n  condition?: ConditionFunc<S>;\n  iterate: IterateFunc<S>;\n  resultSelector: ResultFunc<S, T>;\n}\n\nexport interface GenerateBaseOptions<S> {\n  /**\n   * Inital state.\n  */\n  initialState: S;\n  /**\n   * Condition function that accepts state and returns boolean.\n   * When it returns false, the generator stops.\n   * If not specified, a generator never stops.\n  */\n  condition?: ConditionFunc<S>;\n  /**\n   * Iterate function that accepts state and returns new state.\n   */\n  iterate: IterateFunc<S>;\n  /**\n   * Scheduler to use for generation process.\n   * By default, a generator starts immediately.\n  */\n  scheduler?: Scheduler;\n}\n\nexport interface GenerateOptions<T, S> extends GenerateBaseOptions<S> {\n  /**\n   * Result selection function that accepts state and returns a value to emit.\n   */\n  resultSelector: ResultFunc<S, T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class GenerateObservable<T, S> extends Observable<T> {\n  constructor(private initialState: S,\n              private condition: ConditionFunc<S>,\n              private iterate: IterateFunc<S>,\n              private resultSelector: ResultFunc<S, T>,\n              private scheduler?: Scheduler) {\n      super();\n  }\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate(0, x => x < 10, x => x + 1, x => x);\n   *\n   * @example <caption>Using asap scheduler, produces sequence of 2, 3, 5, then completes.</caption>\n   * var res = Rx.Observable.generate(1, x => x < 5, x => x * 2, x => x + 1, Rx.Scheduler.asap);\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {S} initialState Initial state.\n   * @param {function (state: S): boolean} condition Condition to terminate generation (upon returning false).\n   * @param {function (state: S): S} iterate Iteration step function.\n   * @param {function (state: S): T} resultSelector Selector function for results produced in the sequence.\n   * @param {Scheduler} [scheduler] A {@link Scheduler} on which to run the generator loop. If not provided, defaults to emit immediately.\n   * @returns {Observable<T>} The generated sequence.\n   */\n  static create<T, S>(initialState: S,\n                      condition: ConditionFunc<S>,\n                      iterate: IterateFunc<S>,\n                      resultSelector: ResultFunc<S, T>,\n                      scheduler?: Scheduler): Observable<T>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload uses state as an emitted value.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate(0, x => x < 10, x => x + 1);\n   *\n   * @example <caption>Using asap scheduler, produces sequence of 1, 2, 4, then completes.</caption>\n   * var res = Rx.Observable.generate(1, x => x < 5, x => x * 2, Rx.Scheduler.asap);\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {S} initialState Initial state.\n   * @param {function (state: S): boolean} condition Condition to terminate generation (upon returning false).\n   * @param {function (state: S): S} iterate Iteration step function.\n   * @param {Scheduler} [scheduler] A {@link Scheduler} on which to run the generator loop. If not provided, defaults to emit immediately.\n   * @returns {Observable<S>} The generated sequence.\n   */\n  static create<S>(initialState: S,\n                   condition: ConditionFunc<S>,\n                   iterate: IterateFunc<S>,\n                   scheduler?: Scheduler): Observable<S>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload accepts options object that might contain inital state, iterate,\n   * condition and scheduler.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate({\n   *   initialState: 0,\n   *   condition: x => x < 10,\n   *   iterate: x => x + 1\n   * });\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {GenerateBaseOptions<S>} options Object that must contain initialState, iterate and might contain condition and scheduler.\n   * @returns {Observable<S>} The generated sequence.\n   */\n  static create<S>(options: GenerateBaseOptions<S>): Observable<S>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload accepts options object that might contain inital state, iterate,\n   * condition, result selector and scheduler.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate({\n   *   initialState: 0,\n   *   condition: x => x < 10,\n   *   iterate: x => x + 1,\n   *   resultSelector: x => x\n   * });\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {GenerateOptions<T, S>} options Object that must contain initialState, iterate, resultSelector and might contain condition and scheduler.\n   * @returns {Observable<T>} The generated sequence.\n   */\n  static create<T, S>(options: GenerateOptions<T, S>): Observable<T>\n\n  static create<T, S>(initialStateOrOptions: S | GenerateOptions<T, S>,\n                      condition?: ConditionFunc<S>,\n                      iterate?: IterateFunc<S>,\n                      resultSelectorOrObservable?: (ResultFunc<S, T>) | Scheduler,\n                      scheduler?: Scheduler): Observable<T> {\n    if (arguments.length == 1) {\n      return new GenerateObservable<T, S>(\n        (<GenerateOptions<T, S>>initialStateOrOptions).initialState,\n        (<GenerateOptions<T, S>>initialStateOrOptions).condition,\n        (<GenerateOptions<T, S>>initialStateOrOptions).iterate,\n        (<GenerateOptions<T, S>>initialStateOrOptions).resultSelector || selfSelector,\n        (<GenerateOptions<T, S>>initialStateOrOptions).scheduler);\n    }\n\n    if (resultSelectorOrObservable === undefined || isScheduler(resultSelectorOrObservable)) {\n      return new GenerateObservable<T, S>(\n        <S>initialStateOrOptions,\n        condition,\n        iterate,\n        selfSelector,\n        <Scheduler>resultSelectorOrObservable);\n    }\n\n    return new GenerateObservable<T, S>(\n      <S>initialStateOrOptions,\n      condition,\n      iterate,\n      <ResultFunc<S, T>>resultSelectorOrObservable,\n      <Scheduler>scheduler);\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription | Function | void {\n    let state = this.initialState;\n    if (this.scheduler) {\n      return this.scheduler.schedule<SchedulerState<T, S>>(GenerateObservable.dispatch, 0, {\n        subscriber,\n        iterate: this.iterate,\n        condition: this.condition,\n        resultSelector: this.resultSelector,\n        state });\n    }\n    const { condition, resultSelector, iterate } = this;\n    do {\n      if (condition) {\n        let conditionResult: boolean;\n        try {\n          conditionResult = condition(state);\n        } catch (err) {\n          subscriber.error(err);\n          return;\n        }\n        if (!conditionResult) {\n          subscriber.complete();\n          break;\n        }\n      }\n      let value: T;\n      try {\n        value = resultSelector(state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n      subscriber.next(value);\n      if (subscriber.closed) {\n        break;\n      }\n      try {\n        state = iterate(state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n    } while (true);\n  }\n\n  private static dispatch<T, S>(state: SchedulerState<T, S>): Subscription | void {\n    const { subscriber, condition } = state;\n    if (subscriber.closed) {\n      return;\n    }\n    if (state.needIterate) {\n      try {\n        state.state = state.iterate(state.state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n    } else {\n      state.needIterate = true;\n    }\n    if (condition) {\n      let conditionResult: boolean;\n      try {\n        conditionResult = condition(state.state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n      if (!conditionResult) {\n        subscriber.complete();\n        return;\n      }\n      if (subscriber.closed) {\n        return;\n      }\n    }\n    let value: T;\n    try {\n      value = state.resultSelector(state.state);\n    } catch (err) {\n      subscriber.error(err);\n      return;\n    }\n    if (subscriber.closed) {\n      return;\n    }\n    subscriber.next(value);\n    if (subscriber.closed) {\n      return;\n    }\n    return (<Action<SchedulerState<T, S>>><any>this).schedule(state);\n  }\n}\n","import { Observable } from '../../Observable';\nimport { GenerateObservable } from '../../observable/GenerateObservable';\n\nObservable.generate = GenerateObservable.create;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let generate: typeof GenerateObservable.create;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IfObservable<T, R> extends Observable<T> {\n\n  static create<T, R>(condition: () => boolean | void,\n                      thenSource?: SubscribableOrPromise<T> | void,\n                      elseSource?: SubscribableOrPromise<R> | void): Observable<T|R> {\n    return new IfObservable(condition, thenSource, elseSource);\n  }\n\n  constructor(private condition: () => boolean | void,\n              private thenSource?: SubscribableOrPromise<T> | void,\n              private elseSource?: SubscribableOrPromise<R> | void) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T|R>): TeardownLogic {\n    const { condition, thenSource, elseSource } = this;\n\n    return new IfSubscriber(subscriber, condition, thenSource, elseSource);\n  }\n}\n\nclass IfSubscriber<T, R> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private condition: () => boolean | void,\n              private thenSource?: SubscribableOrPromise<T> | void,\n              private elseSource?: SubscribableOrPromise<R> | void) {\n    super(destination);\n    this.tryIf();\n  }\n\n  private tryIf(): void {\n    const { condition, thenSource, elseSource } = this;\n\n    let result: boolean;\n    try {\n      result = <boolean>condition();\n      const source = result ? thenSource : elseSource;\n\n      if (source) {\n        this.add(subscribeToResult(this, source));\n      } else {\n        this._complete();\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n}\n","import {  IfObservable  } from './IfObservable';\n\nexport const _if = IfObservable.create;","import { Observable } from '../../Observable';\nimport { _if } from '../../observable/if';\n\nObservable.if = _if;","import { Subscriber } from '../Subscriber';\nimport { isNumeric } from '../util/isNumeric';\nimport { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IntervalObservable extends Observable<number> {\n  /**\n   * Creates an Observable that emits sequential numbers every specified\n   * interval of time, on a specified Scheduler.\n   *\n   * <span class=\"informal\">Emits incremental numbers periodically in time.\n   * </span>\n   *\n   * <img src=\"./img/interval.png\" width=\"100%\">\n   *\n   * `interval` returns an Observable that emits an infinite sequence of\n   * ascending integers, with a constant interval of time of your choosing\n   * between those emissions. The first emission is not sent immediately, but\n   * only after the first period has passed. By default, this operator uses the\n   * `async` Scheduler to provide a notion of time, but you may pass any\n   * Scheduler to it.\n   *\n   * @example <caption>Emits ascending numbers, one every second (1000ms)</caption>\n   * var numbers = Rx.Observable.interval(1000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link timer}\n   * @see {@link delay}\n   *\n   * @param {number} [period=0] The interval size in milliseconds (by default)\n   * or the time unit determined by the scheduler's clock.\n   * @param {Scheduler} [scheduler=async] The Scheduler to use for scheduling\n   * the emission of values, and providing a notion of \"time\".\n   * @return {Observable} An Observable that emits a sequential number each time\n   * interval.\n   * @static true\n   * @name interval\n   * @owner Observable\n   */\n  static create(period: number = 0,\n                scheduler: Scheduler = async): Observable<number> {\n    return new IntervalObservable(period, scheduler);\n  }\n\n  static dispatch(state: any): void {\n    const { index, subscriber, period } = state;\n\n    subscriber.next(index);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index += 1;\n\n    (<any> this).schedule(state, period);\n  }\n\n  constructor(private period: number = 0,\n              private scheduler: Scheduler = async) {\n    super();\n    if (!isNumeric(period) || period < 0) {\n      this.period = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n      this.scheduler = async;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>) {\n    const index = 0;\n    const period = this.period;\n    const scheduler = this.scheduler;\n\n    subscriber.add(scheduler.schedule(IntervalObservable.dispatch, period, {\n      index, subscriber, period\n    }));\n  }\n}\n","import {  IntervalObservable  } from './IntervalObservable';\n\nexport const interval = IntervalObservable.create;","import { Observable } from '../../Observable';\nimport { interval as staticInterval } from '../../observable/interval';\n\nObservable.interval = staticInterval;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let interval: typeof staticInterval;\n  }\n}","import {  mergeStatic  } from '../operator/merge';\n\nexport const merge = mergeStatic;","import { Observable } from '../../Observable';\nimport { merge as mergeStatic } from '../../observable/merge';\n\nObservable.merge = mergeStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let merge: typeof mergeStatic;\n  }\n}","import { Observable } from '../../Observable';\nimport { raceStatic } from '../../operator/race';\n\nObservable.race = raceStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let race: typeof raceStatic;\n  }\n}","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { noop } from '../util/noop';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class NeverObservable<T> extends Observable<T> {\n  /**\n   * Creates an Observable that emits no items to the Observer.\n   *\n   * <span class=\"informal\">An Observable that never emits anything.</span>\n   *\n   * <img src=\"./img/never.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that emits\n   * neither values nor errors nor the completion notification. It can be used\n   * for testing purposes or for composing with other Observables. Please not\n   * that by never emitting a complete notification, this Observable keeps the\n   * subscription from being disposed automatically. Subscriptions need to be\n   * manually disposed.\n   *\n   * @example <caption>Emit the number 7, then never emit anything else (not even complete).</caption>\n   * function info() {\n   *   console.log('Will not be called');\n   * }\n   * var result = Rx.Observable.never().startWith(7);\n   * result.subscribe(x => console.log(x), info, info);\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link of}\n   * @see {@link throw}\n   *\n   * @return {Observable} A \"never\" Observable: never emits anything.\n   * @static true\n   * @name never\n   * @owner Observable\n   */\n  static create<T>() {\n    return new NeverObservable<T>();\n  }\n\n  constructor() {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): void {\n    noop();\n  }\n}\n","import {  NeverObservable  } from './NeverObservable';\n\nexport const never = NeverObservable.create;","import { Observable } from '../../Observable';\nimport { never as staticNever } from '../../observable/never';\n\nObservable.never = staticNever;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let never: typeof staticNever;\n  }\n}","import {  ArrayObservable  } from './ArrayObservable';\n\nexport const of = ArrayObservable.of;","import { Observable } from '../../Observable';\nimport { of as staticOf } from '../../observable/of';\n\nObservable.of = staticOf;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let of: typeof staticOf; //formOf an iceberg!\n  }\n}","import { Observable } from '../../Observable';\r\nimport { onErrorResumeNextStatic } from '../../operator/onErrorResumeNext';\r\n\r\nObservable.onErrorResumeNext = onErrorResumeNextStatic;\r\n\r\ndeclare module '../../Observable' {\r\n  namespace Observable {\r\n    export let onErrorResumeNext: typeof onErrorResumeNextStatic;\r\n  }\r\n}","import { Scheduler } from '../Scheduler';\r\nimport { Observable } from '../Observable';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { TeardownLogic } from '../Subscription';\r\n\r\ninterface PairsContext<T> {\r\n  obj: Object;\r\n  keys: Array<string>;\r\n  length: number;\r\n  index: number;\r\n  subscriber: Subscriber<Array<string | T>>;\r\n}\r\n\r\nfunction dispatch<T>(state: PairsContext<T>) {\r\n  const {obj, keys, length, index, subscriber} = state;\r\n\r\n  if (index === length) {\r\n    subscriber.complete();\r\n    return;\r\n  }\r\n\r\n  const key = keys[index];\r\n  subscriber.next([key, obj[key]]);\r\n\r\n  state.index = index + 1;\r\n\r\n  (<any> this).schedule(state);\r\n}\r\n\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @extends {Ignored}\r\n * @hide true\r\n */\r\nexport class PairsObservable<T> extends Observable<Array<string | T>> {\r\n  private keys: Array<string>;\r\n\r\n  /**\r\n   * Convert an object into an observable sequence of [key, value] pairs\r\n   * using an optional Scheduler to enumerate the object.\r\n   *\r\n   * @example <caption>Converts a javascript object to an Observable</caption>\r\n   * var obj = {\r\n   *   foo: 42,\r\n   *   bar: 56,\r\n   *   baz: 78\r\n   * };\r\n   *\r\n   * var source = Rx.Observable.pairs(obj);\r\n   *\r\n   * var subscription = source.subscribe(\r\n   *   function (x) {\r\n   *     console.log('Next: %s', x);\r\n   *   },\r\n   *   function (err) {\r\n   *     console.log('Error: %s', err);\r\n   *   },\r\n   *   function () {\r\n   *     console.log('Completed');\r\n   *   });\r\n   *\r\n   * @param {Object} obj The object to inspect and turn into an\r\n   * Observable sequence.\r\n   * @param {Scheduler} [scheduler] An optional Scheduler to run the\r\n   * enumeration of the input sequence on.\r\n   * @returns {(Observable<Array<string | T>>)} An observable sequence of\r\n   * [key, value] pairs from the object.\r\n   */\r\n  static create<T>(obj: Object, scheduler?: Scheduler): Observable<Array<string | T>> {\r\n    return new PairsObservable<T>(obj, scheduler);\r\n  }\r\n\r\n  constructor(private obj: Object, private scheduler?: Scheduler) {\r\n    super();\r\n    this.keys = Object.keys(obj);\r\n  }\r\n\r\n  protected _subscribe(subscriber: Subscriber<Array<string | T>>): TeardownLogic {\r\n    const {keys, scheduler} = this;\r\n    const length = keys.length;\r\n\r\n    if (scheduler) {\r\n      return scheduler.schedule(dispatch, 0, {\r\n        obj: this.obj, keys, length, index: 0, subscriber\r\n      });\r\n    } else {\r\n      for (let idx = 0; idx < length; idx++) {\r\n        const key = keys[idx];\r\n        subscriber.next([key, this.obj[key]]);\r\n      }\r\n      subscriber.complete();\r\n    }\r\n  }\r\n}","import {  PairsObservable  } from './PairsObservable';\r\n\r\nexport const pairs = PairsObservable.create;","import { Observable } from '../../Observable';\r\nimport { pairs as staticPairs } from '../../observable/pairs';\r\n\r\nObservable.pairs = staticPairs;\r\n\r\ndeclare module '../../Observable' {\r\n  namespace Observable {\r\n    export let pairs: typeof staticPairs;\r\n  }\r\n}","import { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class RangeObservable extends Observable<number> {\n\n  /**\n   * Creates an Observable that emits a sequence of numbers within a specified\n   * range.\n   *\n   * <span class=\"informal\">Emits a sequence of numbers in a range.</span>\n   *\n   * <img src=\"./img/range.png\" width=\"100%\">\n   *\n   * `range` operator emits a range of sequential integers, in order, where you\n   * select the `start` of the range and its `length`. By default, uses no\n   * Scheduler and just delivers the notifications synchronously, but may use\n   * an optional Scheduler to regulate those deliveries.\n   *\n   * @example <caption>Emits the numbers 1 to 10</caption>\n   * var numbers = Rx.Observable.range(1, 10);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link timer}\n   * @see {@link interval}\n   *\n   * @param {number} [start=0] The value of the first integer in the sequence.\n   * @param {number} [count=0] The number of sequential integers to generate.\n   * @param {Scheduler} [scheduler] A {@link Scheduler} to use for scheduling\n   * the emissions of the notifications.\n   * @return {Observable} An Observable of numbers that emits a finite range of\n   * sequential integers.\n   * @static true\n   * @name range\n   * @owner Observable\n   */\n  static create(start: number = 0,\n                count: number = 0,\n                scheduler?: Scheduler): Observable<number> {\n    return new RangeObservable(start, count, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { start, index, count, subscriber } = state;\n\n    if (index >= count) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(start);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index = index + 1;\n    state.start = start + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  private start: number;\n  private _count: number;\n  private scheduler: Scheduler;\n\n  constructor(start: number,\n              count: number,\n              scheduler?: Scheduler) {\n    super();\n    this.start = start;\n    this._count = count;\n    this.scheduler = scheduler;\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>): TeardownLogic {\n    let index = 0;\n    let start = this.start;\n    const count = this._count;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(RangeObservable.dispatch, 0, {\n        index, count, start, subscriber\n      });\n    } else {\n      do {\n        if (index++ >= count) {\n          subscriber.complete();\n          break;\n        }\n        subscriber.next(start++);\n        if (subscriber.closed) {\n          break;\n        }\n      } while (true);\n    }\n  }\n}\n","import {  RangeObservable  } from './RangeObservable';\n\nexport const range = RangeObservable.create;","import { Observable } from '../../Observable';\nimport { range as staticRange } from '../../observable/range';\n\nObservable.range = staticRange;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let range: typeof staticRange;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { AnonymousSubscription, TeardownLogic } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class UsingObservable<T> extends Observable<T> {\n\n  static create<T>(resourceFactory: () => AnonymousSubscription | void,\n                   observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void): Observable<T> {\n    return new UsingObservable<T>(resourceFactory, observableFactory);\n  }\n\n  constructor(private resourceFactory: () => AnonymousSubscription | void,\n              private observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const { resourceFactory, observableFactory } = this;\n\n    let resource: AnonymousSubscription;\n\n    try {\n      resource = <AnonymousSubscription>resourceFactory();\n      return new UsingSubscriber(subscriber, resource, observableFactory);\n    } catch (err) {\n      subscriber.error(err);\n    }\n  }\n}\n\nclass UsingSubscriber<T> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private resource: AnonymousSubscription,\n              private observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void) {\n    super(destination);\n    destination.add(resource);\n    this.tryUse();\n  }\n\n  private tryUse(): void {\n    try {\n      const source = this.observableFactory.call(this, this.resource);\n      if (source) {\n        this.add(subscribeToResult(this, source));\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n}","import {  UsingObservable  } from './UsingObservable';\n\nexport const using = UsingObservable.create;","import { Observable } from '../../Observable';\nimport { using as staticUsing } from '../../observable/using';\n\nObservable.using = staticUsing;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let using: typeof staticUsing;\n  }\n}","import { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\nexport interface DispatchArg {\n  error: any;\n  subscriber: any;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ErrorObservable extends Observable<any> {\n\n  /**\n   * Creates an Observable that emits no items to the Observer and immediately\n   * emits an error notification.\n   *\n   * <span class=\"informal\">Just emits 'error', and nothing else.\n   * </span>\n   *\n   * <img src=\"./img/throw.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the error notification. It can be used for composing with other\n   * Observables, such as in a {@link mergeMap}.\n   *\n   * @example <caption>Emit the number 7, then emit an error.</caption>\n   * var result = Rx.Observable.throw(new Error('oops!')).startWith(7);\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @example <caption>Map and flattens numbers to the sequence 'a', 'b', 'c', but throw an error for 13</caption>\n   * var interval = Rx.Observable.interval(1000);\n   * var result = interval.mergeMap(x =>\n   *   x === 13 ?\n   *     Rx.Observable.throw('Thirteens are bad') :\n   *     Rx.Observable.of('a', 'b', 'c')\n   * );\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link never}\n   * @see {@link of}\n   *\n   * @param {any} error The particular Error to pass to the error notification.\n   * @param {Scheduler} [scheduler] A {@link Scheduler} to use for scheduling\n   * the emission of the error notification.\n   * @return {Observable} An error Observable: emits only the error notification\n   * using the given error argument.\n   * @static true\n   * @name throw\n   * @owner Observable\n   */\n  static create<T>(error: any, scheduler?: Scheduler) {\n    return new ErrorObservable(error, scheduler);\n  }\n\n  static dispatch(arg: DispatchArg) {\n    const { error, subscriber } = arg;\n    subscriber.error(error);\n  }\n\n  constructor(public error: any, private scheduler?: Scheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: any): TeardownLogic {\n    const error = this.error;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ErrorObservable.dispatch, 0, {\n        error, subscriber\n      });\n    } else {\n      subscriber.error(error);\n    }\n  }\n}\n","import {  ErrorObservable  } from './ErrorObservable';\n\nexport const _throw = ErrorObservable.create;","import { Observable } from '../../Observable';\nimport { _throw } from '../../observable/throw';\n\nObservable.throw = _throw;","import { isNumeric } from '../util/isNumeric';\nimport { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\nimport { isScheduler } from '../util/isScheduler';\nimport { isDate } from '../util/isDate';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class TimerObservable extends Observable<number> {\n\n  /**\n   * Creates an Observable that starts emitting after an `initialDelay` and\n   * emits ever increasing numbers after each `period` of time thereafter.\n   *\n   * <span class=\"informal\">Its like {@link interval}, but you can specify when\n   * should the emissions start.</span>\n   *\n   * <img src=\"./img/timer.png\" width=\"100%\">\n   *\n   * `timer` returns an Observable that emits an infinite sequence of ascending\n   * integers, with a constant interval of time, `period` of your choosing\n   * between those emissions. The first emission happens after the specified\n   * `initialDelay`. The initial delay may be a {@link Date}. By default, this\n   * operator uses the `async` Scheduler to provide a notion of time, but you\n   * may pass any Scheduler to it. If `period` is not specified, the output\n   * Observable emits only one value, `0`. Otherwise, it emits an infinite\n   * sequence.\n   *\n   * @example <caption>Emits ascending numbers, one every second (1000ms), starting after 3 seconds</caption>\n   * var numbers = Rx.Observable.timer(3000, 1000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @example <caption>Emits one number after five seconds</caption>\n   * var numbers = Rx.Observable.timer(5000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link interval}\n   * @see {@link delay}\n   *\n   * @param {number|Date} initialDelay The initial delay time to wait before\n   * emitting the first value of `0`.\n   * @param {number} [period] The period of time between emissions of the\n   * subsequent numbers.\n   * @param {Scheduler} [scheduler=async] The Scheduler to use for scheduling\n   * the emission of values, and providing a notion of \"time\".\n   * @return {Observable} An Observable that emits a `0` after the\n   * `initialDelay` and ever increasing numbers after each `period` of time\n   * thereafter.\n   * @static true\n   * @name timer\n   * @owner Observable\n   */\n  static create(initialDelay: number | Date = 0,\n                period?: number | Scheduler,\n                scheduler?: Scheduler): Observable<number> {\n    return new TimerObservable(initialDelay, period, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, period, subscriber } = state;\n    const action = (<any> this);\n\n    subscriber.next(index);\n\n    if (subscriber.closed) {\n      return;\n    } else if (period === -1) {\n      return subscriber.complete();\n    }\n\n    state.index = index + 1;\n    action.schedule(state, period);\n  }\n\n  private period: number = -1;\n  private dueTime: number = 0;\n  private scheduler: Scheduler;\n\n  constructor(dueTime: number | Date = 0,\n              period?: number | Scheduler,\n              scheduler?: Scheduler) {\n    super();\n\n    if (isNumeric(period)) {\n      this.period = Number(period) < 1 && 1 || Number(period);\n    } else if (isScheduler(period)) {\n      scheduler = <Scheduler> period;\n    }\n\n    if (!isScheduler(scheduler)) {\n      scheduler = async;\n    }\n\n    this.scheduler = scheduler;\n    this.dueTime = isDate(dueTime) ?\n      (+dueTime - this.scheduler.now()) :\n      (<number> dueTime);\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>): TeardownLogic {\n    const index = 0;\n    const { period, dueTime, scheduler } = this;\n\n    return scheduler.schedule(TimerObservable.dispatch, dueTime, {\n      index, period, subscriber\n    });\n  }\n}\n","import {  TimerObservable  } from './TimerObservable';\n\nexport const timer = TimerObservable.create;","import { Observable } from '../../Observable';\nimport { timer as staticTimer } from '../../observable/timer';\n\nObservable.timer = staticTimer;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let timer: typeof staticTimer;\n  }\n}","import {  zipStatic  } from '../operator/zip';\n\nexport const zip = zipStatic;","import { Observable } from '../../Observable';\nimport { zip as zipStatic } from '../../observable/zip';\n\nObservable.zip = zipStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let zip: typeof zipStatic;\n  }\n}","import {  AjaxObservable, AjaxCreationMethod  } from './AjaxObservable';\n\nexport const ajax: AjaxCreationMethod = AjaxObservable.create;","import { Observable } from '../../../Observable';\nimport { ajax as staticAjax } from '../../../observable/dom/ajax';\nimport { AjaxCreationMethod } from '../../../observable/dom/AjaxObservable';\n\nObservable.ajax = staticAjax;\n\ndeclare module '../../../Observable' {\n  namespace Observable {\n    export let ajax: AjaxCreationMethod;\n  }\n}","import { root } from './root';\n\nconst Object = root.Object;\n\nif (typeof (<any>Object).assign != 'function') {\n  (function () {\n    (<any>Object).assign = function assignPolyfill(target: Object, ...sources: Array<Object>): Object {\n      if (target === undefined || target === null) {\n        throw new TypeError('cannot convert undefined or null to object');\n      }\n\n      const output = Object(target);\n      const len = sources.length;\n      for (let index = 0; index < len; index++) {\n        let source = sources[index];\n        if (source !== undefined && source !== null) {\n          for (let key in source) {\n            if (source.hasOwnProperty(key)) {\n              output[key] = source[key];\n            }\n          }\n        }\n      }\n\n      return output;\n    };\n  })();\n}\n\nexport const assign: (target: Object, ...sources: Array<Object>) => Object = Object.assign;","import { Subject, AnonymousSubject } from '../../Subject';\nimport { Subscriber } from '../../Subscriber';\nimport { Observable } from '../../Observable';\nimport { Subscription } from '../../Subscription';\nimport { Operator } from '../../Operator';\nimport { root } from '../../util/root';\nimport { ReplaySubject } from '../../ReplaySubject';\nimport { Observer, NextObserver } from '../../Observer';\nimport { tryCatch } from '../../util/tryCatch';\nimport { errorObject } from '../../util/errorObject';\nimport { assign } from '../../util/assign';\n\nexport interface WebSocketSubjectConfig {\n  url: string;\n  protocol?: string | Array<string>;\n  resultSelector?: <T>(e: MessageEvent) => T;\n  openObserver?: NextObserver<Event>;\n  closeObserver?: NextObserver<CloseEvent>;\n  closingObserver?: NextObserver<void>;\n  WebSocketCtor?: { new(url: string, protocol?: string|Array<string>): WebSocket };\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class WebSocketSubject<T> extends AnonymousSubject<T> {\n\n  url: string;\n  protocol: string|Array<string>;\n  socket: WebSocket;\n  openObserver: NextObserver<Event>;\n  closeObserver: NextObserver<CloseEvent>;\n  closingObserver: NextObserver<void>;\n  WebSocketCtor: { new(url: string, protocol?: string|Array<string>): WebSocket };\n\n  private _output: Subject<T>;\n\n  resultSelector(e: MessageEvent) {\n    return JSON.parse(e.data);\n  }\n\n  /**\n   * @param urlConfigOrSource\n   * @return {WebSocketSubject}\n   * @static true\n   * @name webSocket\n   * @owner Observable\n   */\n  static create<T>(urlConfigOrSource: string | WebSocketSubjectConfig): WebSocketSubject<T> {\n    return new WebSocketSubject<T>(urlConfigOrSource);\n  }\n\n  constructor(urlConfigOrSource: string | WebSocketSubjectConfig | Observable<T>, destination?: Observer<T>) {\n    if (urlConfigOrSource instanceof Observable) {\n      super(destination, <Observable<T>> urlConfigOrSource);\n    } else {\n      super();\n      this.WebSocketCtor = root.WebSocket;\n      this._output = new Subject<T>();\n      if (typeof urlConfigOrSource === 'string') {\n        this.url = urlConfigOrSource;\n      } else {\n        // WARNING: config object could override important members here.\n        assign(this, urlConfigOrSource);\n      }\n      if (!this.WebSocketCtor) {\n        throw new Error('no WebSocket constructor can be found');\n      }\n      this.destination = new ReplaySubject();\n    }\n  }\n\n  lift<R>(operator: Operator<T, R>): WebSocketSubject<R> {\n    const sock = new WebSocketSubject<R>(this, <any> this.destination);\n    sock.operator = operator;\n    return sock;\n  }\n\n  private _resetState() {\n    this.socket = null;\n    if (!this.source) {\n      this.destination = new ReplaySubject();\n    }\n    this._output = new Subject<T>();\n  }\n\n  // TODO: factor this out to be a proper Operator/Subscriber implementation and eliminate closures\n  multiplex(subMsg: () => any, unsubMsg: () => any, messageFilter: (value: T) => boolean) {\n    const self = this;\n    return new Observable((observer: Observer<any>) => {\n      const result = tryCatch(subMsg)();\n      if (result === errorObject) {\n        observer.error(errorObject.e);\n      } else {\n        self.next(result);\n      }\n\n      let subscription = self.subscribe(x => {\n        const result = tryCatch(messageFilter)(x);\n        if (result === errorObject) {\n          observer.error(errorObject.e);\n        } else if (result) {\n          observer.next(x);\n        }\n      },\n        err => observer.error(err),\n        () => observer.complete());\n\n      return () => {\n        const result = tryCatch(unsubMsg)();\n        if (result === errorObject) {\n          observer.error(errorObject.e);\n        } else {\n          self.next(result);\n        }\n        subscription.unsubscribe();\n      };\n    });\n  }\n\n  private _connectSocket() {\n    const { WebSocketCtor } = this;\n    const observer = this._output;\n\n    let socket: WebSocket = null;\n    try {\n      socket = this.protocol ?\n        new WebSocketCtor(this.url, this.protocol) :\n        new WebSocketCtor(this.url);\n      this.socket = socket;\n    } catch (e) {\n      observer.error(e);\n      return;\n    }\n\n    const subscription = new Subscription(() => {\n      this.socket = null;\n      if (socket && socket.readyState === 1) {\n        socket.close();\n      }\n    });\n\n    socket.onopen = (e: Event) => {\n      const openObserver = this.openObserver;\n      if (openObserver) {\n        openObserver.next(e);\n      }\n\n      const queue = this.destination;\n\n      this.destination = Subscriber.create(\n        (x) => socket.readyState === 1 && socket.send(x),\n        (e) => {\n          const closingObserver = this.closingObserver;\n          if (closingObserver) {\n            closingObserver.next(undefined);\n          }\n          if (e && e.code) {\n            socket.close(e.code, e.reason);\n          } else {\n            observer.error(new TypeError('WebSocketSubject.error must be called with an object with an error code, ' +\n              'and an optional reason: { code: number, reason: string }'));\n          }\n          this._resetState();\n        },\n        ( ) => {\n          const closingObserver = this.closingObserver;\n          if (closingObserver) {\n            closingObserver.next(undefined);\n          }\n          socket.close();\n          this._resetState();\n        }\n      );\n\n      if (queue && queue instanceof ReplaySubject) {\n        subscription.add((<ReplaySubject<T>>queue).subscribe(this.destination));\n      }\n    };\n\n    socket.onerror = (e: Event) => {\n      this._resetState();\n      observer.error(e);\n    };\n\n    socket.onclose = (e: CloseEvent) => {\n      this._resetState();\n      const closeObserver = this.closeObserver;\n      if (closeObserver) {\n        closeObserver.next(e);\n      }\n      if (e.wasClean) {\n        observer.complete();\n      } else {\n        observer.error(e);\n      }\n    };\n\n    socket.onmessage = (e: MessageEvent) => {\n      const result = tryCatch(this.resultSelector)(e);\n      if (result === errorObject) {\n        observer.error(errorObject.e);\n      } else {\n        observer.next(result);\n      }\n    };\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return source.subscribe(subscriber);\n    }\n    if (!this.socket) {\n      this._connectSocket();\n    }\n    let subscription = new Subscription();\n    subscription.add(this._output.subscribe(subscriber));\n    subscription.add(() => {\n      const { socket } = this;\n      if (this._output.observers.length === 0 && socket && socket.readyState === 1) {\n        socket.close();\n      }\n      this._resetState();\n    });\n    return subscription;\n  }\n\n  unsubscribe() {\n    const { source, socket } = this;\n    if (socket && socket.readyState === 1) {\n      socket.close();\n      this._resetState();\n    }\n    super.unsubscribe();\n    if (!source) {\n      this.destination = new ReplaySubject();\n    }\n  }\n}\n","import {  WebSocketSubject  } from './WebSocketSubject';\n\nexport const webSocket = WebSocketSubject.create;","import { Observable } from '../../../Observable';\nimport { webSocket as staticWebSocket } from '../../../observable/dom/webSocket';\n\nObservable.webSocket = staticWebSocket;\n\ndeclare module '../../../Observable' {\n  namespace Observable {\n    export let webSocket: typeof staticWebSocket;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * <img src=\"./img/buffer.png\" width=\"100%\">\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * @example <caption>On every click, emit array of most recent interval events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var buffered = interval.buffer(clicks);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n * values.\n * @method buffer\n * @owner Observable\n */\nexport function buffer<T>(this: Observable<T>, closingNotifier: Observable<any>): Observable<T[]> {\n  return this.lift(new BufferOperator<T>(closingNotifier));\n}\n\nclass BufferOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingNotifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source._subscribe(new BufferSubscriber(subscriber, this.closingNotifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[] = [];\n\n  constructor(destination: Subscriber<T[]>, closingNotifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, closingNotifier));\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    const buffer = this.buffer;\n    this.buffer = [];\n    this.destination.next(buffer);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { buffer } from '../../operator/buffer';\n\nObservable.prototype.buffer = buffer;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    buffer: typeof buffer;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * <img src=\"./img/bufferCount.png\" width=\"100%\">\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * @example <caption>Emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>On every click, emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2, 1);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\n * @method bufferCount\n * @owner Observable\n */\nexport function bufferCount<T>(this: Observable<T>, bufferSize: number, startBufferEvery: number = null): Observable<T[]> {\n  return this.lift(new BufferCountOperator<T>(bufferSize, startBufferEvery));\n}\n\nclass BufferCountOperator<T> implements Operator<T, T[]> {\n  constructor(private bufferSize: number, private startBufferEvery: number) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source._subscribe(new BufferCountSubscriber(subscriber, this.bufferSize, this.startBufferEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferCountSubscriber<T> extends Subscriber<T> {\n  private buffers: Array<T[]> = [[]];\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T[]>, private bufferSize: number, private startBufferEvery: number) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    const count = (this.count += 1);\n    const destination = this.destination;\n    const bufferSize = this.bufferSize;\n    const startBufferEvery = (this.startBufferEvery == null) ? bufferSize : this.startBufferEvery;\n    const buffers = this.buffers;\n    const len = buffers.length;\n    let remove = -1;\n\n    if (count % startBufferEvery === 0) {\n      buffers.push([]);\n    }\n\n    for (let i = 0; i < len; i++) {\n      const buffer = buffers[i];\n      buffer.push(value);\n      if (buffer.length === bufferSize) {\n        remove = i;\n        destination.next(buffer);\n      }\n    }\n\n    if (remove !== -1) {\n      buffers.splice(remove, 1);\n    }\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    const buffers = this.buffers;\n    while (buffers.length > 0) {\n      let buffer = buffers.shift();\n      if (buffer.length > 0) {\n        destination.next(buffer);\n      }\n    }\n    super._complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferCount } from '../../operator/bufferCount';\n\nObservable.prototype.bufferCount = bufferCount;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferCount: typeof bufferCount;\n  }\n}","import { Scheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Operator } from '../Operator';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { isScheduler } from '../util/isScheduler';\n\n/**\n * Buffers the source Observable values for a specific time period.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * those arrays periodically in time.</span>\n *\n * <img src=\"./img/bufferTime.png\" width=\"100%\">\n *\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\n * resets the buffer every `bufferTimeSpan` milliseconds. If\n * `bufferCreationInterval` is given, this operator opens the buffer every\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n * `maxBufferSize` is specified, the buffer will be closed either after\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n *\n * @example <caption>Every second, emit an array of the recent click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(1000);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(2000, 5000);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link windowTime}\n *\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n * @param {number} [bufferCreationInterval] The interval at which to start new\n * buffers.\n * @param {number} [maxBufferSize] The maximum buffer size.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine buffer boundaries.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferTime\n * @owner Observable\n */\n/* tslint:disable:max-line-length */\nexport function bufferTime<T>(this: Observable<T>, bufferTimeSpan: number, scheduler?: Scheduler): Observable<T[]>;\nexport function bufferTime<T>(this: Observable<T>, bufferTimeSpan: number, bufferCreationInterval: number, scheduler?: Scheduler): Observable<T[]>;\nexport function bufferTime<T>(this: Observable<T>, bufferTimeSpan: number, bufferCreationInterval: number, maxBufferSize: number, scheduler?: Scheduler): Observable<T[]>;\n/* tslint:disable:max-line-length */\nexport function bufferTime<T>(this: Observable<T>, bufferTimeSpan: number): Observable<T[]> {\n  let length: number = arguments.length;\n\n  let scheduler: Scheduler = async;\n  if (isScheduler(arguments[arguments.length - 1])) {\n    scheduler = arguments[arguments.length - 1];\n    length--;\n  }\n\n  let bufferCreationInterval: number = null;\n  if (length >= 2) {\n    bufferCreationInterval = arguments[1];\n  }\n\n  let maxBufferSize: number = Number.POSITIVE_INFINITY;\n  if (length >= 3) {\n    maxBufferSize = arguments[2];\n  }\n\n  return this.lift(new BufferTimeOperator<T>(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));\n}\n\nclass BufferTimeOperator<T> implements Operator<T, T[]> {\n  constructor(private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source._subscribe(new BufferTimeSubscriber(\n      subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler\n    ));\n  }\n}\n\nclass Context<T> {\n  buffer: T[] = [];\n  closeAction: Subscription;\n}\n\ntype CreationState<T> = {\n  bufferTimeSpan: number;\n  bufferCreationInterval: number,\n  subscriber: BufferTimeSubscriber<T>;\n  scheduler: Scheduler;\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferTimeSubscriber<T> extends Subscriber<T> {\n  private contexts: Array<Context<T>> = [];\n  private timespanOnly: boolean;\n\n  constructor(destination: Subscriber<T[]>,\n              private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: Scheduler) {\n    super(destination);\n    const context = this.openContext();\n    this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;\n    if (this.timespanOnly) {\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    } else {\n      const closeState = { subscriber: this, context };\n      const creationState: CreationState<T> = { bufferTimeSpan, bufferCreationInterval, subscriber: this, scheduler };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));\n      this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));\n    }\n  }\n\n  protected _next(value: T) {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    let filledBufferContext: Context<T>;\n    for (let i = 0; i < len; i++) {\n      const context = contexts[i];\n      const buffer = context.buffer;\n      buffer.push(value);\n      if (buffer.length == this.maxBufferSize) {\n        filledBufferContext = context;\n      }\n    }\n\n    if (filledBufferContext) {\n      this.onBufferFull(filledBufferContext);\n    }\n  }\n\n  protected _error(err: any) {\n    this.contexts.length = 0;\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts, destination } = this;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      destination.next(context.buffer);\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    this.contexts = null;\n  }\n\n  protected onBufferFull(context: Context<T>) {\n    this.closeContext(context);\n    const closeAction = context.closeAction;\n    closeAction.unsubscribe();\n    this.remove(closeAction);\n\n    if (!this.closed && this.timespanOnly) {\n      context = this.openContext();\n      const bufferTimeSpan = this.bufferTimeSpan;\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  openContext(): Context<T> {\n    const context: Context<T> = new Context<T>();\n    this.contexts.push(context);\n    return context;\n  }\n\n  closeContext(context: Context<T>) {\n    this.destination.next(context.buffer);\n    const contexts = this.contexts;\n\n    const spliceIndex = contexts ? contexts.indexOf(context) : -1;\n    if (spliceIndex >= 0) {\n      contexts.splice(contexts.indexOf(context), 1);\n    }\n  }\n}\n\nfunction dispatchBufferTimeSpanOnly(state: any) {\n  const subscriber: BufferTimeSubscriber<any> = state.subscriber;\n\n  const prevContext = state.context;\n  if (prevContext) {\n    subscriber.closeContext(prevContext);\n  }\n\n  if (!subscriber.closed) {\n    state.context = subscriber.openContext();\n    state.context.closeAction = (<any>this).schedule(state, state.bufferTimeSpan);\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: BufferTimeSubscriber<T>;\n  context: Context<T>;\n}\n\nfunction dispatchBufferCreation<T>(state: CreationState<T>) {\n  const { bufferCreationInterval, bufferTimeSpan, subscriber, scheduler } = state;\n  const context = subscriber.openContext();\n  const action = <Action<CreationState<T>>>this;\n  if (!subscriber.closed) {\n    subscriber.add(context.closeAction = scheduler.schedule<DispatchArg<T>>(dispatchBufferClose, bufferTimeSpan, { subscriber, context }));\n    action.schedule(state, bufferCreationInterval);\n  }\n}\n\nfunction dispatchBufferClose<T>(arg: DispatchArg<T>) {\n  const { subscriber, context } = arg;\n  subscriber.closeContext(context);\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferTime } from '../../operator/bufferTime';\n\nObservable.prototype.bufferTime = bufferTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferTime: typeof bufferTime;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscription } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\n\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * <img src=\"./img/bufferToggle.png\" width=\"100%\">\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var buffered = clicks.bufferToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\nexport function bufferToggle<T, O>(this: Observable<T>, openings: SubscribableOrPromise<O>,\n                                   closingSelector: (value: O) => SubscribableOrPromise<any>): Observable<T[]> {\n  return this.lift(new BufferToggleOperator<T, O>(openings, closingSelector));\n}\n\nclass BufferToggleOperator<T, O> implements Operator<T, T[]> {\n\n  constructor(private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source._subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));\n  }\n}\n\ninterface BufferContext<T> {\n  buffer: T[];\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferToggleSubscriber<T, O> extends OuterSubscriber<T, O> {\n  private contexts: Array<BufferContext<T>> = [];\n\n  constructor(destination: Subscriber<T[]>,\n              private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any> | void) {\n    super(destination);\n    this.add(subscribeToResult(this, openings));\n  }\n\n  protected _next(value: T): void {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    for (let i = 0; i < len; i++) {\n      contexts[i].buffer.push(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._error(err);\n  }\n\n  protected _complete(): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      this.destination.next(context.buffer);\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._complete();\n  }\n\n  notifyNext(outerValue: any, innerValue: O,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, O>): void {\n    outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, O>): void {\n    this.closeBuffer((<any> innerSub).context);\n  }\n\n  private openBuffer(value: O): void {\n    try {\n      const closingSelector = this.closingSelector;\n      const closingNotifier = closingSelector.call(this, value);\n      if (closingNotifier) {\n        this.trySubscribe(closingNotifier);\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n\n  private closeBuffer(context: BufferContext<T>): void {\n    const contexts = this.contexts;\n\n    if (contexts && context) {\n      const { buffer, subscription } = context;\n      this.destination.next(buffer);\n      contexts.splice(contexts.indexOf(context), 1);\n      this.remove(subscription);\n      subscription.unsubscribe();\n    }\n  }\n\n  private trySubscribe(closingNotifier: any): void {\n    const contexts = this.contexts;\n\n    const buffer: Array<T> = [];\n    const subscription = new Subscription();\n    const context = { buffer, subscription };\n    contexts.push(context);\n\n    const innerSubscription = subscribeToResult(this, closingNotifier, <any>context);\n\n    if (!innerSubscription || innerSubscription.closed) {\n      this.closeBuffer(context);\n    } else {\n      (<any> innerSubscription).context = context;\n\n      this.add(innerSubscription);\n      subscription.add(innerSubscription);\n    }\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { bufferToggle } from '../../operator/bufferToggle';\n\nObservable.prototype.bufferToggle = bufferToggle;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferToggle: typeof bufferToggle;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * <img src=\"./img/bufferWhen.png\" width=\"100%\">\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferWhen(() =>\n *   Rx.Observable.interval(1000 + Math.random() * 4000)\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nexport function bufferWhen<T>(this: Observable<T>, closingSelector: () => Observable<any>): Observable<T[]> {\n  return this.lift(new BufferWhenOperator<T>(closingSelector));\n}\n\nclass BufferWhenOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source._subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferWhenSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[];\n  private subscribing: boolean = false;\n  private closingSubscription: Subscription;\n\n  constructor(destination: Subscriber<T[]>, private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openBuffer();\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  protected _complete() {\n    const buffer = this.buffer;\n    if (buffer) {\n      this.destination.next(buffer);\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    this.buffer = null;\n    this.subscribing = false;\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openBuffer();\n  }\n\n  notifyComplete(): void {\n    if (this.subscribing) {\n      this.complete();\n    } else {\n      this.openBuffer();\n    }\n  }\n\n  openBuffer() {\n\n    let { closingSubscription } = this;\n\n    if (closingSubscription) {\n      this.remove(closingSubscription);\n      closingSubscription.unsubscribe();\n    }\n\n    const buffer = this.buffer;\n    if (this.buffer) {\n      this.destination.next(buffer);\n    }\n\n    this.buffer = [];\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n\n    if (closingNotifier === errorObject) {\n      this.error(errorObject.e);\n    } else {\n      closingSubscription = new Subscription();\n      this.closingSubscription = closingSubscription;\n      this.add(closingSubscription);\n      this.subscribing = true;\n      closingSubscription.add(subscribeToResult(this, closingNotifier));\n      this.subscribing = false;\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferWhen } from '../../operator/bufferWhen';\n\nObservable.prototype.bufferWhen = bufferWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferWhen: typeof bufferWhen;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} an observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @method catch\n * @owner Observable\n */\nexport function _catch<T, R>(this: Observable<T>, selector: (err: any, caught: Observable<T>) => ObservableInput<R>): Observable<R> {\n  const operator = new CatchOperator(selector);\n  const caught = this.lift(operator);\n  return (operator.caught = caught);\n}\n\nclass CatchOperator<T, R> implements Operator<T, R> {\n  caught: Observable<T>;\n\n  constructor(private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CatchSubscriber<T, R> extends OuterSubscriber<T, R> {\n  constructor(destination: Subscriber<any>,\n              private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>,\n              private caught: Observable<T>) {\n    super(destination);\n  }\n\n  // NOTE: overriding `error` instead of `_error` because we don't want\n  // to have this flag this subscriber as `isStopped`.\n  error(err: any) {\n    if (!this.isStopped) {\n      let result: any;\n\n      try {\n        result = this.selector(err, this.caught);\n      } catch (err) {\n        this.destination.error(err);\n        return;\n      }\n\n      this.unsubscribe();\n      (<any>this.destination).remove(this);\n      subscribeToResult(this, result);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { _catch } from '../../operator/catch';\n\nObservable.prototype.catch = _catch;\nObservable.prototype._catch = _catch;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    catch: typeof _catch;\n    _catch: typeof _catch;\n  }\n}","import { CombineLatestOperator } from './combineLatest';\nimport { Observable } from '../Observable';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by waiting\n * for the outer Observable to complete, then applying {@link combineLatest}.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by applying\n * {@link combineLatest} when the Observable-of-Observables completes.</span>\n *\n * <img src=\"./img/combineAll.png\" width=\"100%\">\n *\n * Takes an Observable of Observables, and collects all Observables from it.\n * Once the outer Observable completes, it subscribes to all collected\n * Observables and combines their values using the {@link combineLatest}\n * strategy, such that:\n * - Every time an inner Observable emits, the output Observable emits.\n * - When the returned observable emits, it emits all of the latest values by:\n *   - If a `project` function is provided, it is called with each recent value\n *     from each inner Observable in whatever order they arrived, and the result\n *     of the `project` function is what is emitted by the output Observable.\n *   - If there is no `project` function, an array of all of the most recent\n *     values is emitted by the output Observable.\n *\n * @example <caption>Map two click events to a finite interval Observable, then apply combineAll</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev =>\n *   Rx.Observable.interval(Math.random()*2000).take(3)\n * ).take(2);\n * var result = higherOrder.combineAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n * @see {@link mergeAll}\n *\n * @param {function} [project] An optional function to map the most recent\n * values from each inner Observable into a new result. Takes each of the most\n * recent values from each collected inner Observable as arguments, in order.\n * @return {Observable} An Observable of projected results or arrays of recent\n * values.\n * @method combineAll\n * @owner Observable\n */\nexport function combineAll<T, R>(this: Observable<T>, project?: (...values: Array<any>) => R): Observable<R> {\n  return this.lift(new CombineLatestOperator(project));\n}\n","\nimport { Observable } from '../../Observable';\nimport { combineAll } from '../../operator/combineAll';\n\nObservable.prototype.combineAll = combineAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    combineAll: typeof combineAll;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { isArray } from '../util/isArray';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nconst none = {};\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from this Observable with values from\n * Observables passed as arguments. This is done by subscribing to each\n * Observable, in order, and collecting an array of each of the most recent\n * values any time any of the input Observables emits, then either taking that\n * array and passing it as arguments to an optional `project` function and\n * emitting the return value of that, or just emitting the array of recent\n * values directly if there is no `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method combineLatest\n * @owner Observable\n */\n/* tslint:disable:max-line-length */\nexport function combineLatest<T, R>(this: Observable<T>, project: (v1: T) => R): Observable<R>;\nexport function combineLatest<T, T2, R>(this: Observable<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function combineLatest<T, T2, T3, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, T6, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R> ;\nexport function combineLatest<T, T2>(this: Observable<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function combineLatest<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function combineLatest<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function combineLatest<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function combineLatest<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]> ;\nexport function combineLatest<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function combineLatest<T, R>(this: Observable<T>, array: ObservableInput<T>[]): Observable<Array<T>>;\nexport function combineLatest<T, TOther, R>(this: Observable<T>, array: ObservableInput<TOther>[], project: (v1: T, ...values: Array<TOther>) => R): Observable<R>;\n/* tslint:disable:max-line-length */\nexport function combineLatest<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> |\n                                                       Array<ObservableInput<any>> |\n                                                       ((...values: Array<any>) => R)>): Observable<R> {\n  let project: (...values: Array<any>) => R = null;\n  if (typeof observables[observables.length - 1] === 'function') {\n    project = <(...values: Array<any>) => R>observables.pop();\n  }\n\n  // if the first and only other argument besides the resultSelector is an array\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = <any>observables[0];\n  }\n\n  observables.unshift(this);\n\n  return this.lift.call(new ArrayObservable(observables), new CombineLatestOperator(project));\n}\n\nexport class CombineLatestOperator<T, R> implements Operator<T, R> {\n  constructor(private project?: (...values: Array<any>) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new CombineLatestSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class CombineLatestSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private active: number = 0;\n  private values: any[] = [];\n  private observables: any[] = [];\n  private toRespond: number;\n\n  constructor(destination: Subscriber<R>, private project?: (...values: Array<any>) => R) {\n    super(destination);\n  }\n\n  protected _next(observable: any) {\n    this.values.push(none);\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      this.active = len;\n      this.toRespond = len;\n      for (let i = 0; i < len; i++) {\n        const observable = observables[i];\n        this.add(subscribeToResult(this, observable, observable, i));\n      }\n    }\n  }\n\n  notifyComplete(unused: Subscriber<R>): void {\n    if ((this.active -= 1) === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const values = this.values;\n    const oldVal = values[outerIndex];\n    const toRespond = !this.toRespond\n      ? 0\n      : oldVal === none ? --this.toRespond : this.toRespond;\n    values[outerIndex] = innerValue;\n\n    if (toRespond === 0) {\n      if (this.project) {\n        this._tryProject(values);\n      } else {\n        this.destination.next(values.slice());\n      }\n    }\n  }\n\n  private _tryProject(values: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, values);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { combineLatest } from '../../operator/combineLatest';\n\nObservable.prototype.combineLatest = combineLatest;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    combineLatest: typeof combineLatest;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { concat } from '../../operator/concat';\n\nObservable.prototype.concat = concat;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concat: typeof concat;\n  }\n}","import { Observable } from '../Observable';\nimport { Subscribable } from '../Observable';\nimport { MergeAllOperator } from './mergeAll';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * <img src=\"./img/concatAll.png\" width=\"100%\">\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));\n * var firstOrder = higherOrder.concatAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable emitting values from all the inner\n * Observables concatenated.\n * @method concatAll\n * @owner Observable\n */\n/* tslint:disable:max-line-length */\nexport function concatAll<T>(this: Observable<T>): T;\nexport function concatAll<T, R>(this: Observable<T>): Subscribable<R>;\n/* tslint:disable:max-line-length */\nexport function concatAll<T>(this: Observable<T>): T {\n  return <any>this.lift<any>(new MergeAllOperator<T>(1));\n}\n","\nimport { Observable } from '../../Observable';\nimport { concatAll } from '../../operator/concatAll';\n\nObservable.prototype.concatAll = concatAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concatAll: typeof concatAll;\n  }\n}","import { MergeMapOperator } from './mergeMap';\nimport { Observable, ObservableInput } from '../Observable';\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, in a serialized fashion waiting for each one to complete before\n * merging the next.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link concatAll}.</span>\n *\n * <img src=\"./img/concatMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each new inner Observable is\n * concatenated with the previous inner Observable.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMapTo}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): Observable} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} an observable of values merged from the projected\n * Observables as they were subscribed to, one at a time. Optionally, these\n * values may have been projected from a passed `projectResult` argument.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking values from each projected inner\n * Observable sequentially.\n * @method concatMap\n * @owner Observable\n */\n/* tslint:disable:max-line-length */\nexport function concatMap<T, R>(this: Observable<T>, project: (value: T, index: number) =>  ObservableInput<R>): Observable<R>;\nexport function concatMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) =>  ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:disable:max-line-length */\nexport function concatMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) =>  ObservableInput<I>,\n                                   resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  return this.lift(new MergeMapOperator(project, resultSelector, 1));\n}\n","\nimport { Observable } from '../../Observable';\nimport { concatMap } from '../../operator/concatMap';\n\nObservable.prototype.concatMap = concatMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concatMap: typeof concatMap;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { MergeMapToOperator } from './mergeMapTo';\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in a serialized fashion on the output Observable.\n *\n * <span class=\"informal\">It's like {@link concatMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/concatMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. Each new `innerObservable`\n * instance emitted on the output Observable is concatenated with the previous\n * `innerObservable` instance.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMapTo` is equivalent to `mergeMapTo` with concurrency parameter\n * set to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMapTo(Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link mergeMapTo}\n * @see {@link switchMapTo}\n *\n * @param {Observable} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An observable of values merged together by joining the\n * passed observable with itself, one after the other, for each value emitted\n * from the source.\n * @method concatMapTo\n * @owner Observable\n */\n/* tslint:disable:max-line-length */\nexport function concatMapTo<T, R>(this: Observable<T>, observable: ObservableInput<R>): Observable<R>;\nexport function concatMapTo<T, I, R>(this: Observable<T>, observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:disable:max-line-length */\nexport function concatMapTo<T, I, R>(this: Observable<T>, innerObservable: Observable<I>,\n                                     resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R> {\n  return this.lift(new MergeMapToOperator(innerObservable, resultSelector, 1));\n}\n","\nimport { Observable } from '../../Observable';\nimport { concatMapTo } from '../../operator/concatMapTo';\n\nObservable.prototype.concatMapTo = concatMapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concatMapTo: typeof concatMapTo;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * <img src=\"./img/count.png\" width=\"100%\">\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting an value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * @example <caption>Counts how many seconds have passed before the first click happened</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var secondsBeforeClick = seconds.takeUntil(clicks);\n * var result = secondsBeforeClick.count();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\n * var numbers = Rx.Observable.range(1, 7);\n * var result = numbers.count(i => i % 2 === 1);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n * boolean function to select what values are to be counted. It is provided with\n * arguments of:\n * - `value`: the value from the source Observable.\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n * - `source`: the source Observable instance itself.\n * @return {Observable} An Observable of one number that represents the count as\n * described above.\n * @method count\n * @owner Observable\n */\nexport function count<T>(this: Observable<T>, predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<number> {\n  return this.lift(new CountOperator(predicate, this));\n}\n\nclass CountOperator<T> implements Operator<T, number> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<number>, source: any): any {\n    return source._subscribe(new CountSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CountSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n  private index: number = 0;\n\n  constructor(destination: Observer<number>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.predicate) {\n      this._tryPredicate(value);\n    } else {\n      this.count++;\n    }\n  }\n\n  private _tryPredicate(value: T) {\n    let result: any;\n\n    try {\n      result = this.predicate(value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (result) {\n      this.count++;\n    }\n  }\n\n  protected _complete(): void {\n    this.destination.next(this.count);\n    this.destination.complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { count } from '../../operator/count';\n\nObservable.prototype.count = count;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    count: typeof count;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\n\n/**\n * Converts an Observable of {@link Notification} objects into the emissions\n * that they represent.\n *\n * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n *\n * <img src=\"./img/dematerialize.png\" width=\"100%\">\n *\n * `dematerialize` is assumed to operate an Observable that only emits\n * {@link Notification} objects as `next` emissions, and does not emit any\n * `error`. Such Observable is the output of a `materialize` operation. Those\n * notifications are then unwrapped using the metadata they contain, and emitted\n * as `next`, `error`, and `complete` on the output Observable.\n *\n * Use this operator in conjunction with {@link materialize}.\n *\n * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>\n * var notifA = new Rx.Notification('N', 'A');\n * var notifB = new Rx.Notification('N', 'B');\n * var notifE = new Rx.Notification('E', void 0,\n *   new TypeError('x.toUpperCase is not a function')\n * );\n * var materialized = Rx.Observable.of(notifA, notifB, notifE);\n * var upperCase = materialized.dematerialize();\n * upperCase.subscribe(x => console.log(x), e => console.error(e));\n *\n * @see {@link Notification}\n * @see {@link materialize}\n *\n * @return {Observable} An Observable that emits items and notifications\n * embedded in Notification objects emitted by the source Observable.\n * @method dematerialize\n * @owner Observable\n */\nexport function dematerialize<T>(this: Observable<T>): Observable<any> {\n  return this.lift(new DeMaterializeOperator());\n}\n\nclass DeMaterializeOperator<T extends Notification<any>, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<any>, source: any): any {\n    return source._subscribe(new DeMaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DeMaterializeSubscriber<T extends Notification<any>> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    value.observe(this.destination);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { dematerialize } from '../../operator/dematerialize';\n\nObservable.prototype.dematerialize = dematerialize;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    dematerialize: typeof dematerialize;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * <img src=\"./img/debounce.png\" width=\"100%\">\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounce(() => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): Observable|Promise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\nexport function debounce<T>(this: Observable<T>, durationSelector: (value: T) => SubscribableOrPromise<number>): Observable<T> {\n  return this.lift(new DebounceOperator(durationSelector));\n}\n\nclass DebounceOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new DebounceSubscriber(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n  private durationSubscription: Subscription = null;\n\n  constructor(destination: Subscriber<R>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    try {\n      const result = this.durationSelector.call(this, value);\n\n      if (result) {\n        this._tryNext(value, result);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.emitValue();\n    this.destination.complete();\n  }\n\n  private _tryNext(value: T, duration: SubscribableOrPromise<number>): void {\n    let subscription = this.durationSubscription;\n    this.value = value;\n    this.hasValue = true;\n    if (subscription) {\n      subscription.unsubscribe();\n      this.remove(subscription);\n    }\n\n    subscription = subscribeToResult(this, duration);\n    if (!subscription.closed) {\n      this.add(this.durationSubscription = subscription);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue(): void {\n    if (this.hasValue) {\n      const value = this.value;\n      const subscription = this.durationSubscription;\n      if (subscription) {\n        this.durationSubscription = null;\n        subscription.unsubscribe();\n        this.remove(subscription);\n      }\n      this.value = null;\n      this.hasValue = false;\n      super._next(value);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { debounce } from '../../operator/debounce';\n\nObservable.prototype.debounce = debounce;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    debounce: typeof debounce;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Scheduler } from '../Scheduler';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { async } from '../scheduler/async';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * <img src=\"./img/debounceTime.png\" width=\"100%\">\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link Scheduler} for\n * managing timers.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounceTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {Scheduler} [scheduler=async] The {@link Scheduler} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nexport function debounceTime<T>(this: Observable<T>, dueTime: number, scheduler: Scheduler = async): Observable<T> {\n  return this.lift(new DebounceTimeOperator(dueTime, scheduler));\n}\n\nclass DebounceTimeOperator<T> implements Operator<T, T> {\n  constructor(private dueTime: number, private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceTimeSubscriber<T> extends Subscriber<T> {\n  private debouncedSubscription: Subscription = null;\n  private lastValue: T = null;\n  private hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private dueTime: number,\n              private scheduler: Scheduler) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.clearDebounce();\n    this.lastValue = value;\n    this.hasValue = true;\n    this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));\n  }\n\n  protected _complete() {\n    this.debouncedNext();\n    this.destination.complete();\n  }\n\n  debouncedNext(): void {\n    this.clearDebounce();\n\n    if (this.hasValue) {\n      this.destination.next(this.lastValue);\n      this.lastValue = null;\n      this.hasValue = false;\n    }\n  }\n\n  private clearDebounce(): void {\n    const debouncedSubscription = this.debouncedSubscription;\n\n    if (debouncedSubscription !== null) {\n      this.remove(debouncedSubscription);\n      debouncedSubscription.unsubscribe();\n      this.debouncedSubscription = null;\n    }\n  }\n}\n\nfunction dispatchNext(subscriber: DebounceTimeSubscriber<any>) {\n  subscriber.debouncedNext();\n}\n","\nimport { Observable } from '../../Observable';\nimport { debounceTime } from '../../operator/debounceTime';\n\nObservable.prototype.debounceTime = debounceTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    debounceTime: typeof debounceTime;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * <img src=\"./img/defaultIfEmpty.png\" width=\"100%\">\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * @example <caption>If no clicks happen in 5 seconds, then emit \"no clicks\"</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));\n * var result = clicksBeforeFive.defaultIfEmpty('no clicks');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param {any} [defaultValue=null] The default value used if the source\n * Observable is empty.\n * @return {Observable} An Observable that emits either the specified\n * `defaultValue` if the source Observable emits no items, or the values emitted\n * by the source Observable.\n * @method defaultIfEmpty\n * @owner Observable\n */\n/* tslint:disable:max-line-length */\nexport function defaultIfEmpty<T>(this: Observable<T>, defaultValue?: T): Observable<T>;\nexport function defaultIfEmpty<T, R>(this: Observable<T>, defaultValue?: R): Observable<T | R>;\n/* tslint:disable:max-line-length */\nexport function defaultIfEmpty<T, R>(this: Observable<T>, defaultValue: R = null): Observable<T | R> {\n  return this.lift(new DefaultIfEmptyOperator(defaultValue));\n}\n\nclass DefaultIfEmptyOperator<T, R> implements Operator<T, T | R> {\n\n  constructor(private defaultValue: R) {\n  }\n\n  call(subscriber: Subscriber<T | R>, source: any): any {\n    return source._subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DefaultIfEmptySubscriber<T, R> extends Subscriber<T> {\n  private isEmpty: boolean = true;\n\n  constructor(destination: Subscriber<T | R>, private defaultValue: R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.isEmpty = false;\n    this.destination.next(value);\n  }\n\n  protected _complete(): void {\n    if (this.isEmpty) {\n      this.destination.next(this.defaultValue);\n    }\n    this.destination.complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { defaultIfEmpty } from '../../operator/defaultIfEmpty';\n\nObservable.prototype.defaultIfEmpty = defaultIfEmpty;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    defaultIfEmpty: typeof defaultIfEmpty;\n  }\n}","import { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Operator } from '../Operator';\nimport { Scheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * <img src=\"./img/delay.png\" width=\"100%\">\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * @example <caption>Delay each click by one second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @example <caption>Delay all clicks until a future date happens</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var date = new Date('March 15, 2050 12:00:00'); // in the future\n * var delayedClicks = clicks.delay(date); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {Scheduler} [scheduler=async] The Scheduler to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nexport function delay<T>(this: Observable<T>, delay: number|Date,\n                         scheduler: Scheduler = async): Observable<T> {\n  const absoluteDelay = isDate(delay);\n  const delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(<number>delay);\n  return this.lift(new DelayOperator(delayFor, scheduler));\n}\n\nclass DelayOperator<T> implements Operator<T, T> {\n  constructor(private delay: number,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelaySubscriber<T> extends Subscriber<T> {\n  private queue: Array<any> = [];\n  private active: boolean = false;\n  private errored: boolean = false;\n\n  private static dispatch(state: any): void {\n    const source = state.source;\n    const queue = source.queue;\n    const scheduler = state.scheduler;\n    const destination = state.destination;\n\n    while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {\n      queue.shift().notification.observe(destination);\n    }\n\n    if (queue.length > 0) {\n      const delay = Math.max(0, queue[0].time - scheduler.now());\n      (<any> this).schedule(state, delay);\n    } else {\n      source.active = false;\n    }\n  }\n\n  constructor(destination: Subscriber<T>,\n              private delay: number,\n              private scheduler: Scheduler) {\n    super(destination);\n  }\n\n  private _schedule(scheduler: Scheduler): void {\n    this.active = true;\n    this.add(scheduler.schedule(DelaySubscriber.dispatch, this.delay, {\n      source: this, destination: this.destination, scheduler: scheduler\n    }));\n  }\n\n  private scheduleNotification(notification: Notification<any>): void {\n    if (this.errored === true) {\n      return;\n    }\n\n    const scheduler = this.scheduler;\n    const message = new DelayMessage(scheduler.now() + this.delay, notification);\n    this.queue.push(message);\n\n    if (this.active === false) {\n      this._schedule(scheduler);\n    }\n  }\n\n  protected _next(value: T) {\n    this.scheduleNotification(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    this.errored = true;\n    this.queue = [];\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    this.scheduleNotification(Notification.createComplete());\n  }\n}\n\nclass DelayMessage<T> {\n  constructor(private time: number,\n              private notification: any) {\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { delay } from '../../operator/delay';\n\nObservable.prototype.delay = delay;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    delay: typeof delay;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delayWhen(event =>\n *   Rx.Observable.interval(Math.random() * 5000)\n * );\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\nexport function delayWhen<T>(this: Observable<T>, delayDurationSelector: (value: T) => Observable<any>,\n                             subscriptionDelay?: Observable<any>): Observable<T> {\n  if (subscriptionDelay) {\n    return new SubscriptionDelayObservable(this, subscriptionDelay)\n            .lift(new DelayWhenOperator(delayDurationSelector));\n  }\n  return this.lift(new DelayWhenOperator(delayDurationSelector));\n}\n\nclass DelayWhenOperator<T> implements Operator<T, T> {\n  constructor(private delayDurationSelector: (value: T) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelayWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private completed: boolean = false;\n  private delayNotifierSubscriptions: Array<Subscription> = [];\n  private values: Array<T> = [];\n\n  constructor(destination: Subscriber<T>,\n              private delayDurationSelector: (value: T) => Observable<any>) {\n    super(destination);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(outerValue);\n    this.removeSubscription(innerSub);\n    this.tryComplete();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    const value = this.removeSubscription(innerSub);\n    if (value) {\n      this.destination.next(value);\n    }\n    this.tryComplete();\n  }\n\n  protected _next(value: T): void {\n    try {\n      const delayNotifier = this.delayDurationSelector(value);\n      if (delayNotifier) {\n        this.tryDelay(delayNotifier, value);\n      }\n    } catch (err) {\n        this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.completed = true;\n    this.tryComplete();\n  }\n\n  private removeSubscription(subscription: InnerSubscriber<T, R>): T {\n    subscription.unsubscribe();\n\n    const subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);\n    let value: T = null;\n\n    if (subscriptionIdx !== -1) {\n      value = this.values[subscriptionIdx];\n      this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);\n      this.values.splice(subscriptionIdx, 1);\n    }\n\n    return value;\n  }\n\n  private tryDelay(delayNotifier: Observable<any>, value: T): void {\n    const notifierSubscription = subscribeToResult(this, delayNotifier, value);\n    this.add(notifierSubscription);\n\n    this.delayNotifierSubscriptions.push(notifierSubscription);\n    this.values.push(value);\n  }\n\n  private tryComplete(): void {\n    if (this.completed && this.delayNotifierSubscriptions.length === 0) {\n      this.destination.complete();\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelayObservable<T> extends Observable<T> {\n  constructor(protected source: Observable<T>, private subscriptionDelay: Observable<any>) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelaySubscriber<T> extends Subscriber<T> {\n  private sourceSubscribed: boolean = false;\n\n  constructor(private parent: Subscriber<T>, private source: Observable<T>) {\n    super();\n  }\n\n  protected _next(unused: any) {\n    this.subscribeToSource();\n  }\n\n  protected _error(err: any) {\n    this.unsubscribe();\n    this.parent.error(err);\n  }\n\n  protected _complete() {\n    this.subscribeToSource();\n  }\n\n  private subscribeToSource(): void {\n    if (!this.sourceSubscribed) {\n      this.sourceSubscribed = true;\n      this.unsubscribe();\n      this.source.subscribe(this.parent);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { delayWhen } from '../../operator/delayWhen';\n\nObservable.prototype.delayWhen = delayWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    delayWhen: typeof delayWhen;\n  }\n}","import { Observable } from '../../Observable';\nimport { distinct } from '../../operator/distinct';\n\nObservable.prototype.distinct = distinct;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinct: typeof distinct;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n * If a comparator function is not provided, an equality check is used by default.\n * As the internal HashSet of this operator grows larger and larger, care should be taken in the domain of inputs this operator may see.\n * An optional parameter is also provided such that an Observable can be provided to queue the internal HashSet to flush the values it holds.\n * @param {function} [compare] optional comparison function called to test if an item is distinct from previous items in the source.\n * @param {Observable} [flushes] optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} an Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nexport function distinct<T>(this: Observable<T>, compare?: (x: T, y: T) => boolean, flushes?: Observable<any>): Observable<T> {\n  return this.lift(new DistinctOperator(compare, flushes));\n}\n\nclass DistinctOperator<T> implements Operator<T, T> {\n  constructor(private compare: (x: T, y: T) => boolean, private flushes: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new DistinctSubscriber(subscriber, this.compare, this.flushes));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class DistinctSubscriber<T> extends OuterSubscriber<T, T> {\n  private values: Array<T> = [];\n\n  constructor(destination: Subscriber<T>, compare: (x: T, y: T) => boolean, flushes: Observable<any>) {\n    super(destination);\n    if (typeof compare === 'function') {\n      this.compare = compare;\n    }\n\n    if (flushes) {\n      this.add(subscribeToResult(this, flushes));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    this.values.length = 0;\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, T>): void {\n    this._error(error);\n  }\n\n  protected _next(value: T): void {\n    let found = false;\n    const values = this.values;\n    const len = values.length;\n    try {\n      for (let i = 0; i < len; i++) {\n        if (this.compare(values[i], value)) {\n          found = true;\n          return;\n        }\n      }\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.values.push(value);\n    this.destination.next(value);\n  }\n\n  private compare(x: T, y: T): boolean {\n    return x === y;\n  }\n}\n","import { distinct } from './distinct';\nimport { Observable } from '../Observable';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items,\n * using a property accessed by using the key provided to check if the two items are distinct.\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n * If a comparator function is not provided, an equality check is used by default.\n * As the internal HashSet of this operator grows larger and larger, care should be taken in the domain of inputs this operator may see.\n * An optional parameter is also provided such that an Observable can be provided to queue the internal HashSet to flush the values it holds.\n * @param {string} key string key for object property lookup on each item.\n * @param {function} [compare] optional comparison function called to test if an item is distinct from previous items in the source.\n * @param {Observable} [flushes] optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} an Observable that emits items from the source Observable with distinct values.\n * @method distinctKey\n * @owner Observable\n */\n/* tslint:disable:max-line-length */\nexport function distinctKey<T>(this: Observable<T>, key: string): Observable<T>;\nexport function distinctKey<T, K>(this: Observable<T>, key: string, compare: (x: K, y: K) => boolean, flushes?: Observable<any>): Observable<T>;\n/* tslint:disable:max-line-length */\nexport function distinctKey<T>(this: Observable<T>, key: string, compare?: (x: T, y: T) => boolean, flushes?: Observable<any>): Observable<T> {\n  return distinct.call(this, function(x: T, y: T) {\n    if (compare) {\n      return compare(x[key], y[key]);\n    }\n    return x[key] === y[key];\n  }, flushes);\n}\n","import { Observable } from '../../Observable';\nimport { distinctKey } from '../../operator/distinctKey';\n\nObservable.prototype.distinctKey = distinctKey;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinctKey: typeof distinctKey;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { distinctUntilChanged } from '../../operator/distinctUntilChanged';\n\nObservable.prototype.distinctUntilChanged = distinctUntilChanged;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinctUntilChanged: typeof distinctUntilChanged;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n * If a comparator function is not provided, an equality check is used by default.\n * @param {function} [compare] optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} an Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\n/* tslint:disable:max-line-length */\nexport function distinctUntilChanged<T>(this: Observable<T>, compare?: (x: T, y: T) => boolean): Observable<T>;\nexport function distinctUntilChanged<T, K>(this: Observable<T>, compare: (x: K, y: K) => boolean, keySelector: (x: T) => K): Observable<T>;\n/* tslint:disable:max-line-length */\nexport function distinctUntilChanged<T, K>(this: Observable<T>, compare?: (x: K, y: K) => boolean, keySelector?: (x: T) => K): Observable<T> {\n  return this.lift(new DistinctUntilChangedOperator<T, K>(compare, keySelector));\n}\n\nclass DistinctUntilChangedOperator<T, K> implements Operator<T, T> {\n  constructor(private compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DistinctUntilChangedSubscriber<T, K> extends Subscriber<T> {\n  private key: K;\n  private hasKey: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n    super(destination);\n    if (typeof compare === 'function') {\n      this.compare = compare;\n    }\n  }\n\n  private compare(x: any, y: any): boolean {\n    return x === y;\n  }\n\n  protected _next(value: T): void {\n\n    const keySelector = this.keySelector;\n    let key: any = value;\n\n    if (keySelector) {\n      key = tryCatch(this.keySelector)(value);\n      if (key === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    }\n\n    let result: any = false;\n\n    if (this.hasKey) {\n      result = tryCatch(this.compare)(this.key, key);\n      if (result === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    } else {\n      this.hasKey = true;\n    }\n\n    if (Boolean(result) === false) {\n      this.key = key;\n      this.destination.next(value);\n    }\n  }\n}\n","import { distinctUntilChanged } from './distinctUntilChanged';\nimport { Observable } from '../Observable';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item,\n * using a property accessed by using the key provided to check if the two items are distinct.\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n * If a comparator function is not provided, an equality check is used by default.\n * @param {string} key string key for object property lookup on each item.\n * @param {function} [compare] optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} an Observable that emits items from the source Observable with distinct values based on the key specified.\n * @method distinctUntilKeyChanged\n * @owner Observable\n */\n/* tslint:disable:max-line-length */\nexport function distinctUntilKeyChanged<T>(this: Observable<T>, key: string): Observable<T>;\nexport function distinctUntilKeyChanged<T, K>(this: Observable<T>, key: string, compare: (x: K, y: K) => boolean): Observable<T>;\n/* tslint:disable:max-line-length */\nexport function distinctUntilKeyChanged<T>(this: Observable<T>, key: string, compare?: (x: T, y: T) => boolean): Observable<T> {\n  return distinctUntilChanged.call(this, function(x: T, y: T) {\n    if (compare) {\n      return compare(x[key], y[key]);\n    }\n    return x[key] === y[key];\n  });\n}\n","\nimport { Observable } from '../../Observable';\nimport { distinctUntilKeyChanged } from '../../operator/distinctUntilKeyChanged';\n\nObservable.prototype.distinctUntilKeyChanged = distinctUntilKeyChanged;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinctUntilKeyChanged: typeof distinctUntilKeyChanged;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { PartialObserver } from '../Observer';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @method do\n * @name do\n * @owner Observable\n */\n/* tslint:disable:max-line-length */\nexport function _do<T>(next: (x: T) => void, error?: (e: any) => void, complete?: (this: Observable<T>) => void): Observable<T>;\nexport function _do<T>(this: Observable<T>, observer: PartialObserver<T>): Observable<T>;\n/* tslint:disable:max-line-length */\nexport function _do<T>(this: Observable<T>, nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n                       error?: (e: any) => void,\n                       complete?: () => void): Observable<T> {\n  return this.lift(new DoOperator(nextOrObserver, error, complete));\n}\n\nclass DoOperator<T> implements Operator<T, T> {\n  constructor(private nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              private error?: (e: any) => void,\n              private complete?: () => void) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new DoSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DoSubscriber<T> extends Subscriber<T> {\n\n  private safeSubscriber: Subscriber<T>;\n\n  constructor(destination: Subscriber<T>,\n              nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              error?: (e: any) => void,\n              complete?: () => void) {\n    super(destination);\n\n    const safeSubscriber = new Subscriber<T>(nextOrObserver, error, complete);\n    safeSubscriber.syncErrorThrowable = true;\n    this.add(safeSubscriber);\n    this.safeSubscriber = safeSubscriber;\n  }\n\n  protected _next(value: T): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.next(value);\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.next(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.error(err);\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.complete();\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { _do } from '../../operator/do';\n\nObservable.prototype.do = _do;\nObservable.prototype._do = _do;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    do: typeof _do;\n    _do: typeof _do;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by dropping\n * inner Observables while the previous inner Observable has not yet completed.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * next inner Observables while the current inner is still executing.</span>\n *\n * <img src=\"./img/exhaust.png\" width=\"100%\">\n *\n * `exhaust` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable begins emitting the items emitted by that\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\n * `exhaust` ignores every new inner Observable if the previous Observable has\n * not yet completed. Once that one completes, it will accept and flatten the\n * next inner Observable and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var result = higherOrder.exhaust();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link switch}\n * @see {@link mergeAll}\n * @see {@link exhaustMap}\n * @see {@link zipAll}\n *\n * @return {Observable} Returns an Observable that takes a source of Observables\n * and propagates the first observable exclusively until it completes before\n * subscribing to the next.\n * @method exhaust\n * @owner Observable\n */\nexport function exhaust<T>(this: Observable<T>): Observable<T> {\n  return this.lift(new SwitchFirstOperator<T>());\n}\n\nclass SwitchFirstOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new SwitchFirstSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchFirstSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasCompleted: boolean = false;\n  private hasSubscription: boolean = false;\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, value));\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { exhaust } from '../../operator/exhaust';\n\nObservable.prototype.exhaust = exhaust;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    exhaust: typeof exhaust;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable only if the previous projected Observable has completed.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link exhaust}.</span>\n *\n * <img src=\"./img/exhaustMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. When it projects a source value to\n * an Observable, the output Observable begins emitting the items emitted by\n * that projected Observable. However, `exhaustMap` ignores every new projected\n * Observable if the previous projected Observable has not yet completed. Once\n * that one completes, it will accept and flatten the next projected Observable\n * and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaust}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): Observable} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable containing projected Observables\n * of each item of the source, ignoring projected Observables that start before\n * their preceding Observable has completed.\n * @method exhaustMap\n * @owner Observable\n */\n/* tslint:disable:max-line-length */\nexport function exhaustMap<T, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<R>): Observable<R>;\nexport function exhaustMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:disable:max-line-length */\nexport function exhaustMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>,\n                                    resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R> {\n  return this.lift(new SwitchFirstMapOperator(project, resultSelector));\n}\n\nclass SwitchFirstMapOperator<T, I, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new SwitchFirstMapSubscriber(subscriber, this.project, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchFirstMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasSubscription: boolean = false;\n  private hasCompleted: boolean = false;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.tryNext(value);\n    }\n  }\n\n  private tryNext(value: T): void {\n    const index = this.index++;\n    const destination = this.destination;\n    try {\n      const result = this.project(value, index);\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, result, value, index));\n    } catch (err) {\n      destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private trySelectResult(outerValue: T, innerValue: I,\n                          outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    try {\n      const result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n      destination.next(result);\n    } catch (err) {\n      destination.error(err);\n    }\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { exhaustMap } from '../../operator/exhaustMap';\n\nObservable.prototype.exhaustMap = exhaustMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    exhaustMap: typeof exhaustMap;\n  }\n}","import { Observable } from '../Observable';\nimport { Scheduler } from '../Scheduler';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Recursively projects each source value to an Observable which is merged in\n * the output Observable.\n *\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\n * projection function to every source value as well as every output value.\n * It's recursive.</span>\n *\n * <img src=\"./img/expand.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger. *Expand* will re-emit on the output\n * Observable every source value. Then, each output value is given to the\n * `project` function which returns an inner Observable to be merged on the\n * output Observable. Those output values resulting from the projection are also\n * given to the `project` function to produce new output values. This is how\n * *expand* behaves recursively.\n *\n * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var powersOfTwo = clicks\n *   .mapTo(1)\n *   .expand(x => Rx.Observable.of(2 * x).delay(1000))\n *   .take(10);\n * powersOfTwo.subscribe(x => console.log(x));\n *\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n *\n * @param {function(value: T, index: number) => Observable} project A function\n * that, when applied to an item emitted by the source or the output Observable,\n * returns an Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The Scheduler to use for subscribing to\n * each projected inner Observable.\n * @return {Observable} An Observable that emits the source values and also\n * result of applying the projection function to each value emitted on the\n * output Observable and and merging the results of the Observables obtained\n * from this transformation.\n * @method expand\n * @owner Observable\n */\n/* tslint:disable:max-line-length */\nexport function expand<T>(this: Observable<T>, project: (value: T, index: number) => Observable<T>, concurrent?: number, scheduler?: Scheduler): Observable<T>;\nexport function expand<T, R>(this: Observable<T>, project: (value: T, index: number) => Observable<R>, concurrent?: number, scheduler?: Scheduler): Observable<R>;\n/* tslint:disable:max-line-length */\nexport function expand<T, R>(this: Observable<T>, project: (value: T, index: number) => Observable<R>,\n                             concurrent: number = Number.POSITIVE_INFINITY,\n                             scheduler: Scheduler = undefined): Observable<R> {\n  concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n\n  return this.lift(new ExpandOperator(project, concurrent, scheduler));\n}\n\nexport class ExpandOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => Observable<R>,\n              private concurrent: number,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n  }\n}\n\ninterface DispatchArg<T, R> {\n  subscriber: ExpandSubscriber<T, R>;\n  result: Observable<R>;\n  value: any;\n  index: number;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ExpandSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private index: number = 0;\n  private active: number = 0;\n  private hasCompleted: boolean = false;\n  private buffer: any[];\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => Observable<R>,\n              private concurrent: number,\n              private scheduler: Scheduler) {\n    super(destination);\n    if (concurrent < Number.POSITIVE_INFINITY) {\n      this.buffer = [];\n    }\n  }\n\n  private static dispatch<T, R>(arg: DispatchArg<T, R>): void {\n    const {subscriber, result, value, index} = arg;\n    subscriber.subscribeToProjection(result, value, index);\n  }\n\n  protected _next(value: any): void {\n    const destination = this.destination;\n\n    if (destination.closed) {\n      this._complete();\n      return;\n    }\n\n    const index = this.index++;\n    if (this.active < this.concurrent) {\n      destination.next(value);\n      let result = tryCatch(this.project)(value, index);\n      if (result === errorObject) {\n        destination.error(errorObject.e);\n      } else if (!this.scheduler) {\n        this.subscribeToProjection(result, value, index);\n      } else {\n        const state: DispatchArg<T, R> = { subscriber: this, result, value, index };\n        this.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private subscribeToProjection(result: any, value: T, index: number): void {\n    this.active++;\n    this.add(subscribeToResult<T, R>(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this._next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer && buffer.length > 0) {\n      this._next(buffer.shift());\n    }\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { expand } from '../../operator/expand';\n\nObservable.prototype.expand = expand;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    expand: typeof expand;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Emits the single value at the specified `index` in a sequence of emissions\n * from the source Observable.\n *\n * <span class=\"informal\">Emits only the i-th value, then completes.</span>\n *\n * <img src=\"./img/elementAt.png\" width=\"100%\">\n *\n * `elementAt` returns an Observable that emits the item at the specified\n * `index` in the source Observable, or a default value if that `index` is out\n * of range and the `default` argument is provided. If the `default` argument is\n * not given and the `index` is out of range, the output Observable will emit an\n * `ArgumentOutOfRangeError` error.\n *\n * @example <caption>Emit only the third click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.elementAt(2);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link skip}\n * @see {@link single}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the\n * Observable has completed before emitting the i-th `next` notification.\n *\n * @param {number} index Is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {T} [defaultValue] The default value returned for missing indices.\n * @return {Observable} An Observable that emits a single item, if it is found.\n * Otherwise, will emit the default value if given. If not, then emits an error.\n * @method elementAt\n * @owner Observable\n */\nexport function elementAt<T>(this: Observable<T>, index: number, defaultValue?: T): Observable<T> {\n  return this.lift(new ElementAtOperator(index, defaultValue));\n}\n\nclass ElementAtOperator<T> implements Operator<T, T> {\n\n  constructor(private index: number, private defaultValue?: T) {\n    if (index < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new ElementAtSubscriber(subscriber, this.index, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ElementAtSubscriber<T> extends Subscriber<T> {\n\n  constructor(destination: Subscriber<T>, private index: number, private defaultValue?: T) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (this.index-- === 0) {\n      this.destination.next(x);\n      this.destination.complete();\n    }\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    if (this.index >= 0) {\n      if (typeof this.defaultValue !== 'undefined') {\n        destination.next(this.defaultValue);\n      } else {\n        destination.error(new ArgumentOutOfRangeError);\n      }\n    }\n    destination.complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { elementAt } from '../../operator/elementAt';\n\nObservable.prototype.elementAt = elementAt;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    elementAt: typeof elementAt;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { filter } from '../../operator/filter';\n\nObservable.prototype.filter = filter;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    filter: typeof filter;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { Observable } from '../Observable';\n\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback function to be called when source terminates.\n * @return {Observable} an Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\nexport function _finally<T>(this: Observable<T>, callback: () => void): Observable<T> {\n  return this.lift(new FinallyOperator(callback));\n}\n\nclass FinallyOperator<T> implements Operator<T, T> {\n  constructor(private callback: () => void) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new FinallySubscriber(subscriber, this.callback));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FinallySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<T>, callback: () => void) {\n    super(destination);\n    this.add(new Subscription(callback));\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { _finally } from '../../operator/finally';\n\nObservable.prototype.finally = _finally;\nObservable.prototype._finally = _finally;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    finally: typeof _finally;\n    _finally: typeof _finally;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { find } from '../../operator/find';\n\nObservable.prototype.find = find;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    find: typeof find;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Emits only the first value emitted by the source Observable that meets some\n * condition.\n *\n * <span class=\"informal\">Finds the first value that passes some test and emits\n * that.</span>\n *\n * <img src=\"./img/find.png\" width=\"100%\">\n *\n * `find` searches for the first item in the source Observable that matches the\n * specified condition embodied by the `predicate`, and returns the first\n * occurrence in the source. Unlike {@link first}, the `predicate` is required\n * in `find`, and does not emit an error if a valid value is not found.\n *\n * @example <caption>Find and emit the first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.find(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link first}\n * @see {@link findIndex}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable<T>} An Observable of the first item that matches the\n * condition.\n * @method find\n * @owner Observable\n */\n/* tslint:disable:max-line-length */\nexport function find<T>(this: Observable<T>, predicate: (value: T, index: number, source: Observable<T>) => boolean, thisArg?: any): Observable<T>;\nexport function find<T, S extends T>(this: Observable<T>, predicate: (value: T, index: number, source: Observable<T>) => value is S, thisArg?: any): Observable<S>;\n/* tslint:disable:max-line-length */\nexport function find<T>(this: Observable<T>, predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        thisArg?: any): Observable<T> {\n  if (typeof predicate !== 'function') {\n    throw new TypeError('predicate is not a function');\n  }\n  return <any>this.lift<any>(new FindValueOperator(predicate, this, false, thisArg));\n}\n\nexport class FindValueOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n  }\n\n  call(observer: Subscriber<T>, source: any): any {\n    return source._subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class FindValueSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n    super(destination);\n  }\n\n  private notifyComplete(value: any): void {\n    const destination = this.destination;\n\n    destination.next(value);\n    destination.complete();\n  }\n\n  protected _next(value: T): void {\n    const { predicate, thisArg } = this;\n    const index = this.index++;\n    try {\n      const result = predicate.call(thisArg || this, value, index, this.source);\n      if (result) {\n        this.notifyComplete(this.yieldIndex ? index : value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(this.yieldIndex ? -1 : undefined);\n  }\n}\n","import { Observable } from '../Observable';\nimport { FindValueOperator } from './find';\n\n/**\n * Emits only the index of the first value emitted by the source Observable that\n * meets some condition.\n *\n * <span class=\"informal\">It's like {@link find}, but emits the index of the\n * found value, not the value itself.</span>\n *\n * <img src=\"./img/findIndex.png\" width=\"100%\">\n *\n * `findIndex` searches for the first item in the source Observable that matches\n * the specified condition embodied by the `predicate`, and returns the\n * (zero-based) index of the first occurrence in the source. Unlike\n * {@link first}, the `predicate` is required in `findIndex`, and does not emit\n * an error if a valid value is not found.\n *\n * @example <caption>Emit the index of first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.findIndex(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link first}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of the index of the first item that\n * matches the condition.\n * @method find\n * @owner Observable\n */\nexport function findIndex<T>(this: Observable<T>, predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                             thisArg?: any): Observable<number> {\n  return <any>this.lift<any>(new FindValueOperator(predicate, this, true, thisArg));\n}\n","\nimport { Observable } from '../../Observable';\nimport { findIndex } from '../../operator/findIndex';\n\nObservable.prototype.findIndex = findIndex;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    findIndex: typeof findIndex;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\n\n/**\n * Emits only the first value (or the first value that meets some condition)\n * emitted by the source Observable.\n *\n * <span class=\"informal\">Emits only the first value. Or emits only the first\n * value that passes some test.</span>\n *\n * <img src=\"./img/first.png\" width=\"100%\">\n *\n * If called with no arguments, `first` emits the first value of the source\n * Observable, then completes. If called with a `predicate` function, `first`\n * emits the first value of the source that matches the specified condition. It\n * may also take a `resultSelector` function to produce the output value from\n * the input value, and a `defaultValue` to emit in case the source completes\n * before it is able to emit a valid value. Throws an error if `defaultValue`\n * was not provided and a matching element is not found.\n *\n * @example <caption>Emit only the first click that happens on the DOM</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Emits the first click that happens on a DIV</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link take}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n * An optional function called with each item to test for condition matching.\n * @param {function(value: T, index: number): R} [resultSelector] A function to\n * produce the value on the output Observable based on the values\n * and the indices of the source Observable. The arguments passed to this\n * function are:\n * - `value`: the value that was emitted on the source.\n * - `index`: the \"index\" of the value from the source.\n * @param {R} [defaultValue] The default value emitted in case no valid value\n * was found on the source.\n * @return {Observable<T|R>} an Observable of the first item that matches the\n * condition.\n * @method first\n * @owner Observable\n */\n/* tslint:disable:max-line-length */\nexport function first<T>(this: Observable<T>, predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T>;\nexport function first<T, S extends T>(this: Observable<T>, predicate?: (value: T, index: number, source: Observable<T>) => value is S): Observable<S>;\nexport function first<T>(this: Observable<T>, predicate: (value: T, index: number, source: Observable<T>) => boolean, resultSelector: void, defaultValue?: T): Observable<T>;\nexport function first<T, S extends T>(this: Observable<T>, predicate: (value: T, index: number, source: Observable<T>) => value is S, resultSelector: void, defaultValue?: S): Observable<S>;\nexport function first<T, R>(this: Observable<T>, predicate?: (value: T, index: number, source: Observable<T>) => boolean, resultSelector?: (value: T, index: number) => R, defaultValue?: R): Observable<R>;\n/* tslint:disable:max-line-length */\nexport function first<T, R>(this: Observable<T>, predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: ((value: T, index: number) => R) | void,\n                            defaultValue?: R): Observable<T | R> {\n  return this.lift(new FirstOperator(predicate, resultSelector, defaultValue, this));\n}\n\nclass FirstOperator<T, R> implements Operator<T, R> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source._subscribe(new FirstSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FirstSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n  private hasCompleted: boolean = false;\n\n  constructor(destination: Subscriber<R>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n    if (this.predicate) {\n      this._tryPredicate(value, index);\n    } else {\n      this._emit(value, index);\n    }\n  }\n\n  private _tryPredicate(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.predicate(value, index, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this._emit(value, index);\n    }\n  }\n\n  private _emit(value: any, index: number) {\n    if (this.resultSelector) {\n      this._tryResultSelector(value, index);\n      return;\n    }\n    this._emitFinal(value);\n  }\n\n  private _tryResultSelector(value: T, index: number) {\n    let result: any;\n    try {\n      result = (<any>this).resultSelector(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this._emitFinal(result);\n  }\n\n  private _emitFinal(value: any) {\n    const destination = this.destination;\n    destination.next(value);\n    destination.complete();\n    this.hasCompleted = true;\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    if (!this.hasCompleted && typeof this.defaultValue !== 'undefined') {\n      destination.next(this.defaultValue);\n      destination.complete();\n    } else if (!this.hasCompleted) {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { first } from '../../operator/first';\n\nObservable.prototype.first = <any>first;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    first: typeof first;\n  }\n}","export class MapPolyfill {\n  public size = 0;\n  private _values: any[] = [];\n  private _keys: any[] = [];\n\n  get(key: any) {\n    const i = this._keys.indexOf(key);\n    return i === -1 ? undefined : this._values[i];\n  }\n\n  set(key: any, value: any) {\n    const i = this._keys.indexOf(key);\n    if (i === -1) {\n      this._keys.push(key);\n      this._values.push(value);\n      this.size++;\n    } else {\n      this._values[i] = value;\n    }\n    return this;\n  }\n\n  delete(key: any): boolean {\n    const i = this._keys.indexOf(key);\n    if (i === -1) { return false; }\n    this._values.splice(i, 1);\n    this._keys.splice(i, 1);\n    this.size--;\n    return true;\n  }\n\n  clear(): void {\n    this._keys.length = 0;\n    this._values.length = 0;\n    this.size = 0;\n  }\n\n  forEach(cb: Function, thisArg: any): void {\n    for (let i = 0; i < this.size; i++) {\n      cb.call(thisArg, this._values[i], this._keys[i]);\n    }\n  }\n}","import { root } from './root';\nimport { MapPolyfill } from './MapPolyfill';\n\nexport const Map = root.Map || (() => MapPolyfill)();","export class FastMap {\n  private values: Object = {};\n\n  delete(key: string): boolean {\n    this.values[key] = null;\n    return true;\n  }\n\n  set(key: string, value: any): FastMap {\n    this.values[key] = value;\n    return this;\n  }\n\n  get(key: string): any {\n    return this.values[key];\n  }\n\n  forEach(cb: (value: any, key: any) => void, thisArg?: any): void {\n    const values = this.values;\n    for (let key in values) {\n      if (values.hasOwnProperty(key) && values[key] !== null) {\n        cb.call(thisArg, values[key], key);\n      }\n    }\n  }\n\n  clear(): void {\n    this.values = {};\n  }\n}","import { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subject } from '../Subject';\nimport { Map } from '../util/Map';\nimport { FastMap } from '../util/FastMap';\n\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * <img src=\"./img/groupBy.png\" width=\"100%\">\n *\n * @param {function(value: T): K} keySelector a function that extracts the key\n * for each item.\n * @param {function(value: T): R} [elementSelector] a function that extracts the\n * return element for each item.\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n * a function that returns an Observable to determine how long each group should\n * exist.\n * @return {Observable<GroupedObservable<K,R>>} an Observable that emits\n * GroupedObservables, each of which corresponds to a unique key value and each\n * of which emits those items from the source Observable that share that key\n * value.\n * @method groupBy\n * @owner Observable\n */\n/* tslint:disable:max-line-length */\nexport function groupBy<T, K>(this: Observable<T>, keySelector: (value: T) => K): Observable<GroupedObservable<K, T>>;\nexport function groupBy<T, K>(this: Observable<T>, keySelector: (value: T) => K, elementSelector: void, durationSelector: (grouped: GroupedObservable<K, T>) => Observable<any>): Observable<GroupedObservable<K, T>>;\nexport function groupBy<T, K, R>(this: Observable<T>, keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>): Observable<GroupedObservable<K, R>>;\n/* tslint:disable:max-line-length */\nexport function groupBy<T, K, R>(this: Observable<T>, keySelector: (value: T) => K,\n                                 elementSelector?: ((value: T) => R) | void,\n                                 durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>): Observable<GroupedObservable<K, R>> {\n  return this.lift(new GroupByOperator(this, keySelector, elementSelector, durationSelector));\n}\n\nexport interface RefCountSubscription {\n  count: number;\n  unsubscribe: () => void;\n  closed: boolean;\n  attemptedToUnsubscribe: boolean;\n}\n\nclass GroupByOperator<T, K, R> implements Operator<T, GroupedObservable<K, R>> {\n  constructor(public source: Observable<T>,\n              private keySelector: (value: T) => K,\n              private elementSelector?: ((value: T) => R) | void,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<GroupedObservable<K, R>>, source: any): any {\n    return source._subscribe(new GroupBySubscriber(\n      subscriber, this.keySelector, this.elementSelector, this.durationSelector\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupBySubscriber<T, K, R> extends Subscriber<T> implements RefCountSubscription {\n  private groups: Map<K, Subject<T|R>> = null;\n  public attemptedToUnsubscribe: boolean = false;\n  public count: number = 0;\n\n  constructor(destination: Subscriber<GroupedObservable<K, R>>,\n              private keySelector: (value: T) => K,\n              private elementSelector?: ((value: T) => R) | void,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    let key: K;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      this.error(err);\n      return;\n    }\n\n    this._group(value, key);\n  }\n\n  private _group(value: T, key: K) {\n    let groups = this.groups;\n\n    if (!groups) {\n      groups = this.groups = typeof key === 'string' ? new FastMap() : new Map();\n    }\n\n    let group = groups.get(key);\n\n    let element: R;\n    if (this.elementSelector) {\n      try {\n        element = this.elementSelector(value);\n      } catch (err) {\n        this.error(err);\n      }\n    } else {\n      element = <any>value;\n    }\n\n    if (!group) {\n      groups.set(key, group = new Subject<R>());\n      const groupedObservable = new GroupedObservable(key, group, this);\n      this.destination.next(groupedObservable);\n      if (this.durationSelector) {\n        let duration: any;\n        try {\n          duration = this.durationSelector(new GroupedObservable<K, R>(key, <Subject<R>>group));\n        } catch (err) {\n          this.error(err);\n          return;\n        }\n        this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n      }\n    }\n\n    if (!group.closed) {\n      group.next(element);\n    }\n  }\n\n  protected _error(err: any): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.error(err);\n      });\n\n      groups.clear();\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.complete();\n      });\n\n      groups.clear();\n    }\n    this.destination.complete();\n  }\n\n  removeGroup(key: K): void {\n    this.groups.delete(key);\n  }\n\n  unsubscribe() {\n    if (!this.closed && !this.attemptedToUnsubscribe) {\n      this.attemptedToUnsubscribe = true;\n      if (this.count === 0) {\n        super.unsubscribe();\n      }\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupDurationSubscriber<K, T> extends Subscriber<T> {\n  constructor(private key: K,\n              private group: Subject<T>,\n              private parent: GroupBySubscriber<any, K, T>) {\n    super();\n  }\n\n  protected _next(value: T): void {\n    this._complete();\n  }\n\n  protected _error(err: any): void {\n    const group = this.group;\n    if (!group.closed) {\n      group.error(err);\n    }\n    this.parent.removeGroup(this.key);\n  }\n\n  protected _complete(): void {\n    const group = this.group;\n    if (!group.closed) {\n      group.complete();\n    }\n    this.parent.removeGroup(this.key);\n  }\n}\n\n/**\n * An Observable representing values belonging to the same group represented by\n * a common key. The values emitted by a GroupedObservable come from the source\n * Observable. The common key is available as the field `key` on a\n * GroupedObservable instance.\n *\n * @class GroupedObservable<K, T>\n */\nexport class GroupedObservable<K, T> extends Observable<T> {\n  constructor(public key: K,\n              private groupSubject: Subject<T>,\n              private refCountSubscription?: RefCountSubscription) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const subscription = new Subscription();\n    const {refCountSubscription, groupSubject} = this;\n    if (refCountSubscription && !refCountSubscription.closed) {\n      subscription.add(new InnerRefCountSubscription(refCountSubscription));\n    }\n    subscription.add(groupSubject.subscribe(subscriber));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass InnerRefCountSubscription extends Subscription {\n  constructor(private parent: RefCountSubscription) {\n    super();\n    parent.count++;\n  }\n\n  unsubscribe() {\n    const parent = this.parent;\n    if (!parent.closed && !this.closed) {\n      super.unsubscribe();\n      parent.count -= 1;\n      if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n        parent.unsubscribe();\n      }\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { groupBy } from '../../operator/groupBy';\n\nObservable.prototype.groupBy = <any>groupBy;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    groupBy: typeof groupBy;\n  }\n}","/* tslint:disable:no-empty */\nexport function noop() { }\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { noop } from '../util/noop';\n\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} an empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\nexport function ignoreElements<T>(this: Observable<T>): Observable<T> {\n  return this.lift(new IgnoreElementsOperator());\n};\n\nclass IgnoreElementsOperator<T, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new IgnoreElementsSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IgnoreElementsSubscriber<T> extends Subscriber<T> {\n  protected _next(unused: T): void {\n    noop();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { ignoreElements } from '../../operator/ignoreElements';\n\nObservable.prototype.ignoreElements = ignoreElements;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    ignoreElements: typeof ignoreElements;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\n/**\n * If the source Observable is empty it returns an Observable that emits true, otherwise it emits false.\n *\n * <img src=\"./img/isEmpty.png\" width=\"100%\">\n *\n * @return {Observable} an Observable that emits a Boolean.\n * @method isEmpty\n * @owner Observable\n */\nexport function isEmpty<T>(this: Observable<T>): Observable<boolean> {\n  return this.lift(new IsEmptyOperator());\n}\n\nclass IsEmptyOperator implements Operator<any, boolean> {\n  call (observer: Subscriber<boolean>, source: any): any {\n    return source._subscribe(new IsEmptySubscriber(observer));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IsEmptySubscriber extends Subscriber<any> {\n  constructor(destination: Subscriber<boolean>) {\n    super(destination);\n  }\n\n  private notifyComplete(isEmpty: boolean): void {\n    const destination = this.destination;\n\n    destination.next(isEmpty);\n    destination.complete();\n  }\n\n  protected _next(value: boolean) {\n    this.notifyComplete(false);\n  }\n\n  protected _complete() {\n    this.notifyComplete(true);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { isEmpty } from '../../operator/isEmpty';\n\nObservable.prototype.isEmpty = isEmpty;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    isEmpty: typeof isEmpty;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/audit.png\" width=\"100%\">\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.audit(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): Observable|Promise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\nexport function audit<T>(this: Observable<T>, durationSelector: (value: T) => SubscribableOrPromise<any>): Observable<T> {\n  return this.lift(new AuditOperator(durationSelector));\n}\n\nclass AuditOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new AuditSubscriber<T, T>(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass AuditSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private value: T;\n  private hasValue: boolean = false;\n  private throttled: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.value = value;\n    this.hasValue = true;\n    if (!this.throttled) {\n      const duration = tryCatch(this.durationSelector)(value);\n      if (duration === errorObject) {\n        this.destination.error(errorObject.e);\n      } else {\n        this.add(this.throttled = subscribeToResult(this, duration));\n      }\n    }\n  }\n\n  clearThrottle() {\n    const { value, hasValue, throttled } = this;\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n    if (hasValue) {\n      this.value = null;\n      this.hasValue = false;\n      this.destination.next(value);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R, outerIndex: number, innerIndex: number): void {\n    this.clearThrottle();\n  }\n\n  notifyComplete(): void {\n    this.clearThrottle();\n  }\n}\n","import { Observable } from '../../Observable';\nimport { audit } from '../../operator/audit';\n\nObservable.prototype.audit = audit;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    audit: typeof audit;\n  }\n}","import { async } from '../scheduler/async';\nimport { Operator } from '../Operator';\nimport { Scheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\n/**\n * Ignores source values for `duration` milliseconds, then emits the most recent\n * value from the source Observable, then repeats this process.\n *\n * <span class=\"informal\">When it sees a source values, it ignores that plus\n * the next ones for `duration` milliseconds, and then it emits the most recent\n * value from the source.</span>\n *\n * <img src=\"./img/auditTime.png\" width=\"100%\">\n *\n * `auditTime` is similar to `throttleTime`, but emits the last value from the\n * silenced time window, instead of the first value. `auditTime` emits the most\n * recent value from the source Observable on the output Observable as soon as\n * its internal timer becomes disabled, and ignores source values while the\n * timer is enabled. Initially, the timer is disabled. As soon as the first\n * source value arrives, the timer is enabled. After `duration` milliseconds (or\n * the time unit determined internally by the optional `scheduler`) has passed,\n * the timer is disabled, then the most recent source value is emitted on the\n * output Observable, and this process repeats for the next source value.\n * Optionally takes a {@link Scheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.auditTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} duration Time to wait before emitting the most recent source\n * value, measured in milliseconds or the time unit determined internally\n * by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link Scheduler} to use for\n * managing the timers that handle the rate-limiting behavior.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method auditTime\n * @owner Observable\n */\nexport function auditTime<T>(this: Observable<T>, duration: number, scheduler: Scheduler = async): Observable<T> {\n  return this.lift(new AuditTimeOperator(duration, scheduler));\n}\n\nclass AuditTimeOperator<T> implements Operator<T, T> {\n  constructor(private duration: number,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new AuditTimeSubscriber(subscriber, this.duration, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass AuditTimeSubscriber<T> extends Subscriber<T> {\n\n  private value: T;\n  private hasValue: boolean = false;\n  private throttled: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private duration: number,\n              private scheduler: Scheduler) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.value = value;\n    this.hasValue = true;\n    if (!this.throttled) {\n      this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, this));\n    }\n  }\n\n  clearThrottle(): void {\n    const { value, hasValue, throttled } = this;\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n    if (hasValue) {\n      this.value = null;\n      this.hasValue = false;\n      this.destination.next(value);\n    }\n  }\n}\n\nfunction dispatchNext<T>(subscriber: AuditTimeSubscriber<T>): void {\n  subscriber.clearThrottle();\n}\n","import { Observable } from '../../Observable';\nimport { auditTime } from '../../operator/auditTime';\n\nObservable.prototype.auditTime = auditTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    auditTime: typeof auditTime;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\n\n/**\n * Returns an Observable that emits only the last item emitted by the source Observable.\n * It optionally takes a predicate function as a parameter, in which case, rather than emitting\n * the last item from the source Observable, the resulting Observable will emit the last item\n * from the source Observable that satisfies the predicate.\n *\n * <img src=\"./img/last.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {function} predicate - the condition any source emitted item has to satisfy.\n * @return {Observable} an Observable that emits only the last item satisfying the given condition\n * from the source, or an NoSuchElementException if no such items are emitted.\n * @throws - Throws if no items that match the predicate are emitted by the source Observable.\n * @method last\n * @owner Observable\n */\n/* tslint:disable:max-line-length */\nexport function last<T>(this: Observable<T>, predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T>;\nexport function last<T, S extends T>(this: Observable<T>, predicate?: (value: T, index: number, source: Observable<T>) => value is S): Observable<S>;\nexport function last<T>(this: Observable<T>, predicate: (value: T, index: number, source: Observable<T>) => boolean, resultSelector: void, defaultValue?: T): Observable<T>;\nexport function last<T, S extends T>(this: Observable<T>, predicate: (value: T, index: number, source: Observable<T>) => value is S, resultSelector: void, defaultValue?: S): Observable<S>;\nexport function last<T, R>(this: Observable<T>, predicate?: (value: T, index: number, source: Observable<T>) => boolean, resultSelector?: (value: T, index: number) => R, defaultValue?: R): Observable<R>;\n/* tslint:disable:max-line-length */\nexport function last<T, R>(this: Observable<T>, predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: ((value: T, index: number) => R) | void,\n                           defaultValue?: R): Observable<T | R> {\n  return this.lift(new LastOperator(predicate, resultSelector, defaultValue, this));\n}\n\nclass LastOperator<T, R> implements Operator<T, R> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source._subscribe(new LastSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass LastSubscriber<T, R> extends Subscriber<T> {\n  private lastValue: T | R;\n  private hasValue: boolean = false;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n    super(destination);\n    if (typeof defaultValue !== 'undefined') {\n      this.lastValue = defaultValue;\n      this.hasValue = true;\n    }\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n    if (this.predicate) {\n      this._tryPredicate(value, index);\n    } else {\n      if (this.resultSelector) {\n        this._tryResultSelector(value, index);\n        return;\n      }\n      this.lastValue = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryPredicate(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.predicate(value, index, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      if (this.resultSelector) {\n        this._tryResultSelector(value, index);\n        return;\n      }\n      this.lastValue = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryResultSelector(value: T, index: number) {\n    let result: any;\n    try {\n      result = (<any>this).resultSelector(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.lastValue = result;\n    this.hasValue = true;\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    if (this.hasValue) {\n      destination.next(this.lastValue);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { last } from '../../operator/last';\n\nObservable.prototype.last = <any>last;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    last: typeof last;\n  }\n}","import { Observable } from '../Observable';\n\n/**\n * @param func\n * @return {Observable<R>}\n * @method let\n * @owner Observable\n */\nexport function letProto<T, R>(this: Observable<T>, func: (selector: Observable<T>) => Observable<R>): Observable<R> {\n  return func(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { letProto } from '../../operator/let';\n\nObservable.prototype.let = letProto;\nObservable.prototype.letBind = letProto;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    let: typeof letProto;\n    letBind: typeof letProto;\n  }\n}","import { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n * @param {function} predicate a function for determining if an item meets a specified condition.\n * @param {any} [thisArg] optional object to use for `this` in the callback\n * @return {Observable} an Observable of booleans that determines if all items of the source Observable meet the condition specified.\n * @method every\n * @owner Observable\n */\nexport function every<T>(this: Observable<T>, predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         thisArg?: any): Observable<boolean> {\n  return this.lift(new EveryOperator(predicate, thisArg, this));\n}\n\nclass EveryOperator<T> implements Operator<T, boolean> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<boolean>, source: any): any {\n    return source._subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass EverySubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Observer<boolean>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg: any,\n              private source?: Observable<T>) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  private notifyComplete(everyValueMatch: boolean): void {\n    this.destination.next(everyValueMatch);\n    this.destination.complete();\n  }\n\n  protected _next(value: T): void {\n    let result = false;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (!result) {\n      this.notifyComplete(false);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(true);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { every } from '../../operator/every';\n\nObservable.prototype.every = every;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    every: typeof every;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { map } from '../../operator/map';\n\nObservable.prototype.map = map;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    map: typeof map;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nexport function mapTo<T, R>(this: Observable<T>, value: R): Observable<R> {\n  return this.lift(new MapToOperator(value));\n}\n\nclass MapToOperator<T, R> implements Operator<T, R> {\n\n  value: R;\n\n  constructor(value: R) {\n    this.value = value;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new MapToSubscriber(subscriber, this.value));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapToSubscriber<T, R> extends Subscriber<T> {\n\n  value: R;\n\n  constructor(destination: Subscriber<R>, value: R) {\n    super(destination);\n    this.value = value;\n  }\n\n  protected _next(x: T) {\n    this.destination.next(this.value);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { mapTo } from '../../operator/mapTo';\n\nObservable.prototype.mapTo = mapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    mapTo: typeof mapTo;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\n\n/**\n * Represents all of the notifications from the source Observable as `next`\n * emissions marked with their original types within {@link Notification}\n * objects.\n *\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n * {@link Notification} objects, emitted as `next` on the output Observable.\n * </span>\n *\n * <img src=\"./img/materialize.png\" width=\"100%\">\n *\n * `materialize` returns an Observable that emits a `next` notification for each\n * `next`, `error`, or `complete` emission of the source Observable. When the\n * source Observable emits `complete`, the output Observable will emit `next` as\n * a Notification of type \"complete\", and then it will emit `complete` as well.\n * When the source Observable emits `error`, the output will emit `next` as a\n * Notification of type \"error\", and then `complete`.\n *\n * This operator is useful for producing metadata of the source Observable, to\n * be consumed as `next` emissions. Use it in conjunction with\n * {@link dematerialize}.\n *\n * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>\n * var letters = Rx.Observable.of('a', 'b', 13, 'd');\n * var upperCase = letters.map(x => x.toUpperCase());\n * var materialized = upperCase.materialize();\n * materialized.subscribe(x => console.log(x));\n *\n * @see {@link Notification}\n * @see {@link dematerialize}\n *\n * @return {Observable<Notification<T>>} An Observable that emits\n * {@link Notification} objects that wrap the original emissions from the source\n * Observable with metadata.\n * @method materialize\n * @owner Observable\n */\nexport function materialize<T>(this: Observable<T>): Observable<Notification<T>> {\n  return this.lift(new MaterializeOperator());\n}\n\nclass MaterializeOperator<T> implements Operator<T, Notification<T>> {\n  call(subscriber: Subscriber<Notification<T>>, source: any): any {\n    return source._subscribe(new MaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MaterializeSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<Notification<T>>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.destination.next(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    const destination = this.destination;\n    destination.next(Notification.createError(err));\n    destination.complete();\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    destination.next(Notification.createComplete());\n    destination.complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { materialize } from '../../operator/materialize';\n\nObservable.prototype.materialize = materialize;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    materialize: typeof materialize;\n  }\n}","import { Observable } from '../Observable';\nimport { ReduceOperator } from './reduce';\n\n/**\n * The Max operator operates on an Observable that emits numbers (or items that can be evaluated as numbers),\n * and when source Observable completes it emits a single item: the item with the largest number.\n *\n * <img src=\"./img/max.png\" width=\"100%\">\n *\n * @param {Function} optional comparer function that it will use instead of its default to compare the value of two\n * items.\n * @return {Observable} an Observable that emits item with the largest number.\n * @method max\n * @owner Observable\n */\nexport function max<T>(this: Observable<T>, comparer?: (x: T, y: T) => number): Observable<T> {\n  const max: (x: T, y: T) => T = (typeof comparer === 'function')\n    ? (x, y) => comparer(x, y) > 0 ? x : y\n    : (x, y) => x > y ? x : y;\n  return this.lift(new ReduceOperator(max));\n}\n","\nimport { Observable } from '../../Observable';\nimport { max } from '../../operator/max';\n\nObservable.prototype.max = max;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    max: typeof max;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { Scheduler } from '../Scheduler';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { MergeAllOperator } from './mergeAll';\nimport { isScheduler } from '../util/isScheduler';\n\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (either the source or an\n * Observable given as argument), and simply forwards (without doing any\n * transformation) all the values from all the input Observables to the output\n * Observable. The output Observable only completes once all input Observables\n * have completed. Any error delivered by an input Observable will be immediately\n * emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = clicks.merge(timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = timer1.merge(timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {Observable} other An input Observable to merge with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The Scheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @method merge\n * @owner Observable\n */\n/* tslint:disable:max-line-length */\nexport function merge<T>(this: Observable<T>, scheduler?: Scheduler): Observable<T>;\nexport function merge<T>(this: Observable<T>, concurrent?: number, scheduler?: Scheduler): Observable<T>;\nexport function merge<T, T2>(this: Observable<T>, v2: ObservableInput<T2>, scheduler?: Scheduler): Observable<T | T2>;\nexport function merge<T, T2>(this: Observable<T>, v2: ObservableInput<T2>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2>;\nexport function merge<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: Scheduler): Observable<T | T2 | T3>;\nexport function merge<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3>;\nexport function merge<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T>(this: Observable<T>, ...observables: Array<ObservableInput<T> | Scheduler | number>): Observable<T>;\nexport function merge<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | Scheduler | number>): Observable<R>;\n/* tslint:disable:max-line-length */\nexport function merge<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | Scheduler | number>): Observable<R> {\n  return this.lift.call(mergeStatic<T, R>(this, ...observables));\n}\n\n/* tslint:disable:max-line-length */\nexport function mergeStatic<T>(v1: ObservableInput<T>, scheduler?: Scheduler): Observable<T>;\nexport function mergeStatic<T>(v1: ObservableInput<T>, concurrent?: number, scheduler?: Scheduler): Observable<T>;\nexport function mergeStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: Scheduler): Observable<T | T2>;\nexport function mergeStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2>;\nexport function mergeStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: Scheduler): Observable<T | T2 | T3>;\nexport function mergeStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3>;\nexport function mergeStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4>;\nexport function mergeStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3 | T4>;\nexport function mergeStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function mergeStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function mergeStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function mergeStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function mergeStatic<T>(...observables: (ObservableInput<T> | Scheduler | number)[]): Observable<T>;\nexport function mergeStatic<T, R>(...observables: (ObservableInput<any> | Scheduler | number)[]): Observable<R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = Rx.Observable.merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {...Observable} observables Input Observables to merge together.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The Scheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @static true\n * @name merge\n * @owner Observable\n */\nexport function mergeStatic<T, R>(...observables: Array<ObservableInput<any> | Scheduler | number>): Observable<R> {\n let concurrent = Number.POSITIVE_INFINITY;\n let scheduler: Scheduler = null;\n  let last: any = observables[observables.length - 1];\n  if (isScheduler(last)) {\n    scheduler = <Scheduler>observables.pop();\n    if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n      concurrent = <number>observables.pop();\n    }\n  } else if (typeof last === 'number') {\n    concurrent = <number>observables.pop();\n  }\n\n  if (scheduler === null && observables.length === 1) {\n    return <Observable<R>>observables[0];\n  }\n\n  return new ArrayObservable(<any>observables, scheduler).lift(new MergeAllOperator<R>(concurrent));\n}\n","\nimport { Observable } from '../../Observable';\nimport { merge } from '../../operator/merge';\n\nObservable.prototype.merge = merge;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    merge: typeof merge;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { mergeAll } from '../../operator/mergeAll';\n\nObservable.prototype.mergeAll = mergeAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    mergeAll: typeof mergeAll;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): Observable} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\n/* tslint:disable:max-line-length */\nexport function mergeMap<T, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<R>, concurrent?: number): Observable<R>;\nexport function mergeMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): Observable<R>;\n/* tslint:disable:max-line-length */\nexport function mergeMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>,\n                                  resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                  concurrent: number = Number.POSITIVE_INFINITY): Observable<I | R> {\n  if (typeof resultSelector === 'number') {\n    concurrent = <number>resultSelector;\n    resultSelector = null;\n  }\n  return this.lift(new MergeMapOperator(project, <any>resultSelector, concurrent));\n}\n\nexport class MergeMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<I>, source: any): any {\n    return source._subscribe(new MergeMapSubscriber(\n      observer, this.project, this.resultSelector, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      this._tryNext(value);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  protected _tryNext(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.active++;\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(ish: ObservableInput<I>, value: T, index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _notifyResultSelector(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeMap } from '../../operator/mergeMap';\n\nObservable.prototype.mergeMap = <any>mergeMap;\nObservable.prototype.flatMap = <any>mergeMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    flatMap: typeof mergeMap;\n    mergeMap: typeof mergeMap;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in the output Observable.\n *\n * <span class=\"informal\">It's like {@link mergeMap}, but maps each value always\n * to the same inner Observable.</span>\n *\n * <img src=\"./img/mergeMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then merges those resulting Observables into one\n * single Observable, which is the output Observable.\n *\n * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n * @see {@link switchMapTo}\n *\n * @param {Observable} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable.\n * @method mergeMapTo\n * @owner Observable\n */\n/* tslint:disable:max-line-length */\nexport function mergeMapTo<T, R>(this: Observable<T>, observable: ObservableInput<R>, concurrent?: number): Observable<R>;\nexport function mergeMapTo<T, I, R>(this: Observable<T>, observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): Observable<R>;\n/* tslint:disable:max-line-length */\nexport function mergeMapTo<T, I, R>(this: Observable<T>, innerObservable: Observable<I>,\n                                    resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                    concurrent: number = Number.POSITIVE_INFINITY): Observable<R> {\n  if (typeof resultSelector === 'number') {\n    concurrent = <number>resultSelector;\n    resultSelector = null;\n  }\n  return this.lift(new MergeMapToOperator(innerObservable, <any>resultSelector, concurrent));\n}\n\n// TODO: Figure out correct signature here: an Operator<Observable<T>, R>\n//       needs to implement call(observer: Subscriber<R>): Subscriber<Observable<T>>\nexport class MergeMapToOperator<T, I, R> implements Operator<Observable<T>, R> {\n  constructor(private ish: ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source._subscribe(new MergeMapToSubscriber(observer, this.ish, this.resultSelector, this.concurrent));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapToSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private ish: ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      const resultSelector = this.resultSelector;\n      const index = this.index++;\n      const ish = this.ish;\n      const destination = this.destination;\n\n      this.active++;\n      this._innerSub(ish, destination, resultSelector, value, index);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private _innerSub(ish: ObservableInput<I>,\n                    destination: PartialObserver<I>,\n                    resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n                    value: T,\n                    index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private trySelectResult(outerValue: T, innerValue: I,\n                          outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    let result: R;\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    destination.next(result);\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeMapTo } from '../../operator/mergeMapTo';\n\nObservable.prototype.flatMapTo = <any>mergeMapTo;\nObservable.prototype.mergeMapTo = <any>mergeMapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    flatMapTo: typeof mergeMapTo;\n    mergeMapTo: typeof mergeMapTo;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\n\n/**\n * @param project\n * @param seed\n * @param concurrent\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method mergeScan\n * @owner Observable\n */\nexport function mergeScan<T, R>(this: Observable<T>, project: (acc: R, value: T) => Observable<R>,\n                                seed: R,\n                                concurrent: number = Number.POSITIVE_INFINITY): Observable<R> {\n  return this.lift(new MergeScanOperator(project, seed, concurrent));\n}\n\nexport class MergeScanOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (acc: R, value: T) => Observable<R>,\n              private seed: R,\n              private concurrent: number) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new MergeScanSubscriber(\n      subscriber, this.project, this.seed, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeScanSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private hasValue: boolean = false;\n  private hasCompleted: boolean = false;\n  private buffer: Observable<any>[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private project: (acc: R, value: T) => Observable<R>,\n              private acc: R,\n              private concurrent: number) {\n    super(destination);\n  }\n\n  protected _next(value: any): void {\n    if (this.active < this.concurrent) {\n      const index = this.index++;\n      const ish = tryCatch(this.project)(this.acc, value);\n      const destination = this.destination;\n      if (ish === errorObject) {\n        destination.error(errorObject.e);\n      } else {\n        this.active++;\n        this._innerSub(ish, value, index);\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private _innerSub(ish: any, value: T, index: number): void {\n    this.add(subscribeToResult<T, R>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const { destination } = this;\n    this.acc = innerValue;\n    this.hasValue = true;\n    destination.next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeScan } from '../../operator/mergeScan';\n\nObservable.prototype.mergeScan = mergeScan;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    mergeScan: typeof mergeScan;\n  }\n}","import { Observable } from '../Observable';\nimport { ReduceOperator } from './reduce';\n\n/**\n * The Min operator operates on an Observable that emits numbers (or items that can be evaluated as numbers),\n * and when source Observable completes it emits a single item: the item with the smallest number.\n *\n * <img src=\"./img/min.png\" width=\"100%\">\n *\n * @param {Function} optional comparer function that it will use instead of its default to compare the value of two items.\n * @return {Observable<R>} an Observable that emits item with the smallest number.\n * @method min\n * @owner Observable\n */\nexport function min<T>(this: Observable<T>, comparer?: (x: T, y: T) => number): Observable<T> {\n  const min: (x: T, y: T) => T = (typeof comparer === 'function')\n    ? (x, y) => comparer(x, y) < 0 ? x : y\n    : (x, y) => x < y ? x : y;\n  return this.lift(new ReduceOperator(min));\n}\n","\nimport { Observable } from '../../Observable';\nimport { min } from '../../operator/min';\n\nObservable.prototype.min = min;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    min: typeof min;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { multicast } from '../../operator/multicast';\n\nObservable.prototype.multicast = <any>multicast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    multicast: typeof multicast;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { observeOn } from '../../operator/observeOn';\n\nObservable.prototype.observeOn = observeOn;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    observeOn: typeof observeOn;\n  }\n}","import { root } from '../util/root';\nimport { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class PromiseObservable<T> extends Observable<T> {\n\n  public value: T;\n\n  /**\n   * Converts a Promise to an Observable.\n   *\n   * <span class=\"informal\">Returns an Observable that just emits the Promise's\n   * resolved value, then completes.</span>\n   *\n   * Converts an ES2015 Promise or a Promises/A+ spec compliant Promise to an\n   * Observable. If the Promise resolves with a value, the output Observable\n   * emits that resolved value as a `next`, and then completes. If the Promise\n   * is rejected, then the output Observable emits the corresponding Error.\n   *\n   * @example <caption>Convert the Promise returned by Fetch to an Observable</caption>\n   * var result = Rx.Observable.fromPromise(fetch('http://myserver.com/'));\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link bindCallback}\n   * @see {@link from}\n   *\n   * @param {Promise<T>} promise The promise to be converted.\n   * @param {Scheduler} [scheduler] An optional Scheduler to use for scheduling\n   * the delivery of the resolved value (or the rejection).\n   * @return {Observable<T>} An Observable which wraps the Promise.\n   * @static true\n   * @name fromPromise\n   * @owner Observable\n   */\n  static create<T>(promise: Promise<T>, scheduler?: Scheduler): Observable<T> {\n    return new PromiseObservable(promise, scheduler);\n  }\n\n  constructor(private promise: Promise<T>, private scheduler?: Scheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const promise = this.promise;\n    const scheduler = this.scheduler;\n\n    if (scheduler == null) {\n      if (this._isScalar) {\n        if (!subscriber.closed) {\n          subscriber.next(this.value);\n          subscriber.complete();\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.closed) {\n              subscriber.next(value);\n              subscriber.complete();\n            }\n          },\n          (err) => {\n            if (!subscriber.closed) {\n              subscriber.error(err);\n            }\n          }\n        )\n        .then(null, err => {\n          // escape the promise trap, throw unhandled errors\n          root.setTimeout(() => { throw err; });\n        });\n      }\n    } else {\n      if (this._isScalar) {\n        if (!subscriber.closed) {\n          return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber });\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.closed) {\n              subscriber.add(scheduler.schedule(dispatchNext, 0, { value, subscriber }));\n            }\n          },\n          (err) => {\n            if (!subscriber.closed) {\n              subscriber.add(scheduler.schedule(dispatchError, 0, { err, subscriber }));\n            }\n          })\n          .then(null, (err) => {\n            // escape the promise trap, throw unhandled errors\n            root.setTimeout(() => { throw err; });\n          });\n      }\n    }\n  }\n}\n\ninterface DispatchNextArg<T> {\n  subscriber: Subscriber<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subscriber } = arg;\n  if (!subscriber.closed) {\n    subscriber.next(value);\n    subscriber.complete();\n  }\n}\n\ninterface DispatchErrorArg<T> {\n  subscriber: Subscriber<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subscriber } = arg;\n  if (!subscriber.closed) {\n    subscriber.error(err);\n  }\n}\n","import { root } from '../util/root';\nimport { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { $$iterator } from '../symbol/iterator';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IteratorObservable<T> extends Observable<T> {\n  private iterator: any;\n\n  static create<T>(iterator: any, scheduler?: Scheduler) {\n    return new IteratorObservable(iterator, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, hasError, iterator, subscriber } = state;\n\n    if (hasError) {\n      subscriber.error(state.error);\n      return;\n    }\n\n    let result = iterator.next();\n    if (result.done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(result.value);\n    state.index = index + 1;\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    (<any> this).schedule(state);\n  }\n\n  constructor(iterator: any, private scheduler?: Scheduler) {\n    super();\n\n    if (iterator == null) {\n      throw new Error('iterator cannot be null.');\n    }\n\n    this.iterator = getIterator(iterator);\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    let index = 0;\n    const { iterator, scheduler } = this;\n\n    if (scheduler) {\n      return scheduler.schedule(IteratorObservable.dispatch, 0, {\n        index, iterator, subscriber\n      });\n    } else {\n      do {\n        let result = iterator.next();\n        if (result.done) {\n          subscriber.complete();\n          break;\n        } else {\n          subscriber.next(result.value);\n        }\n        if (subscriber.closed) {\n          break;\n        }\n      } while (true);\n    }\n  }\n}\n\nclass StringIterator {\n  constructor(private str: string,\n              private idx: number = 0,\n              private len: number = str.length) {\n  }\n  [$$iterator]() { return (this); }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.str.charAt(this.idx++)\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nclass ArrayIterator {\n  constructor(private arr: Array<any>,\n              private idx: number = 0,\n              private len: number = toLength(arr)) {\n  }\n  [$$iterator]() { return this; }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.arr[this.idx++]\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nfunction getIterator(obj: any) {\n  const i = obj[$$iterator];\n  if (!i && typeof obj === 'string') {\n    return new StringIterator(obj);\n  }\n  if (!i && obj.length !== undefined) {\n    return new ArrayIterator(obj);\n  }\n  if (!i) {\n    throw new TypeError('object is not iterable');\n  }\n  return obj[$$iterator]();\n}\n\nconst maxSafeInteger = Math.pow(2, 53) - 1;\n\nfunction toLength(o: any) {\n  let len = +o.length;\n  if (isNaN(len)) {\n      return 0;\n  }\n  if (len === 0 || !numberIsFinite(len)) {\n      return len;\n  }\n  len = sign(len) * Math.floor(Math.abs(len));\n  if (len <= 0) {\n      return 0;\n  }\n  if (len > maxSafeInteger) {\n      return maxSafeInteger;\n  }\n  return len;\n}\n\nfunction numberIsFinite(value: any) {\n  return typeof value === 'number' && root.isFinite(value);\n}\n\nfunction sign(value: any) {\n  let valueAsNumber = +value;\n  if (valueAsNumber === 0) {\n    return valueAsNumber;\n  }\n  if (isNaN(valueAsNumber)) {\n    return valueAsNumber;\n  }\n  return valueAsNumber < 0 ? -1 : 1;\n}\n","import { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayLikeObservable<T> extends Observable<T> {\n\n  static create<T>(arrayLike: ArrayLike<T>, scheduler?: Scheduler): Observable<T> {\n    const length = arrayLike.length;\n    if (length === 0) {\n      return new EmptyObservable<T>();\n    } else if (length === 1) {\n      return new ScalarObservable<T>(<any>arrayLike[0], scheduler);\n    } else {\n      return new ArrayLikeObservable(arrayLike, scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n    const { arrayLike, index, length, subscriber } = state;\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    if (index >= length) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(arrayLike[index]);\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  private value: any;\n\n  constructor(private arrayLike: ArrayLike<T>, private scheduler?: Scheduler) {\n    super();\n    if (!scheduler && arrayLike.length === 1) {\n      this._isScalar = true;\n      this.value = arrayLike[0];\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const { arrayLike, scheduler } = this;\n    const length = arrayLike.length;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {\n        arrayLike, index, length, subscriber\n      });\n    } else {\n      for (let i = 0; i < length && !subscriber.closed; i++) {\n        subscriber.next(arrayLike[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n","import { isArray } from '../util/isArray';\nimport { isPromise } from '../util/isPromise';\nimport { PromiseObservable } from './PromiseObservable';\nimport { IteratorObservable } from'./IteratorObservable';\nimport { ArrayObservable } from './ArrayObservable';\nimport { ArrayLikeObservable } from './ArrayLikeObservable';\n\nimport { Scheduler } from '../Scheduler';\nimport { $$iterator } from '../symbol/iterator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { ObserveOnSubscriber } from '../operator/observeOn';\nimport { $$observable } from '../symbol/observable';\n\nconst isArrayLike = (<T>(x: any): x is ArrayLike<T> => x && typeof x.length === 'number');\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromObservable<T> extends Observable<T> {\n  constructor(private ish: ObservableInput<T>, private scheduler?: Scheduler) {\n    super(null);\n  }\n\n  static create<T>(ish: ObservableInput<T>, scheduler?: Scheduler): Observable<T>;\n  static create<T, R>(ish: ArrayLike<T>, scheduler?: Scheduler): Observable<R>;\n\n  /**\n   * Creates an Observable from an Array, an array-like object, a Promise, an\n   * iterable object, or an Observable-like object.\n   *\n   * <span class=\"informal\">Converts almost anything to an Observable.</span>\n   *\n   * <img src=\"./img/from.png\" width=\"100%\">\n   *\n   * Convert various other objects and data types into Observables. `from`\n   * converts a Promise or an array-like or an\n   * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)\n   * object into an Observable that emits the items in that promise or array or\n   * iterable. A String, in this context, is treated as an array of characters.\n   * Observable-like objects (contains a function named with the ES2015 Symbol\n   * for Observable) can also be converted through this operator.\n   *\n   * @example <caption>Converts an array to an Observable</caption>\n   * var array = [10, 20, 30];\n   * var result = Rx.Observable.from(array);\n   * result.subscribe(x => console.log(x));\n   *\n   * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>\n   * function* generateDoubles(seed) {\n   *   var i = seed;\n   *   while (true) {\n   *     yield i;\n   *     i = 2 * i; // double it\n   *   }\n   * }\n   *  \n   * var iterator = generateDoubles(3);\n   * var result = Rx.Observable.from(iterator).take(10);\n   * result.subscribe(x => console.log(x));\n   *\n   * @see {@link create}\n   * @see {@link fromEvent}\n   * @see {@link fromEventPattern}\n   * @see {@link fromPromise}\n   *  \n   * @param {ObservableInput<T>} ish A subscribable object, a Promise, an\n   * Observable-like, an Array, an iterable or an array-like object to be\n   * converted.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * emissions of values.\n   * @return {Observable<T>} The Observable whose values are originally from the\n   * input object that was converted.\n   * @static true\n   * @name from\n   * @owner Observable\n   */\n  static create<T>(ish: ObservableInput<T>, scheduler?: Scheduler): Observable<T> {\n    if (ish != null) {\n      if (typeof ish[$$observable] === 'function') {\n        if (ish instanceof Observable && !scheduler) {\n          return ish;\n        }\n        return new FromObservable<T>(ish, scheduler);\n      } else if (isArray(ish)) {\n        return new ArrayObservable<T>(ish, scheduler);\n      } else if (isPromise(ish)) {\n        return new PromiseObservable<T>(ish, scheduler);\n      } else if (typeof ish[$$iterator] === 'function' || typeof ish === 'string') {\n        return new IteratorObservable<T>(ish, scheduler);\n      } else if (isArrayLike(ish)) {\n        return new ArrayLikeObservable(ish, scheduler);\n      }\n    }\n\n    throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const ish = this.ish;\n    const scheduler = this.scheduler;\n    if (scheduler == null) {\n      return ish[$$observable]().subscribe(subscriber);\n    } else {\n      return ish[$$observable]().subscribe(new ObserveOnSubscriber(subscriber, scheduler, 0));\n    }\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { FromObservable } from '../observable/FromObservable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { isArray } from '../util/isArray';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNext<T, R>(this: Observable<T>, v: ObservableInput<R>): Observable<R>;\nexport function onErrorResumeNext<T, T2, T3, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<R>;\nexport function onErrorResumeNext<T, T2, T3, T4, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, T6, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<R> ;\nexport function onErrorResumeNext<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\nexport function onErrorResumeNext<T, R>(this: Observable<T>, array: ObservableInput<any>[]): Observable<R>;\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNext<T, R>(this: Observable<T>, ...nextSources: Array<ObservableInput<any> |\n                                                       Array<ObservableInput<any>> |\n                                                       ((...values: Array<any>) => R)>): Observable<R> {\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\n    nextSources = <Array<Observable<any>>>nextSources[0];\n  }\n\n  return this.lift(new OnErrorResumeNextOperator<T, R>(nextSources));\n}\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNextStatic<R>(v: ObservableInput<R>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<R>;\n\nexport function onErrorResumeNextStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\nexport function onErrorResumeNextStatic<R>(array: ObservableInput<any>[]): Observable<R>;\n/* tslint:enable:max-line-length */\n\nexport function onErrorResumeNextStatic<T, R>(...nextSources: Array<ObservableInput<any> |\n                                                              Array<ObservableInput<any>> |\n                                                              ((...values: Array<any>) => R)>): Observable<R> {\n  let source: ObservableInput<any> = null;\n\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\n    nextSources = <Array<ObservableInput<any>>>nextSources[0];\n  }\n  source = nextSources.shift();\n\n  return new FromObservable(source, null).lift(new OnErrorResumeNextOperator<T, R>(nextSources));\n}\n\nclass OnErrorResumeNextOperator<T, R> implements Operator<T, R> {\n  constructor(private nextSources: Array<ObservableInput<any>>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));\n  }\n}\n\nclass OnErrorResumeNextSubscriber<T, R> extends OuterSubscriber<T, R> {\n  constructor(protected destination: Subscriber<T>,\n              private nextSources: Array<ObservableInput<any>>) {\n    super(destination);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this.subscribeToNextSource();\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this.subscribeToNextSource();\n  }\n\n  protected _error(err: any): void {\n    this.subscribeToNextSource();\n  }\n\n  protected _complete(): void {\n    this.subscribeToNextSource();\n  }\n\n  private subscribeToNextSource(): void {\n    const next = this.nextSources.shift();\n    if (next) {\n      this.add(subscribeToResult(this, next));\n    } else {\n      this.destination.complete();\n    }\n  }\n}","import { Observable } from '../../Observable';\r\nimport { onErrorResumeNext } from '../../operator/onErrorResumeNext';\r\n\r\nObservable.prototype.onErrorResumeNext = onErrorResumeNext;\r\n\r\ndeclare module '../../Observable' {\r\n  interface Observable<T> {\r\n    onErrorResumeNext: typeof onErrorResumeNext;\r\n  }\r\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * <img src=\"./img/pairwise.png\" width=\"100%\">\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var pairs = clicks.pairwise();\n * var distance = pairs.map(pair => {\n *   var x0 = pair[0].clientX;\n *   var y0 = pair[0].clientY;\n *   var x1 = pair[1].clientX;\n *   var y1 = pair[1].clientY;\n *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n * });\n * distance.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nexport function pairwise<T>(this: Observable<T>): Observable<[T, T]> {\n  return this.lift(new PairwiseOperator());\n}\n\nclass PairwiseOperator<T> implements Operator<T, [T, T]> {\n  call(subscriber: Subscriber<[T, T]>, source: any): any {\n    return source._subscribe(new PairwiseSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass PairwiseSubscriber<T> extends Subscriber<T> {\n  private prev: T;\n  private hasPrev: boolean = false;\n\n  constructor(destination: Subscriber<[T, T]>) {\n    super(destination);\n  }\n\n  _next(value: T): void {\n    if (this.hasPrev) {\n      this.destination.next([this.prev, value]);\n    } else {\n      this.hasPrev = true;\n    }\n\n    this.prev = value;\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { pairwise } from '../../operator/pairwise';\n\nObservable.prototype.pairwise = pairwise;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    pairwise: typeof pairwise;\n  }\n}","export function not(pred: Function, thisArg: any): Function {\n  function notPred(): any {\n    return !((<any> notPred).pred.apply((<any> notPred).thisArg, arguments));\n  }\n  (<any> notPred).pred = pred;\n  (<any> notPred).thisArg = thisArg;\n  return notPred;\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctKey}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\n/* tslint:disable:max-line-length */\nexport function filter<T>(this: Observable<T>, predicate: (value: T, index: number) => boolean, thisArg?: any): Observable<T>;\nexport function filter<T, S extends T>(this: Observable<T>, predicate: (value: T, index: number) => value is S, thisArg?: any): Observable<S>;\n/* tslint:disable:max-line-length */\nexport function filter<T>(this: Observable<T>, predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): Observable<T> {\n  return this.lift(new FilterOperator(predicate, thisArg));\n}\n\nclass FilterOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean,\n              private thisArg?: any) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FilterSubscriber<T> extends Subscriber<T> {\n\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean,\n              private thisArg: any) {\n    super(destination);\n    this.predicate = predicate;\n  }\n\n  // the try catch block below is left specifically for\n  // optimization and perf reasons. a tryCatcher is not necessary here.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this.destination.next(value);\n    }\n  }\n}\n","import { not } from '../util/not';\nimport { filter } from './filter';\nimport { Observable } from '../Observable';\n\n/**\n * Splits the source Observable into two, one with values that satisfy a\n * predicate, and another with values that don't satisfy the predicate.\n *\n * <span class=\"informal\">It's like {@link filter}, but returns two Observables:\n * one like the output of {@link filter}, and the other with values that did not\n * pass the condition.</span>\n *\n * <img src=\"./img/partition.png\" width=\"100%\">\n *\n * `partition` outputs an array with two Observables that partition the values\n * from the source Observable through the given `predicate` function. The first\n * Observable in that array emits source values for which the predicate argument\n * returns true. The second Observable emits source values for which the\n * predicate returns false. The first behaves like {@link filter} and the second\n * behaves like {@link filter} with the predicate negated.\n *\n * @example <caption>Partition click events into those on DIV elements and those elsewhere</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var parts = clicks.partition(ev => ev.target.tagName === 'DIV');\n * var clicksOnDivs = parts[0];\n * var clicksElsewhere = parts[1];\n * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));\n * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));\n *\n * @see {@link filter}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted on the first Observable in the returned array, if\n * `false` the value is emitted on the second Observable in the array. The\n * `index` parameter is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {[Observable<T>, Observable<T>]} An array with two Observables: one\n * with values that passed the predicate, and another with values that did not\n * pass the predicate.\n * @method partition\n * @owner Observable\n */\nexport function partition<T>(this: Observable<T>, predicate: (value: T) => boolean, thisArg?: any): [Observable<T>, Observable<T>] {\n  return [\n    filter.call(this, predicate),\n    filter.call(this, not(predicate, thisArg))\n  ];\n}\n","\nimport { Observable } from '../../Observable';\nimport { partition } from '../../operator/partition';\n\nObservable.prototype.partition = partition;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    partition: typeof partition;\n  }\n}","import { Observable } from '../Observable';\nimport { map } from './map';\n\n/**\n * Maps each source value (an object) to its specified nested property.\n *\n * <span class=\"informal\">Like {@link map}, but meant only for picking one of\n * the nested properties of every emitted object.</span>\n *\n * <img src=\"./img/pluck.png\" width=\"100%\">\n *\n * Given a list of strings describing a path to an object property, retrieves\n * the value of a specified nested property from all values in the source\n * Observable. If a property can't be resolved, it will return `undefined` for\n * that value.\n *\n * @example <caption>Map every every click to the tagName of the clicked target element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var tagNames = clicks.pluck('target', 'tagName');\n * tagNames.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {...string} properties The nested properties to pluck from each source\n * value (an object).\n * @return {Observable} Returns a new Observable of property values from the\n * source values.\n * @method pluck\n * @owner Observable\n */\nexport function pluck<T, R>(this: Observable<T>, ...properties: string[]): Observable<R> {\n  const length = properties.length;\n  if (length === 0) {\n    throw new Error('list of properties cannot be empty.');\n  }\n  return map.call(this, plucker(properties, length));\n}\n\nfunction plucker(props: string[], length: number): (x: string) => any {\n  const mapper = (x: string) => {\n    let currentProp = x;\n    for (let i = 0; i < length; i++) {\n      const p = currentProp[props[i]];\n      if (typeof p !== 'undefined') {\n        currentProp = p;\n      } else {\n        return undefined;\n      }\n    }\n    return currentProp;\n  };\n\n  return mapper;\n}\n","\nimport { Observable } from '../../Observable';\nimport { pluck } from '../../operator/pluck';\n\nObservable.prototype.pluck = pluck;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    pluck: typeof pluck;\n  }\n}","import { Subject } from '../Subject';\nimport { Observable } from '../Observable';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\n\n/**\n * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\n * before it begins emitting items to those Observers that have subscribed to it.\n *\n * <img src=\"./img/publish.png\" width=\"100%\">\n *\n * @param {Function} Optional selector function which can use the multicasted source sequence as many times as needed,\n * without causing multiple subscriptions to the source sequence.\n * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\n * @return a ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.\n * @method publish\n * @owner Observable\n */\n/* tslint:disable:max-line-length */\nexport function publish<T>(this: Observable<T>): ConnectableObservable<T>;\nexport function publish<T>(this: Observable<T>, selector: selector<T>): Observable<T>;\n/* tslint:disable:max-line-length */\nexport function publish<T>(this: Observable<T>, selector?: (source: Observable<T>) => Observable<T>): Observable<T> | ConnectableObservable<T> {\n  return selector ? multicast.call(this, () => new Subject<T>(), selector) :\n                    multicast.call(this, new Subject<T>());\n}\n\nexport type selector<T> = (source: Observable<T>) => Observable<T>;\n","\nimport { Observable } from '../../Observable';\nimport { publish } from '../../operator/publish';\n\nObservable.prototype.publish = <any>publish;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publish: typeof publish;\n  }\n}","import { Observable } from '../Observable';\nimport { BehaviorSubject } from '../BehaviorSubject';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\n\n/**\n * @param value\n * @return {ConnectableObservable<T>}\n * @method publishBehavior\n * @owner Observable\n */\nexport function publishBehavior<T>(this: Observable<T>, value: T): ConnectableObservable<T> {\n  return multicast.call(this, new BehaviorSubject<T>(value));\n}\n","\nimport { Observable } from '../../Observable';\nimport { publishBehavior } from '../../operator/publishBehavior';\n\nObservable.prototype.publishBehavior = publishBehavior;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publishBehavior: typeof publishBehavior;\n  }\n}","import { Observable } from '../Observable';\nimport { ReplaySubject } from '../ReplaySubject';\nimport { Scheduler } from '../Scheduler';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\n\n/**\n * @param bufferSize\n * @param windowTime\n * @param scheduler\n * @return {ConnectableObservable<T>}\n * @method publishReplay\n * @owner Observable\n */\nexport function publishReplay<T>(this: Observable<T>, bufferSize: number = Number.POSITIVE_INFINITY,\n                                 windowTime: number = Number.POSITIVE_INFINITY,\n                                 scheduler?: Scheduler): ConnectableObservable<T> {\n  return multicast.call(this, new ReplaySubject<T>(bufferSize, windowTime, scheduler));\n}\n","\nimport { Observable } from '../../Observable';\nimport { publishReplay } from '../../operator/publishReplay';\n\nObservable.prototype.publishReplay = publishReplay;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publishReplay: typeof publishReplay;\n  }\n}","import { Observable } from '../Observable';\nimport { AsyncSubject } from '../AsyncSubject';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\n\n/**\n * @return {ConnectableObservable<T>}\n * @method publishLast\n * @owner Observable\n */\nexport function publishLast<T>(this: Observable<T>): ConnectableObservable<T> {\n  return multicast.call(this, new AsyncSubject<T>());\n}\n","\nimport { Observable } from '../../Observable';\nimport { publishLast } from '../../operator/publishLast';\n\nObservable.prototype.publishLast = publishLast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publishLast: typeof publishLast;\n  }\n}","import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item\n * from the combination of this Observable and supplied Observables\n * @param {...Observables} ...observables sources used to race for which Observable emits first.\n * @return {Observable} an Observable that mirrors the output of the first Observable to emit an item.\n * @method race\n * @owner Observable\n */\n/* tslint:disable:max-line-length */\nexport function race<T>(this: Observable<T>, ...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T>;\nexport function race<T, R>(this: Observable<T>, ...observables: Array<Observable<any> | Array<Observable<T>>>): Observable<R>;\n/* tslint:disable:max-line-length */\nexport function race<T>(this: Observable<T>, ...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T> {\n  // if the only argument is an array, it was most likely called with\n  // `pair([obs1, obs2, ...])`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = <Array<Observable<T>>>observables[0];\n  }\n\n  return this.lift.call(raceStatic<T>(this, ...observables));\n}\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item.\n * @param {...Observables} ...observables sources used to race for which Observable emits first.\n * @return {Observable} an Observable that mirrors the output of the first Observable to emit an item.\n * @static true\n * @name race\n * @owner Observable\n */\nexport function raceStatic<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T>;\nexport function raceStatic<T>(...observables: Array<Observable<any> | Array<Observable<any>>>): Observable<T> {\n  // if the only argument is an array, it was most likely called with\n  // `pair([obs1, obs2, ...])`\n  if (observables.length === 1) {\n    if (isArray(observables[0])) {\n      observables = <Array<Observable<any>>>observables[0];\n    } else {\n      return <Observable<any>>observables[0];\n    }\n  }\n\n  return new ArrayObservable<T>(<any>observables).lift(new RaceOperator<T>());\n}\n\nexport class RaceOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new RaceSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class RaceSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasFirst: boolean = false;\n  private observables: Observable<any>[] = [];\n  private subscriptions: Subscription[] = [];\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(observable: any): void {\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      for (let i = 0; i < len; i++) {\n        let observable = observables[i];\n        let subscription = subscribeToResult(this, observable, observable, i);\n\n        if (this.subscriptions) {\n          this.subscriptions.push(subscription);\n          this.add(subscription);\n        }\n      }\n      this.observables = null;\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    if (!this.hasFirst) {\n      this.hasFirst = true;\n\n      for (let i = 0; i < this.subscriptions.length; i++) {\n        if (i !== outerIndex) {\n          let subscription = this.subscriptions[i];\n\n          subscription.unsubscribe();\n          this.remove(subscription);\n        }\n      }\n\n      this.subscriptions = null;\n    }\n\n    this.destination.next(innerValue);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { race } from '../../operator/race';\n\nObservable.prototype.race = race;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    race: typeof race;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Applies an accumulator function over the source Observable, and returns the\n * accumulated result when the source completes, given an optional seed value.\n *\n * <span class=\"informal\">Combines together all values emitted on the source,\n * using an accumulator function that knows how to join a new source value into\n * the accumulation from the past.</span>\n *\n * <img src=\"./img/reduce.png\" width=\"100%\">\n *\n * Like\n * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),\n * `reduce` applies an `accumulator` function against an accumulation and each\n * value of the source Observable (from the past) to reduce it to a single\n * value, emitted on the output Observable. Note that `reduce` will only emit\n * one value, only when the source Observable completes. It is equivalent to\n * applying operator {@link scan} followed by operator {@link last}.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events that happened in 5 seconds</caption>\n * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')\n *   .takeUntil(Rx.Observable.interval(5000));\n * var ones = clicksInFiveSeconds.mapTo(1);\n * var seed = 0;\n * var count = ones.reduce((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link count}\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link scan}\n *\n * @param {function(acc: R, value: T): R} accumulator The accumulator function\n * called on each source value.\n * @param {R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @return {Observable<R>} An Observable that emits a single value that is the\n * result of accumulating the values emitted by the source Observable.\n * @method reduce\n * @owner Observable\n */\n/* tslint:disable:max-line-length */\nexport function reduce<T>(this: Observable<T>, accumulator: (acc: T, value: T, index: number) => T, seed?: T): Observable<T>;\nexport function reduce<T>(this: Observable<T>, accumulator: (acc: T[], value: T, index: number) => T[], seed?: T[]): Observable<T[]>;\nexport function reduce<T, R>(this: Observable<T>, accumulator: (acc: R, value: T, index: number) => R, seed?: R): Observable<R>;\n/* tslint:disable:max-line-length */\nexport function reduce<T, R>(this: Observable<T>, accumulator: (acc: R, value: T) => R, seed?: R): Observable<R> {\n  return this.lift(new ReduceOperator(accumulator, seed));\n}\n\nexport class ReduceOperator<T, R> implements Operator<T, R> {\n\n  constructor(private accumulator: (acc: R, value: T) => R, private seed?: R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new ReduceSubscriber(subscriber, this.accumulator, this.seed));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ReduceSubscriber<T, R> extends Subscriber<T> {\n\n  acc: T | R;\n  hasSeed: boolean;\n  hasValue: boolean = false;\n\n  constructor(destination: Subscriber<R>,\n              private accumulator: (acc: R, value: T) => R,\n              seed?: R) {\n    super(destination);\n    this.acc = seed;\n    this.accumulator = accumulator;\n    this.hasSeed = typeof seed !== 'undefined';\n  }\n\n  protected _next(value: T) {\n    if (this.hasValue || (this.hasValue = this.hasSeed)) {\n      this._tryReduce(value);\n    } else {\n      this.acc = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryReduce(value: T) {\n    let result: any;\n    try {\n      result = this.accumulator(<R>this.acc, value);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.acc = result;\n  }\n\n  protected _complete() {\n    if (this.hasValue || this.hasSeed) {\n      this.destination.next(this.acc);\n    }\n    this.destination.complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { reduce } from '../../operator/reduce';\n\nObservable.prototype.reduce = reduce;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    reduce: typeof reduce;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times,\n * on a particular Scheduler.\n *\n * <img src=\"./img/repeat.png\" width=\"100%\">\n *\n * @param {Scheduler} [scheduler] the Scheduler to emit the items on.\n * @param {number} [count] the number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} an Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\nexport function repeat<T>(this: Observable<T>, count: number = -1): Observable<T> {\n  if (count === 0) {\n    return new EmptyObservable<T>();\n  } else if (count < 0) {\n    return this.lift(new RepeatOperator(-1, this));\n  } else {\n    return this.lift(new RepeatOperator(count - 1, this));\n  }\n}\n\nclass RepeatOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new RepeatSubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  complete() {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.complete();\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      this.unsubscribe();\n      this.isStopped = false;\n      this.closed = false;\n      source.subscribe(this);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { repeat } from '../../operator/repeat';\n\nObservable.prototype.repeat = repeat;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    repeat: typeof repeat;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that emits the same values as the source observable with the exception of a `complete`.\n * A `complete` will cause the emission of the Throwable that cause the complete to the Observable returned from\n * notificationHandler. If that Observable calls onComplete or `complete` then retry will call `complete` or `error`\n * on the child subscription. Otherwise, this Observable will resubscribe to the source observable, on a particular\n * Scheduler.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {notificationHandler} receives an Observable of notifications with which a user can `complete` or `error`,\n * aborting the retry.\n * @param {scheduler} the Scheduler on which to subscribe to the source Observable.\n * @return {Observable} the source Observable modified with retry logic.\n * @method repeatWhen\n * @owner Observable\n */\nexport function repeatWhen<T>(this: Observable<T>, notifier: (notifications: Observable<any>) => Observable<any>): Observable<T> {\n  return this.lift(new RepeatWhenOperator(notifier, this));\n}\n\nclass RepeatWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (notifications: Observable<any>) => Observable<any>,\n              protected source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private notifications: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (notifications: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  complete() {\n    if (!this.isStopped) {\n\n      let notifications = this.notifications;\n      let retries: any = this.retries;\n      let retriesSubscription = this.retriesSubscription;\n\n      if (!retries) {\n        notifications = new Subject();\n        retries = tryCatch(this.notifier)(notifications);\n        if (retries === errorObject) {\n          return super.complete();\n        }\n        retriesSubscription = subscribeToResult(this, retries);\n      } else {\n        this.notifications = null;\n        this.retriesSubscription = null;\n      }\n\n      this.unsubscribe();\n      this.closed = false;\n\n      this.notifications = notifications;\n      this.retries = retries;\n      this.retriesSubscription = retriesSubscription;\n\n      notifications.next();\n    }\n  }\n\n  protected _unsubscribe() {\n    const { notifications, retriesSubscription } = this;\n    if (notifications) {\n      notifications.unsubscribe();\n      this.notifications = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n\n    const { notifications, retries, retriesSubscription } = this;\n    this.notifications = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n\n    this.unsubscribe();\n    this.isStopped = false;\n    this.closed = false;\n\n    this.notifications = notifications;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n\n    this.source.subscribe(this);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { repeatWhen } from '../../operator/repeatWhen';\n\nObservable.prototype.repeatWhen = repeatWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    repeatWhen: typeof repeatWhen;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Returns an Observable that mirrors the source Observable, resubscribing to it if it calls `error` and the\n * predicate returns true for that specific exception and retry count.\n * If the source Observable calls `error`, this method will resubscribe to the source Observable for a maximum of\n * count resubscriptions (given as a number parameter) rather than propagating the `error` call.\n *\n * <img src=\"./img/retry.png\" width=\"100%\">\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n * @param {number} number of retry attempts before failing.\n * @return {Observable} the source Observable modified with the retry logic.\n * @method retry\n * @owner Observable\n */\nexport function retry<T>(this: Observable<T>, count: number = -1): Observable<T> {\n  return this.lift(new RetryOperator(count, this));\n}\n\nclass RetryOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new RetrySubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetrySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  error(err: any) {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.error(err);\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      this.unsubscribe();\n      this.isStopped = false;\n      this.closed = false;\n      source.subscribe(this);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { retry } from '../../operator/retry';\n\nObservable.prototype.retry = retry;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    retry: typeof retry;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that emits the same values as the source observable with the exception of an `error`.\n * An `error` will cause the emission of the Throwable that cause the error to the Observable returned from\n * notificationHandler. If that Observable calls onComplete or `error` then retry will call `complete` or `error`\n * on the child subscription. Otherwise, this Observable will resubscribe to the source observable, on a particular\n * Scheduler.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {notificationHandler} receives an Observable of notifications with which a user can `complete` or `error`,\n * aborting the retry.\n * @param {scheduler} the Scheduler on which to subscribe to the source Observable.\n * @return {Observable} the source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nexport function retryWhen<T>(this: Observable<T>, notifier: (errors: Observable<any>) => Observable<any>): Observable<T> {\n  return this.lift(new RetryWhenOperator(notifier, this));\n}\n\nclass RetryWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (errors: Observable<any>) => Observable<any>,\n              protected source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetryWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private errors: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (errors: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  error(err: any) {\n    if (!this.isStopped) {\n\n      let errors = this.errors;\n      let retries: any = this.retries;\n      let retriesSubscription = this.retriesSubscription;\n\n      if (!retries) {\n        errors = new Subject();\n        retries = tryCatch(this.notifier)(errors);\n        if (retries === errorObject) {\n          return super.error(errorObject.e);\n        }\n        retriesSubscription = subscribeToResult(this, retries);\n      } else {\n        this.errors = null;\n        this.retriesSubscription = null;\n      }\n\n      this.unsubscribe();\n      this.closed = false;\n\n      this.errors = errors;\n      this.retries = retries;\n      this.retriesSubscription = retriesSubscription;\n\n      errors.next(err);\n    }\n  }\n\n  protected _unsubscribe() {\n    const { errors, retriesSubscription } = this;\n    if (errors) {\n      errors.unsubscribe();\n      this.errors = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n\n    const { errors, retries, retriesSubscription } = this;\n    this.errors = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n\n    this.unsubscribe();\n    this.isStopped = false;\n    this.closed = false;\n\n    this.errors = errors;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n\n    this.source.subscribe(this);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { retryWhen } from '../../operator/retryWhen';\n\nObservable.prototype.retryWhen = retryWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    retryWhen: typeof retryWhen;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nexport function sample<T>(this: Observable<T>, notifier: Observable<any>): Observable<T> {\n  return this.lift(new SampleOperator(notifier));\n}\n\nclass SampleOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new SampleSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n\n  constructor(destination: Subscriber<any>, notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  protected _next(value: T) {\n    this.value = value;\n    this.hasValue = true;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.value);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { sample } from '../../operator/sample';\n\nObservable.prototype.sample = sample;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    sample: typeof sample;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Scheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Emits the most recently emitted value from the source Observable within\n * periodic time intervals.\n *\n * <span class=\"informal\">Samples the source Observable at periodic time\n * intervals, emitting what it samples.</span>\n *\n * <img src=\"./img/sampleTime.png\" width=\"100%\">\n *\n * `sampleTime` periodically looks at the source Observable and emits whichever\n * value it has most recently emitted since the previous sampling, unless the\n * source has not emitted anything since the previous sampling. The sampling\n * happens periodically in time every `period` milliseconds (or the time unit\n * defined by the optional `scheduler` argument). The sampling starts as soon as\n * the output Observable is subscribed.\n *\n * @example <caption>Every second, emit the most recent click at most once</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.sampleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {number} period The sampling period expressed in milliseconds or the\n * time unit determined internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link Scheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable at the specified time interval.\n * @method sampleTime\n * @owner Observable\n */\nexport function sampleTime<T>(this: Observable<T>, period: number, scheduler: Scheduler = async): Observable<T> {\n  return this.lift(new SampleTimeOperator(period, scheduler));\n}\n\nclass SampleTimeOperator<T> implements Operator<T, T> {\n  constructor(private period: number,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleTimeSubscriber<T> extends Subscriber<T> {\n  lastValue: T;\n  hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private period: number,\n              private scheduler: Scheduler) {\n    super(destination);\n    this.add(scheduler.schedule(dispatchNotification, period, { subscriber: this, period }));\n  }\n\n  protected _next(value: T) {\n    this.lastValue = value;\n    this.hasValue = true;\n  }\n\n  notifyNext() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.lastValue);\n    }\n  }\n}\n\nfunction dispatchNotification<T>(state: any) {\n  let { subscriber, period } = state;\n  subscriber.notifyNext();\n  (<any>this).schedule(state, period);\n}\n","\nimport { Observable } from '../../Observable';\nimport { sampleTime } from '../../operator/sampleTime';\n\nObservable.prototype.sampleTime = sampleTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    sampleTime: typeof sampleTime;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\n/* tslint:disable:max-line-length */\nexport function scan<T>(this: Observable<T>, accumulator: (acc: T, value: T, index: number) => T, seed?: T): Observable<T>;\nexport function scan<T>(this: Observable<T>, accumulator: (acc: T[], value: T, index: number) => T[], seed?: T[]): Observable<T[]>;\nexport function scan<T, R>(this: Observable<T>, accumulator: (acc: R, value: T, index: number) => R, seed?: R): Observable<R>;\n/* tslint:disable:max-line-length */\nexport function scan<T, R>(this: Observable<T>, accumulator: (acc: R, value: T, index: number) => R, seed?: T | R): Observable<R> {\n  return this.lift(new ScanOperator(accumulator, seed));\n}\n\nclass ScanOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T, index: number) => R, private seed?: T | R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ScanSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n  private accumulatorSet: boolean = false;\n  private _seed: T | R;\n\n  get seed(): T | R {\n    return this._seed;\n  }\n\n  set seed(value: T | R) {\n    this.accumulatorSet = true;\n    this._seed = value;\n  }\n\n  constructor(destination: Subscriber<R>, private accumulator: (acc: R, value: T, index: number) => R, seed?: T | R) {\n    super(destination);\n    this.seed = seed;\n    this.accumulatorSet = typeof seed !== 'undefined';\n  }\n\n  protected _next(value: T): void {\n    if (!this.accumulatorSet) {\n      this.seed = value;\n      this.destination.next(value);\n    } else {\n      return this._tryNext(value);\n    }\n  }\n\n  private _tryNext(value: T): void {\n    const index = this.index++;\n    let result: any;\n    try {\n      result = this.accumulator(<R>this.seed, value, index);\n    } catch (err) {\n      this.destination.error(err);\n    }\n    this.seed = result;\n    this.destination.next(result);\n  }\n}\n","\nimport { Observable } from '../../Observable';\n\nimport { scan } from '../../operator/scan';\n\nObservable.prototype.scan = scan;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    scan: typeof scan;\n  }\n}","import { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\n/**\n * Compares all values of two observables in sequence using an optional comparor function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * <img src=\"./img/sequenceEqual.png\" width=\"100%\">\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * @example <caption>figure out if the Konami code matches</caption>\n * var code = Observable.from([\n *  \"ArrowUp\",\n *  \"ArrowUp\",\n *  \"ArrowDown\",\n *  \"ArrowDown\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"KeyB\",\n *  \"KeyA\",\n *  \"Enter\" // no start key, clearly.\n * ]);\n *\n * var keys = Rx.Observable.fromEvent(document, 'keyup')\n *  .map(e => e.code);\n * var matches = keys.bufferCount(11, 1)\n *  .mergeMap(\n *    last11 =>\n *      Rx.Observable.from(last11)\n *        .sequenceEqual(code)\n *   );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo the observable sequence to compare the source sequence to.\n * @param {function} [comparor] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence\n * @method sequenceEqual\n * @owner Observable\n */\nexport function sequenceEqual<T>(this: Observable<T>, compareTo: Observable<T>,\n                                 comparor?: (a: T, b: T) => boolean): Observable<boolean> {\n  return this.lift(new SequenceEqualOperator(compareTo, comparor));\n}\n\nexport class SequenceEqualOperator<T> implements Operator<T, boolean> {\n  constructor(private compareTo: Observable<T>,\n              private comparor: (a: T, b: T) => boolean) {\n  }\n\n  call(subscriber: Subscriber<boolean>, source: any): any {\n    return source._subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparor));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SequenceEqualSubscriber<T, R> extends Subscriber<T> {\n  private _a: T[] = [];\n  private _b: T[] = [];\n  private _oneComplete = false;\n\n  constructor(destination: Observer<R>,\n              private compareTo: Observable<T>,\n              private comparor: (a: T, b: T) => boolean) {\n    super(destination);\n    this.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, this)));\n  }\n\n  protected _next(value: T): void {\n    if (this._oneComplete && this._b.length === 0) {\n      this.emit(false);\n    } else {\n      this._a.push(value);\n      this.checkValues();\n    }\n  }\n\n  public _complete(): void {\n    if (this._oneComplete) {\n      this.emit(this._a.length === 0 && this._b.length === 0);\n    } else {\n      this._oneComplete = true;\n    }\n  }\n\n  checkValues() {\n    const { _a, _b, comparor } = this;\n    while (_a.length > 0 && _b.length > 0) {\n      let a = _a.shift();\n      let b = _b.shift();\n      let areEqual = false;\n      if (comparor) {\n        areEqual = tryCatch(comparor)(a, b);\n        if (areEqual === errorObject) {\n          this.destination.error(errorObject.e);\n        }\n      } else {\n        areEqual = a === b;\n      }\n      if (!areEqual) {\n        this.emit(false);\n      }\n    }\n  }\n\n  emit(value: boolean) {\n    const { destination } = this;\n    destination.next(value);\n    destination.complete();\n  }\n\n  nextB(value: T) {\n    if (this._oneComplete && this._a.length === 0) {\n      this.emit(false);\n    } else {\n      this._b.push(value);\n      this.checkValues();\n    }\n  }\n}\n\nclass SequenceEqualCompareToSubscriber<T, R> extends Subscriber<T> {\n  constructor(destination: Observer<R>, private parent: SequenceEqualSubscriber<T, R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.parent.nextB(value);\n  }\n\n  protected _error(err: any): void {\n    this.parent.error(err);\n  }\n\n  protected _complete(): void {\n    this.parent._complete();\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { sequenceEqual } from '../../operator/sequenceEqual';\n\nObservable.prototype.sequenceEqual = sequenceEqual;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    sequenceEqual: typeof sequenceEqual;\n  }\n}","import { Subject } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { ConnectableObservable, connectableObservableDescriptor } from '../observable/ConnectableObservable';\n\n/**\n * Returns an Observable that emits the results of invoking a specified selector on items\n * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.\n *\n * <img src=\"./img/multicast.png\" width=\"100%\">\n *\n * @param {Function|Subject} Factory function to create an intermediate subject through\n * which the source sequence's elements will be multicast to the selector function\n * or Subject to push source elements into.\n * @param {Function} Optional selector function that can use the multicasted source stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the given source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable} an Observable that emits the results of invoking the selector\n * on the items emitted by a `ConnectableObservable` that shares a single subscription to\n * the underlying stream.\n * @method multicast\n * @owner Observable\n */\n/* tslint:disable:max-line-length */\nexport function multicast<T>(this: Observable<T>, subjectOrSubjectFactory: factoryOrValue<Subject<T>>): ConnectableObservable<T>;\nexport function multicast<T>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: selector<T>): Observable<T>;\n/* tslint:disable:max-line-length */\nexport function multicast<T>(this: Observable<T>, subjectOrSubjectFactory: Subject<T> | (() => Subject<T>),\n                             selector?: (source: Observable<T>) => Observable<T>): Observable<T> | ConnectableObservable<T> {\n  let subjectFactory: () => Subject<T>;\n  if (typeof subjectOrSubjectFactory === 'function') {\n    subjectFactory = <() => Subject<T>>subjectOrSubjectFactory;\n  } else {\n    subjectFactory = function subjectFactory() {\n      return <Subject<T>>subjectOrSubjectFactory;\n    };\n  }\n\n  if (typeof selector === 'function') {\n    return this.lift(new MulticastOperator(subjectFactory, selector));\n  }\n\n  const connectable: any = Object.create(this, connectableObservableDescriptor);\n  connectable.source = this;\n  connectable.subjectFactory = subjectFactory;\n\n  return <ConnectableObservable<T>> connectable;\n}\n\nexport type factoryOrValue<T> = T | (() => T);\nexport type selector<T> = (source: Observable<T>) => Observable<T>;\n\nexport class MulticastOperator<T> implements Operator<T, T> {\n  constructor(private subjectFactory: () => Subject<T>,\n              private selector: (source: Observable<T>) => Observable<T>) {\n  }\n  call(subscriber: Subscriber<T>, self: any): any {\n    const { selector } = this;\n    const connectable = new ConnectableObservable(self.source, this.subjectFactory);\n    const subscription = selector(connectable).subscribe(subscriber);\n    subscription.add(connectable.connect());\n    return subscription;\n  }\n}\n","import { Observable } from '../Observable';\nimport { multicast } from './multicast';\nimport { Subject } from '../Subject';\n\nfunction shareSubjectFactory() {\n  return new Subject();\n}\n\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n * This is an alias for .publish().refCount().\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n *\n * @return {Observable<T>} an Observable that upon connection causes the source Observable to emit items to its Observers\n * @method share\n * @owner Observable\n */\nexport function share<T>(this: Observable<T>): Observable<T> {\n  return multicast.call(this, shareSubjectFactory).refCount();\n};\n","\nimport { Observable } from '../../Observable';\nimport { share } from '../../operator/share';\n\nObservable.prototype.share = share;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    share: typeof share;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observer } from '../Observer';\nimport { EmptyError } from '../util/EmptyError';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * such items, notify of an IllegalArgumentException or NoSuchElementException respectively.\n *\n * <img src=\"./img/single.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} a predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} an Observable that emits the single item emitted by the source Observable that matches\n * the predicate.\n .\n * @method single\n * @owner Observable\n */\nexport function single<T>(this: Observable<T>, predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T> {\n  return this.lift(new SingleOperator(predicate, this));\n}\n\nclass SingleOperator<T> implements Operator<T, T> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SingleSubscriber<T> extends Subscriber<T> {\n  private seenValue: boolean = false;\n  private singleValue: T;\n  private index: number = 0;\n\n  constructor(destination: Observer<T>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  private applySingleValue(value: T): void {\n    if (this.seenValue) {\n      this.destination.error('Sequence contains more than one element');\n    } else {\n      this.seenValue = true;\n      this.singleValue = value;\n    }\n  }\n\n  protected _next(value: T): void {\n    const predicate = this.predicate;\n    this.index++;\n    if (predicate) {\n      this.tryNext(value);\n    } else {\n      this.applySingleValue(value);\n    }\n  }\n\n  private tryNext(value: T): void {\n    try {\n      const result = this.predicate(value, this.index, this.source);\n      if (result) {\n        this.applySingleValue(value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n\n    if (this.index > 0) {\n      destination.next(this.seenValue ? this.singleValue : undefined);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { single } from '../../operator/single';\n\nObservable.prototype.single = single;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    single: typeof single;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Returns an Observable that skips `n` items emitted by an Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} the `n` of times, items emitted by source Observable should be skipped.\n * @return {Observable} an Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nexport function skip<T>(this: Observable<T>, total: number): Observable<T> {\n  return this.lift(new SkipOperator(total));\n}\n\nclass SkipOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new SkipSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipSubscriber<T> extends Subscriber<T> {\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (++this.count > this.total) {\n      this.destination.next(x);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { skip } from '../../operator/skip';\n\nObservable.prototype.skip = skip;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skip: typeof skip;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} the second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} an Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nexport function skipUntil<T>(this: Observable<T>, notifier: Observable<any>): Observable<T> {\n  return this.lift(new SkipUntilOperator(notifier));\n}\n\nclass SkipUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new SkipUntilSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private hasValue: boolean = false;\n  private isInnerStopped: boolean = false;\n\n  constructor(destination: Subscriber<any>,\n              notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  protected _next(value: T) {\n    if (this.hasValue) {\n      super._next(value);\n    }\n  }\n\n  protected _complete() {\n    if (this.isInnerStopped) {\n      super._complete();\n    } else {\n      this.unsubscribe();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.hasValue = true;\n  }\n\n  notifyComplete(): void {\n    this.isInnerStopped = true;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { skipUntil } from '../../operator/skipUntil';\n\nObservable.prototype.skipUntil = skipUntil;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skipUntil: typeof skipUntil;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - a function to test each item emitted from the source Observable.\n * @return {Observable<T>} an Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nexport function skipWhile<T>(this: Observable<T>, predicate: (value: T, index: number) => boolean): Observable<T> {\n  return this.lift(new SkipWhileOperator(predicate));\n}\n\nclass SkipWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new SkipWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipWhileSubscriber<T> extends Subscriber<T> {\n  private skipping: boolean = true;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    if (this.skipping) {\n      this.tryCallPredicate(value);\n    }\n\n    if (!this.skipping) {\n      destination.next(value);\n    }\n  }\n\n  private tryCallPredicate(value: T): void {\n    try {\n      const result = this.predicate(value, this.index++);\n      this.skipping = Boolean(result);\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { skipWhile } from '../../operator/skipWhile';\n\nObservable.prototype.skipWhile = skipWhile;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skipWhile: typeof skipWhile;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * <img src=\"./img/mergeAll.png\" width=\"100%\">\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var firstOrder = higherOrder.mergeAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\n * var firstOrder = higherOrder.mergeAll(2);\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nexport function mergeAll<T>(this: Observable<T>, concurrent: number = Number.POSITIVE_INFINITY): T {\n  return <any>this.lift<any>(new MergeAllOperator<T>(concurrent));\n}\n\nexport class MergeAllOperator<T> implements Operator<Observable<T>, T> {\n  constructor(private concurrent: number) {\n  }\n\n  call(observer: Observer<T>, source: any): any {\n    return source._subscribe(new MergeAllSubscriber(observer, this.concurrent));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeAllSubscriber<T> extends OuterSubscriber<Observable<T>, T> {\n  private hasCompleted: boolean = false;\n  private buffer: Observable<T>[] = [];\n  private active: number = 0;\n\n  constructor(destination: Observer<T>, private concurrent: number) {\n    super(destination);\n  }\n\n  protected _next(observable: Observable<T>) {\n    if (this.active < this.concurrent) {\n      this.active++;\n      this.add(subscribeToResult<Observable<T>, T>(this, observable));\n    } else {\n      this.buffer.push(observable);\n    }\n  }\n\n  protected _complete() {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyComplete(innerSub: Subscription) {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { Scheduler } from '../Scheduler';\nimport { isScheduler } from '../util/isScheduler';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { MergeAllOperator } from './mergeAll';\n\n/**\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins this Observable with multiple other Observables by subscribing to them\n * one at a time, starting with the source, and merging their results into the\n * output Observable. Will wait for each Observable to complete before moving\n * on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = timer.concat(sequence);\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = timer1.concat(timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {Observable} other An input Observable to concatenate after the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional Scheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @method concat\n * @owner Observable\n */\n/* tslint:disable:max-line-length */\nexport function concat<T>(this: Observable<T>, scheduler?: Scheduler): Observable<T>;\nexport function concat<T, T2>(this: Observable<T>, v2: ObservableInput<T2>, scheduler?: Scheduler): Observable<T | T2>;\nexport function concat<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: Scheduler): Observable<T | T2 | T3>;\nexport function concat<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4>;\nexport function concat<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function concat<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function concat<T>(this: Observable<T>, ...observables: Array<ObservableInput<T> | Scheduler>): Observable<T>;\nexport function concat<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | Scheduler>): Observable<R>;\n/* tslint:disable:max-line-length */\nexport function concat<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | Scheduler>): Observable<R> {\n  return this.lift.call(concatStatic<T, R>(this, ...observables));\n}\n\n/* tslint:disable:max-line-length */\nexport function concatStatic<T>(v1: ObservableInput<T>, scheduler?: Scheduler): Observable<T>;\nexport function concatStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: Scheduler): Observable<T | T2>;\nexport function concatStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: Scheduler): Observable<T | T2 | T3>;\nexport function concatStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4>;\nexport function concatStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function concatStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function concatStatic<T>(...observables: (ObservableInput<T> | Scheduler)[]): Observable<T>;\nexport function concatStatic<T, R>(...observables: (ObservableInput<any> | Scheduler)[]): Observable<R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins multiple Observables together by subscribing to them one at a time and\n * merging their results into the output Observable. Will wait for each\n * Observable to complete before moving on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = Rx.Observable.concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = Rx.Observable.concat(timer1, timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {Observable} input1 An input Observable to concatenate with others.\n * @param {Observable} input2 An input Observable to concatenate with others.\n * More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional Scheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @static true\n * @name concat\n * @owner Observable\n */\nexport function concatStatic<T, R>(...observables: Array<ObservableInput<any> | Scheduler>): Observable<R> {\n  let scheduler: Scheduler = null;\n  let args = <any[]>observables;\n  if (isScheduler(args[observables.length - 1])) {\n    scheduler = args.pop();\n  }\n\n  if (scheduler === null && observables.length === 1) {\n    return <Observable<R>>observables[0];\n  }\n\n  return new ArrayObservable(observables, scheduler).lift(new MergeAllOperator<R>(1));\n}\n","import { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { ScalarObservable } from '../observable/ScalarObservable';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { concatStatic } from './concat';\nimport { isScheduler } from '../util/isScheduler';\n\n/**\n * Returns an Observable that emits the items in a specified Iterable before it begins to emit items emitted by the\n * source Observable.\n *\n * <img src=\"./img/startWith.png\" width=\"100%\">\n *\n * @param {Values} an Iterable that contains the items you want the modified Observable to emit first.\n * @return {Observable} an Observable that emits the items in the specified Iterable and then emits the items\n * emitted by the source Observable.\n * @method startWith\n * @owner Observable\n */\n/* tslint:disable:max-line-length */\nexport function startWith<T>(this: Observable<T>, v1: T, scheduler?: Scheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, scheduler?: Scheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, v3: T, scheduler?: Scheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, v3: T, v4: T, scheduler?: Scheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, v3: T, v4: T, v5: T, scheduler?: Scheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, v3: T, v4: T, v5: T, v6: T, scheduler?: Scheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, ...array: Array<T | Scheduler>): Observable<T>;\n/* tslint:disable:max-line-length */\nexport function startWith<T>(this: Observable<T>, ...array: Array<T | Scheduler>): Observable<T> {\n  let scheduler = <Scheduler>array[array.length - 1];\n  if (isScheduler(scheduler)) {\n    array.pop();\n  } else {\n    scheduler = null;\n  }\n\n  const len = array.length;\n  if (len === 1) {\n    return concatStatic(new ScalarObservable<T>(<T>array[0], scheduler), <Observable<T>>this);\n  } else if (len > 1) {\n    return concatStatic(new ArrayObservable<T>(<T[]>array, scheduler), <Observable<T>>this);\n  } else {\n    return concatStatic(new EmptyObservable<T>(scheduler), <Observable<T>>this);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { startWith } from '../../operator/startWith';\n\nObservable.prototype.startWith = startWith;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    startWith: typeof startWith;\n  }\n}","import { isArray } from '../util/isArray';\n\nexport function isNumeric(val: any): val is number {\n  // parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n  // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n  // subtraction forces infinities to NaN\n  // adding 1 corrects loss of precision from parseFloat (#15100)\n  return !isArray(val) && (val - parseFloat(val) + 1) >= 0;\n};\n","import { Scheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { asap } from '../scheduler/asap';\nimport { isNumeric } from '../util/isNumeric';\n\nexport interface DispatchArg<T> {\n  source: Observable<T>;\n  subscriber: Subscriber<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class SubscribeOnObservable<T> extends Observable<T> {\n  static create<T>(source: Observable<T>, delay: number = 0, scheduler: Scheduler = asap): Observable<T> {\n    return new SubscribeOnObservable(source, delay, scheduler);\n  }\n\n  static dispatch<T>(arg: DispatchArg<T>): Subscription {\n    const { source, subscriber } = arg;\n    return source.subscribe(subscriber);\n  }\n\n  constructor(public source: Observable<T>,\n              private delayTime: number = 0,\n              private scheduler: Scheduler = asap) {\n    super();\n    if (!isNumeric(delayTime) || delayTime < 0) {\n      this.delayTime = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n      this.scheduler = asap;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const delay = this.delayTime;\n    const source = this.source;\n    const scheduler = this.scheduler;\n\n    return scheduler.schedule(SubscribeOnObservable.dispatch, delay, {\n      source, subscriber\n    });\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { SubscribeOnObservable } from '../observable/SubscribeOnObservable';\n\n/**\n * Asynchronously subscribes Observers to this Observable on the specified Scheduler.\n *\n * <img src=\"./img/subscribeOn.png\" width=\"100%\">\n *\n * @param {Scheduler} the Scheduler to perform subscription actions on.\n * @return {Observable<T>} the source Observable modified so that its subscriptions happen on the specified Scheduler\n .\n * @method subscribeOn\n * @owner Observable\n */\nexport function subscribeOn<T>(this: Observable<T>, scheduler: Scheduler, delay: number = 0): Observable<T> {\n  return new SubscribeOnObservable<T>(this, delay, scheduler);\n}\n","\nimport { Observable } from '../../Observable';\nimport { subscribeOn } from '../../operator/subscribeOn';\n\nObservable.prototype.subscribeOn = subscribeOn;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    subscribeOn: typeof subscribeOn;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * subscribing to only the most recently emitted of those inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * previous inner Observable once a new one appears.</span>\n *\n * <img src=\"./img/switch.png\" width=\"100%\">\n *\n * `switch` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable subscribes to the inner Observable and\n * begins emitting the items emitted by that. So far, it behaves\n * like {@link mergeAll}. However, when a new inner Observable is emitted,\n * `switch` unsubscribes from the earlier-emitted inner Observable and\n * subscribes to the new inner Observable and begins emitting items from it. It\n * continues to behave like this for subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * // Each click event is mapped to an Observable that ticks every second\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var switched = higherOrder.switch();\n * // The outcome is that `switched` is essentially a timer that restarts\n * // on every click. The interval Observables from older clicks do not merge\n * // with the current interval Observable.\n * switched.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switchMap}\n * @see {@link switchMapTo}\n * @see {@link zipAll}\n *\n * @return {Observable<T>} An Observable that emits the items emitted by the\n * Observable most recently emitted by the source Observable.\n * @method switch\n * @name switch\n * @owner Observable\n */\nexport function _switch<T>(this: Observable<T>): T {\n  return <any>this.lift<any>(new SwitchOperator());\n}\n\nclass SwitchOperator<T, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new SwitchSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private active: number = 0;\n  private hasCompleted: boolean = false;\n  innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.unsubscribeInner();\n    this.active++;\n    this.add(this.innerSubscription = subscribeToResult(this, value));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  private unsubscribeInner(): void {\n    this.active = this.active > 0 ? this.active - 1 : 0;\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n      this.remove(innerSubscription);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(): void {\n    this.unsubscribeInner();\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { _switch } from '../../operator/switch';\n\nObservable.prototype.switch = _switch;\nObservable.prototype._switch = _switch;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    switch: typeof _switch;\n    _switch: typeof _switch;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): Observable} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\n/* tslint:disable:max-line-length */\nexport function switchMap<T, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<R>): Observable<R>;\nexport function switchMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:disable:max-line-length */\nexport function switchMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>,\n                                   resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<I | R> {\n  return this.lift(new SwitchMapOperator(project, resultSelector));\n}\n\nclass SwitchMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<I>, source: any): any {\n    return source._subscribe(new SwitchMapSubscriber(subscriber, this.project, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (error) {\n      this.destination.error(error);\n      return;\n    }\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(result: ObservableInput<I>, value: T, index: number) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n  }\n\n  protected _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._tryNotifyNext(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _tryNotifyNext(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): void {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { switchMap } from '../../operator/switchMap';\n\nObservable.prototype.switchMap = switchMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    switchMap: typeof switchMap;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Projects each source value to the same Observable which is flattened multiple\n * times with {@link switch} in the output Observable.\n *\n * <span class=\"informal\">It's like {@link switchMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/switchMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. The output Observables\n * emits values only from the most recently emitted instance of\n * `innerObservable`.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link switch}\n * @see {@link switchMap}\n * @see {@link mergeMapTo}\n *\n * @param {Observable} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` every time a value is emitted on the source Observable.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable, and taking only the values\n * from the most recently projected inner Observable.\n * @method switchMapTo\n * @owner Observable\n */\n/* tslint:disable:max-line-length */\nexport function switchMapTo<T, R>(this: Observable<T>, observable: ObservableInput<R>): Observable<R>;\nexport function switchMapTo<T, I, R>(this: Observable<T>, observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:disable:max-line-length */\nexport function switchMapTo<T, I, R>(this: Observable<T>, innerObservable: Observable<I>,\n                                     resultSelector?: (outerValue: T,\n                                                       innerValue: I,\n                                                       outerIndex: number,\n                                                       innerIndex: number) => R): Observable<I | R> {\n  return this.lift(new SwitchMapToOperator(innerObservable, resultSelector));\n}\n\nclass SwitchMapToOperator<T, I, R> implements Operator<T, I> {\n  constructor(private observable: Observable<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<I>, source: any): any {\n    return source._subscribe(new SwitchMapToSubscriber(subscriber, this.observable, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapToSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<I>,\n              private inner: Observable<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: any) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, this.inner, value, this.index++));\n  }\n\n  protected _complete() {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n  }\n\n  protected _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription) {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.tryResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private tryResultSelector(outerValue: T, innerValue: I,\n                            outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    let result: R;\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    destination.next(result);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { switchMapTo } from '../../operator/switchMapTo';\n\nObservable.prototype.switchMapTo = switchMapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    switchMapTo: typeof switchMapTo;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nexport function take<T>(this: Observable<T>, count: number): Observable<T> {\n  if (count === 0) {\n    return new EmptyObservable<T>();\n  } else {\n    return this.lift(new TakeOperator(count));\n  }\n}\n\nclass TakeOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new TakeSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const total = this.total;\n    const count = ++this.count;\n    if (count <= total) {\n      this.destination.next(value);\n      if (count === total) {\n        this.destination.complete();\n        this.unsubscribe();\n      }\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { take } from '../../operator/take';\n\nObservable.prototype.take = take;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    take: typeof take;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.takeLast(3);\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nexport function takeLast<T>(this: Observable<T>, count: number): Observable<T> {\n  if (count === 0) {\n    return new EmptyObservable<T>();\n  } else {\n    return this.lift(new TakeLastOperator(count));\n  }\n}\n\nclass TakeLastOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new TakeLastSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeLastSubscriber<T> extends Subscriber<T> {\n  private ring: Array<T> = new Array();\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const ring = this.ring;\n    const total = this.total;\n    const count = this.count++;\n\n    if (ring.length < total) {\n      ring.push(value);\n    } else {\n      const index = count % total;\n      ring[index] = value;\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    let count = this.count;\n\n    if (count > 0) {\n      const total = this.count >= this.total ? this.total : this.count;\n      const ring  = this.ring;\n\n      for (let i = 0; i < total; i++) {\n        const idx = (count++) % total;\n        destination.next(ring[idx]);\n      }\n    }\n\n    destination.complete();\n  }\n}\n","import { Observable } from '../../Observable';\nimport { takeLast } from '../../operator/takeLast';\n\nObservable.prototype.takeLast = takeLast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    takeLast: typeof takeLast;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits something. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value or a complete notification, the output Observable stops\n * mirroring the source Observable and completes.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nexport function takeUntil<T>(this: Observable<T>, notifier: Observable<any>): Observable<T> {\n  return this.lift(new TakeUntilOperator(notifier));\n}\n\nclass TakeUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new TakeUntilSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  constructor(destination: Subscriber<any>,\n              private notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.complete();\n  }\n\n  notifyComplete(): void {\n    // noop\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { takeUntil } from '../../operator/takeUntil';\n\nObservable.prototype.takeUntil = takeUntil;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    takeUntil: typeof takeUntil;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * <img src=\"./img/takeWhile.png\" width=\"100%\">\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * @example <caption>Emit click events only while the clientX property is greater than 200</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.takeWhile(ev => ev.clientX > 200);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable so long as each value satisfies the condition defined by the\n * `predicate`, then completes.\n * @method takeWhile\n * @owner Observable\n */\nexport function takeWhile<T>(this: Observable<T>, predicate: (value: T, index: number) => boolean): Observable<T> {\n  return this.lift(new TakeWhileOperator(predicate));\n}\n\nclass TakeWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new TakeWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeWhileSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    let result: boolean;\n    try {\n      result = this.predicate(value, this.index++);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this.nextOrComplete(value, result);\n  }\n\n  private nextOrComplete(value: T, predicateResult: boolean): void {\n    const destination = this.destination;\n    if (Boolean(predicateResult)) {\n      destination.next(value);\n    } else {\n      destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { takeWhile } from '../../operator/takeWhile';\n\nObservable.prototype.takeWhile = takeWhile;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    takeWhile: typeof takeWhile;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/throttle.png\" width=\"100%\">\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): Observable|Promise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\nexport function throttle<T>(this: Observable<T>, durationSelector: (value: T) => SubscribableOrPromise<number>): Observable<T> {\n  return this.lift(new ThrottleOperator(durationSelector));\n}\n\nclass ThrottleOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new ThrottleSubscriber(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private throttled: Subscription;\n\n  constructor(protected destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.throttled) {\n      this.tryDurationSelector(value);\n    }\n  }\n\n  private tryDurationSelector(value: T): void {\n    let duration: SubscribableOrPromise<number> = null;\n    try {\n      duration = this.durationSelector(value);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.emitAndThrottle(value, duration);\n  }\n\n  private emitAndThrottle(value: T, duration: SubscribableOrPromise<number>) {\n    this.add(this.throttled = subscribeToResult(this, duration));\n    this.destination.next(value);\n  }\n\n  protected _unsubscribe() {\n    const throttled = this.throttled;\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this._unsubscribe();\n  }\n\n  notifyComplete(): void {\n    this._unsubscribe();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { throttle } from '../../operator/throttle';\n\nObservable.prototype.throttle = throttle;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    throttle: typeof throttle;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Scheduler } from '../Scheduler';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link Scheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link Scheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nexport function throttleTime<T>(this: Observable<T>, duration: number, scheduler: Scheduler = async): Observable<T> {\n  return this.lift(new ThrottleTimeOperator(duration, scheduler));\n}\n\nclass ThrottleTimeOperator<T> implements Operator<T, T> {\n  constructor(private duration: number,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleTimeSubscriber<T> extends Subscriber<T> {\n  private throttled: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private duration: number,\n              private scheduler: Scheduler) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    if (!this.throttled) {\n      this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, { subscriber: this }));\n      this.destination.next(value);\n    }\n  }\n\n  clearThrottle() {\n    const throttled = this.throttled;\n    if (throttled) {\n      throttled.unsubscribe();\n      this.remove(throttled);\n      this.throttled = null;\n    }\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: ThrottleTimeSubscriber<T>;\n}\n\nfunction dispatchNext<T>(arg: DispatchArg<T>) {\n  const { subscriber } = arg;\n  subscriber.clearThrottle();\n}\n","\nimport { Observable } from '../../Observable';\nimport { throttleTime } from '../../operator/throttleTime';\n\nObservable.prototype.throttleTime = throttleTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    throttleTime: typeof throttleTime;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { timeInterval } from '../../operator/timeInterval';\n\nObservable.prototype.timeInterval = timeInterval;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    timeInterval: typeof timeInterval;\n  }\n}","import { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { TimeoutError } from '../util/TimeoutError';\n\n/**\n * @param due\n * @param errorToSend\n * @param scheduler\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method timeout\n * @owner Observable\n */\nexport function timeout<T>(this: Observable<T>, due: number | Date,\n                           errorToSend: any = null,\n                           scheduler: Scheduler = async): Observable<T> {\n  let absoluteTimeout = isDate(due);\n  let waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(<number>due);\n  return this.lift(new TimeoutOperator(waitFor, absoluteTimeout, errorToSend, scheduler));\n}\n\nclass TimeoutOperator<T> implements Operator<T, T> {\n  constructor(private waitFor: number,\n              private absoluteTimeout: boolean,\n              private errorToSend: any,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new TimeoutSubscriber<T>(\n      subscriber, this.absoluteTimeout, this.waitFor, this.errorToSend, this.scheduler\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeoutSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n  private _previousIndex: number = 0;\n  get previousIndex(): number {\n    return this._previousIndex;\n  }\n  private _hasCompleted: boolean = false;\n  get hasCompleted(): boolean {\n    return this._hasCompleted;\n  }\n\n  constructor(destination: Subscriber<T>,\n              private absoluteTimeout: boolean,\n              private waitFor: number,\n              private errorToSend: any,\n              private scheduler: Scheduler) {\n    super(destination);\n    this.scheduleTimeout();\n  }\n\n  private static dispatchTimeout(state: any): void {\n    const source = state.subscriber;\n    const currentIndex = state.index;\n    if (!source.hasCompleted && source.previousIndex === currentIndex) {\n      source.notifyTimeout();\n    }\n  }\n\n  private scheduleTimeout(): void {\n    let currentIndex = this.index;\n    this.scheduler.schedule(TimeoutSubscriber.dispatchTimeout, this.waitFor, { subscriber: this, index: currentIndex });\n    this.index++;\n    this._previousIndex = currentIndex;\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n  }\n\n  protected _error(err: any): void {\n    this.destination.error(err);\n    this._hasCompleted = true;\n  }\n\n  protected _complete(): void {\n    this.destination.complete();\n    this._hasCompleted = true;\n  }\n\n  notifyTimeout(): void {\n    this.error(this.errorToSend || new TimeoutError());\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { timeout } from '../../operator/timeout';\n\nObservable.prototype.timeout = timeout;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    timeout: typeof timeout;\n  }\n}","export function isDate(value: any): value is Date {\n  return value instanceof Date && !isNaN(+value);\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Scheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { Observable, ObservableInput } from '../Observable';\nimport { isDate } from '../util/isDate';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * @param due\n * @param withObservable\n * @param scheduler\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method timeoutWith\n * @owner Observable\n */\n/* tslint:disable:max-line-length */\nexport function timeoutWith<T>(this: Observable<T>, due: number | Date, withObservable: ObservableInput<T>, scheduler?: Scheduler): Observable<T>;\nexport function timeoutWith<T, R>(this: Observable<T>, due: number | Date, withObservable: ObservableInput<R>, scheduler?: Scheduler): Observable<T | R>;\n/* tslint:disable:max-line-length */\nexport function timeoutWith<T, R>(this: Observable<T>, due: number | Date,\n                                  withObservable: ObservableInput<R>,\n                                  scheduler: Scheduler = async): Observable<T | R> {\n  let absoluteTimeout = isDate(due);\n  let waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(<number>due);\n  return this.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));\n}\n\nclass TimeoutWithOperator<T> implements Operator<T, T> {\n  constructor(private waitFor: number,\n              private absoluteTimeout: boolean,\n              private withObservable: ObservableInput<any>,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new TimeoutWithSubscriber(\n      subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeoutWithSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private timeoutSubscription: Subscription = undefined;\n  private index: number = 0;\n  private _previousIndex: number = 0;\n  get previousIndex(): number {\n    return this._previousIndex;\n  }\n  private _hasCompleted: boolean = false;\n  get hasCompleted(): boolean {\n    return this._hasCompleted;\n  }\n\n  constructor(public destination: Subscriber<T>,\n              private absoluteTimeout: boolean,\n              private waitFor: number,\n              private withObservable: ObservableInput<any>,\n              private scheduler: Scheduler) {\n    super();\n    destination.add(this);\n    this.scheduleTimeout();\n  }\n\n  private static dispatchTimeout(state: any): void {\n    const source = state.subscriber;\n    const currentIndex = state.index;\n    if (!source.hasCompleted && source.previousIndex === currentIndex) {\n      source.handleTimeout();\n    }\n  }\n\n  private scheduleTimeout(): void {\n    let currentIndex = this.index;\n    const timeoutState = { subscriber: this, index: currentIndex };\n    this.scheduler.schedule(TimeoutWithSubscriber.dispatchTimeout, this.waitFor, timeoutState);\n    this.index++;\n    this._previousIndex = currentIndex;\n  }\n\n  protected _next(value: T) {\n    this.destination.next(value);\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n  }\n\n  protected _error(err: any) {\n    this.destination.error(err);\n    this._hasCompleted = true;\n  }\n\n  protected _complete() {\n    this.destination.complete();\n    this._hasCompleted = true;\n  }\n\n  handleTimeout(): void {\n    if (!this.closed) {\n      const withObservable = this.withObservable;\n      this.unsubscribe();\n      this.destination.add(this.timeoutSubscription = subscribeToResult(this, withObservable));\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { timeoutWith } from '../../operator/timeoutWith';\n\nObservable.prototype.timeoutWith = timeoutWith;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    timeoutWith: typeof timeoutWith;\n  }\n}","import { Observable } from '../../Observable';\r\nimport { timestamp } from '../../operator/timestamp';\r\n\r\nObservable.prototype.timestamp = timestamp;\r\n\r\ndeclare module '../../Observable' {\r\n  interface Observable<T> {\r\n    timestamp: typeof timestamp;\r\n  }\r\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\n/**\n * @return {Observable<any[]>|WebSocketSubject<T>|Observable<T>}\n * @method toArray\n * @owner Observable\n */\nexport function toArray<T>(this: Observable<T>): Observable<T[]> {\n  return this.lift(new ToArrayOperator());\n}\n\nclass ToArrayOperator<T> implements Operator<T, T[]> {\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source._subscribe(new ToArraySubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ToArraySubscriber<T> extends Subscriber<T> {\n\n  private array: T[] = [];\n\n  constructor(destination: Subscriber<T[]>) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    this.array.push(x);\n  }\n\n  protected _complete() {\n    this.destination.next(this.array);\n    this.destination.complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { toArray } from '../../operator/toArray';\n\nObservable.prototype.toArray = toArray;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    toArray: typeof toArray;\n  }\n}","import { Observable } from '../Observable';\nimport { root } from '../util/root';\n\n/**\n * @param PromiseCtor\n * @return {Promise<T>}\n * @method toPromise\n * @owner Observable\n */\n/* tslint:disable:max-line-length */\nexport function toPromise<T>(this: Observable<T>): Promise<T>;\nexport function toPromise<T>(this: Observable<T>, PromiseCtor: typeof Promise): Promise<T>;\n/* tslint:disable:max-line-length */\nexport function toPromise<T>(this: Observable<T>, PromiseCtor?: typeof Promise): Promise<T> {\n  if (!PromiseCtor) {\n    if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n      PromiseCtor = root.Rx.config.Promise;\n    } else if (root.Promise) {\n      PromiseCtor = root.Promise;\n    }\n  }\n\n  if (!PromiseCtor) {\n    throw new Error('no Promise impl found');\n  }\n\n  return new PromiseCtor((resolve, reject) => {\n    let value: any;\n    this.subscribe((x: T) => value = x, (err: any) => reject(err), () => resolve(value));\n  });\n}\n","\nimport { Observable } from '../../Observable';\nimport { toPromise } from '../../operator/toPromise';\n\nObservable.prototype.toPromise = toPromise;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    toPromise: typeof toPromise;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * <img src=\"./img/window.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var result = clicks.window(interval)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\nexport function window<T>(this: Observable<T>, windowBoundaries: Observable<any>): Observable<Observable<T>> {\n  return this.lift(new WindowOperator<T>(windowBoundaries));\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowBoundaries: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    const windowSubscriber = new WindowSubscriber(subscriber);\n    const sourceSubscription = source._subscribe(windowSubscriber);\n    if (!sourceSubscription.closed) {\n      windowSubscriber.add(subscribeToResult(windowSubscriber, this.windowBoundaries));\n    }\n    return sourceSubscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n\n  private window: Subject<T> = new Subject<T>();\n\n  constructor(destination: Subscriber<Observable<T>>) {\n    super(destination);\n    destination.next(this.window);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this._complete();\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n  }\n\n  protected _unsubscribe() {\n    this.window = null;\n  }\n\n  private openWindow(): void  {\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n    const destination = this.destination;\n    const newWindow = this.window = new Subject<T>();\n    destination.next(newWindow);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { window } from '../../operator/window';\n\nObservable.prototype.window = window;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    window: typeof window;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\n\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowCount.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(3)\n *   .map(win => win.skip(1)) // skip first of every 3 clicks\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(2, 3)\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n * are Observable of values.\n * @method windowCount\n * @owner Observable\n */\nexport function windowCount<T>(this: Observable<T>, windowSize: number,\n                               startWindowEvery: number = 0): Observable<Observable<T>> {\n  return this.lift(new WindowCountOperator<T>(windowSize, startWindowEvery));\n}\n\nclass WindowCountOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowSize: number,\n              private startWindowEvery: number) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source._subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowCountSubscriber<T> extends Subscriber<T> {\n  private windows: Subject<T>[] = [ new Subject<T>() ];\n  private count: number = 0;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowSize: number,\n              private startWindowEvery: number) {\n    super(destination);\n    destination.next(this.windows[0]);\n  }\n\n  protected _next(value: T) {\n    const startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;\n    const destination = this.destination;\n    const windowSize = this.windowSize;\n    const windows = this.windows;\n    const len = windows.length;\n\n    for (let i = 0; i < len && !this.closed; i++) {\n      windows[i].next(value);\n    }\n    const c = this.count - windowSize + 1;\n    if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {\n      windows.shift().complete();\n    }\n    if (++this.count % startWindowEvery === 0 && !this.closed) {\n      const window = new Subject<T>();\n      windows.push(window);\n      destination.next(window);\n    }\n  }\n\n  protected _error(err: any) {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().error(err);\n      }\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  protected _unsubscribe() {\n    this.count = 0;\n    this.windows = null;\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowCount } from '../../operator/windowCount';\n\nObservable.prototype.windowCount = windowCount;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowCount: typeof windowCount;\n  }\n}","import { Scheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Subject } from '../Subject';\nimport { Operator } from '../Operator';\nimport { async } from '../scheduler/async';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\n\n/**\n * Branch out the source Observable values as a nested Observable periodically\n * in time.\n *\n * <span class=\"informal\">It's like {@link bufferTime}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowTime.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable starts a new window periodically, as\n * determined by the `windowCreationInterval` argument. It emits each window\n * after a fixed timespan, specified by the `windowTimeSpan` argument. When the\n * source Observable completes or encounters an error, the output Observable\n * emits the current window and propagates the notification from the source\n * Observable. If `windowCreationInterval` is not provided, the output\n * Observable starts a new window when the previous window of duration\n * `windowTimeSpan` completes.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds start a window 1 second long, and emit at most 2 click events per window</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferTime}\n *\n * @param {number} windowTimeSpan The amount of time to fill each window.\n * @param {number} [windowCreationInterval] The interval at which to start new\n * windows.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine window boundaries.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowTime\n * @owner Observable\n */\nexport function windowTime<T>(this: Observable<T>, windowTimeSpan: number,\n                              windowCreationInterval: number = null,\n                              scheduler: Scheduler = async): Observable<Observable<T>> {\n  return this.lift(new WindowTimeOperator<T>(windowTimeSpan, windowCreationInterval, scheduler));\n}\n\nclass WindowTimeOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowTimeSpan: number,\n              private windowCreationInterval: number,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source._subscribe(new WindowTimeSubscriber(\n      subscriber, this.windowTimeSpan, this.windowCreationInterval, this.scheduler\n    ));\n  }\n}\n\ninterface CreationState<T> {\n  windowTimeSpan: number;\n  windowCreationInterval: number;\n  subscriber: WindowTimeSubscriber<T>;\n  scheduler: Scheduler;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowTimeSubscriber<T> extends Subscriber<T> {\n  private windows: Subject<T>[] = [];\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowTimeSpan: number,\n              private windowCreationInterval: number,\n              private scheduler: Scheduler) {\n    super(destination);\n    if (windowCreationInterval !== null && windowCreationInterval >= 0) {\n      let window = this.openWindow();\n      const closeState = { subscriber: this, window, context: <any>null };\n      const creationState: CreationState<T> = { windowTimeSpan, windowCreationInterval, subscriber: this, scheduler };\n      this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));\n      this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));\n    } else {\n      let window = this.openWindow();\n      const timeSpanOnlyState = { subscriber: this, window, windowTimeSpan };\n      this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  protected _next(value: T) {\n    const windows = this.windows;\n    const len = windows.length;\n    for (let i = 0; i < len; i++) {\n      const window = windows[i];\n      if (!window.closed) {\n        window.next(value);\n      }\n    }\n  }\n\n  protected _error(err: any) {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      windows.shift().error(err);\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      const window = windows.shift();\n      if (!window.closed) {\n        window.complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  openWindow(): Subject<T> {\n    const window = new Subject<T>();\n    this.windows.push(window);\n    const destination = this.destination;\n    destination.next(window);\n    return window;\n  }\n\n  closeWindow(window: Subject<T>) {\n    window.complete();\n    const windows = this.windows;\n    windows.splice(windows.indexOf(window), 1);\n  }\n}\n\ninterface TimeSpanOnlyState<T> {\n  window: Subject<any>;\n  windowTimeSpan: number;\n  subscriber: WindowTimeSubscriber<T>;\n}\n\nfunction dispatchWindowTimeSpanOnly<T>(state: TimeSpanOnlyState<T>) {\n  const { subscriber, windowTimeSpan, window } = state;\n  if (window) {\n    window.complete();\n  }\n  state.window = subscriber.openWindow();\n  (<any>this).schedule(state, windowTimeSpan);\n}\n\ninterface Context<T> {\n  action: Action<CreationState<T>>;\n  subscription: Subscription;\n}\n\ninterface DispatchArg<T> {\n  subscriber: WindowTimeSubscriber<T>;\n  window: Subject<T>;\n  context: Context<T>;\n}\n\nfunction dispatchWindowCreation<T>(state: CreationState<T>) {\n  let { windowTimeSpan, subscriber, scheduler, windowCreationInterval } = state;\n  let window = subscriber.openWindow();\n  let action = <Action<CreationState<T>>>this;\n  let context: Context<T> = { action, subscription: <any>null };\n  const timeSpanState: DispatchArg<T> = { subscriber, window, context };\n  context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);\n  action.add(context.subscription);\n  action.schedule(state, windowCreationInterval);\n}\n\nfunction dispatchWindowClose<T>(arg: DispatchArg<T>) {\n  const { subscriber, window, context } = arg;\n  if (context && context.action && context.subscription) {\n    context.action.remove(context.subscription);\n  }\n  subscriber.closeWindow(window);\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowTime } from '../../operator/windowTime';\n\nObservable.prototype.windowTime = windowTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowTime: typeof windowTime;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\n\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowToggle.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var result = clicks.windowToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * ).mergeAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\nexport function windowToggle<T, O>(this: Observable<T>, openings: Observable<O>,\n                                   closingSelector: (openValue: O) => Observable<any>): Observable<Observable<T>> {\n  return this.lift(new WindowToggleOperator<T, O>(openings, closingSelector));\n}\n\nclass WindowToggleOperator<T, O> implements Operator<T, Observable<T>> {\n\n  constructor(private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source._subscribe(new WindowToggleSubscriber(\n      subscriber, this.openings, this.closingSelector\n    ));\n  }\n}\n\ninterface WindowContext<T> {\n  window: Subject<T>;\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowToggleSubscriber<T, O> extends OuterSubscriber<T, any> {\n  private contexts: WindowContext<T>[] = [];\n  private openSubscription: Subscription;\n\n  constructor(destination: Subscriber<Observable<T>>,\n              private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n    super(destination);\n    this.add(this.openSubscription = subscribeToResult(this, openings, openings));\n  }\n\n  protected _next(value: T) {\n    const { contexts } = this;\n    if (contexts) {\n      const len = contexts.length;\n      for (let i = 0; i < len; i++) {\n        contexts[i].window.next(value);\n      }\n    }\n  }\n\n  protected _error(err: any) {\n\n    const { contexts } = this;\n    this.contexts = null;\n\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.error(err);\n        context.subscription.unsubscribe();\n      }\n    }\n\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.complete();\n        context.subscription.unsubscribe();\n      }\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.unsubscribe();\n        context.subscription.unsubscribe();\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n\n    if (outerValue === this.openings) {\n\n      const { closingSelector } = this;\n      const closingNotifier = tryCatch(closingSelector)(innerValue);\n\n      if (closingNotifier === errorObject) {\n        return this.error(errorObject.e);\n      } else {\n        const window = new Subject<T>();\n        const subscription = new Subscription();\n        const context = { window, subscription };\n        this.contexts.push(context);\n        const innerSubscription = subscribeToResult(this, closingNotifier, context);\n\n        if (innerSubscription.closed) {\n          this.closeWindow(this.contexts.length - 1);\n        } else {\n          (<any> innerSubscription).context = context;\n          subscription.add(innerSubscription);\n        }\n\n        this.destination.next(window);\n\n      }\n    } else {\n      this.closeWindow(this.contexts.indexOf(outerValue));\n    }\n  }\n\n  notifyError(err: any): void {\n    this.error(err);\n  }\n\n  notifyComplete(inner: Subscription): void {\n    if (inner !== this.openSubscription) {\n      this.closeWindow(this.contexts.indexOf((<any> inner).context));\n    }\n  }\n\n  private closeWindow(index: number): void {\n    if (index === -1) {\n      return;\n    }\n\n    const { contexts } = this;\n    const context = contexts[index];\n    const { window, subscription } = context;\n    contexts.splice(index, 1);\n    window.complete();\n    subscription.unsubscribe();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowToggle } from '../../operator/windowToggle';\n\nObservable.prototype.windowToggle = windowToggle;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowToggle: typeof windowToggle;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\n\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowWhen.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks\n *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowWhen\n * @owner Observable\n */\nexport function windowWhen<T>(this: Observable<T>, closingSelector: () => Observable<any>): Observable<Observable<T>> {\n  return this.lift(new WindowOperator<T>(closingSelector));\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source._subscribe(new WindowSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n  private window: Subject<T>;\n  private closingNotification: Subscription;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openWindow();\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n    this.unsubscribeClosingNotification();\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n    this.unsubscribeClosingNotification();\n  }\n\n  private unsubscribeClosingNotification(): void {\n    if (this.closingNotification) {\n      this.closingNotification.unsubscribe();\n    }\n  }\n\n  private openWindow(innerSub: InnerSubscriber<T, any> = null): void {\n    if (innerSub) {\n      this.remove(innerSub);\n      innerSub.unsubscribe();\n    }\n\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n\n    const window = this.window = new Subject<T>();\n    this.destination.next(window);\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n    if (closingNotifier === errorObject) {\n      const err = errorObject.e;\n      this.destination.error(err);\n      this.window.error(err);\n    } else {\n      this.add(this.closingNotification = subscribeToResult(this, closingNotifier));\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowWhen } from '../../operator/windowWhen';\n\nObservable.prototype.windowWhen = windowWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowWhen: typeof windowWhen;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {Observable} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\n/* tslint:disable:max-line-length */\nexport function withLatestFrom<T, R>(this: Observable<T>, project: (v1: T) => R): Observable<R>;\nexport function withLatestFrom<T, T2, R>(this: Observable<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function withLatestFrom<T, T2, T3, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function withLatestFrom<T, T2, T3, T4, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R> ;\nexport function withLatestFrom<T, T2>(this: Observable<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function withLatestFrom<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function withLatestFrom<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function withLatestFrom<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]> ;\nexport function withLatestFrom<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\nexport function withLatestFrom<T, R>(this: Observable<T>, array: ObservableInput<any>[]): Observable<R>;\nexport function withLatestFrom<T, R>(this: Observable<T>, array: ObservableInput<any>[], project: (...values: Array<any>) => R): Observable<R>;\n/* tslint:disable:max-line-length */\nexport function withLatestFrom<T, R>(this: Observable<T>, ...args: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  let project: any;\n  if (typeof args[args.length - 1] === 'function') {\n    project = args.pop();\n  }\n  const observables = <Observable<any>[]>args;\n  return this.lift(new WithLatestFromOperator(observables, project));\n}\n\nclass WithLatestFromOperator<T, R> implements Operator<T, R> {\n  constructor(private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WithLatestFromSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private values: any[];\n  private toRespond: number[] = [];\n\n  constructor(destination: Subscriber<R>,\n              private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n    super(destination);\n    const len = observables.length;\n    this.values = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      this.toRespond.push(i);\n    }\n\n    for (let i = 0; i < len; i++) {\n      let observable = observables[i];\n      this.add(subscribeToResult<T, R>(this, observable, <any>observable, i));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.values[outerIndex] = innerValue;\n    const toRespond = this.toRespond;\n    if (toRespond.length > 0) {\n      const found = toRespond.indexOf(outerIndex);\n      if (found !== -1) {\n        toRespond.splice(found, 1);\n      }\n    }\n  }\n\n  notifyComplete() {\n    // noop\n  }\n\n  protected _next(value: T) {\n    if (this.toRespond.length === 0) {\n      const args = [value, ...this.values];\n      if (this.project) {\n        this._tryProject(args);\n      } else {\n        this.destination.next(args);\n      }\n    }\n  }\n\n  private _tryProject(args: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { withLatestFrom } from '../../operator/withLatestFrom';\n\nObservable.prototype.withLatestFrom = withLatestFrom;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    withLatestFrom: typeof withLatestFrom;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { zipProto } from '../../operator/zip';\n\nObservable.prototype.zip = zipProto;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    zip: typeof zipProto;\n  }\n}","import { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ScalarObservable<T> extends Observable<T> {\n  static create<T>(value: T, scheduler?: Scheduler): ScalarObservable<T> {\n    return new ScalarObservable(value, scheduler);\n  }\n\n  static dispatch(state: any): void {\n    const { done, value, subscriber } = state;\n\n    if (done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(value);\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.done = true;\n    (<any> this).schedule(state);\n  }\n\n  _isScalar: boolean = true;\n\n  constructor(public value: T, private scheduler?: Scheduler) {\n    super();\n    if (scheduler) {\n      this._isScalar = false;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const value = this.value;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ScalarObservable.dispatch, 0, {\n        done: false, value, subscriber\n      });\n    } else {\n      subscriber.next(value);\n      if (!subscriber.closed) {\n        subscriber.complete();\n      }\n    }\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\nexport interface DispatchArg<T> {\n  subscriber: Subscriber<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class EmptyObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable that emits no items to the Observer and immediately\n   * emits a complete notification.\n   *\n   * <span class=\"informal\">Just emits 'complete', and nothing else.\n   * </span>\n   *\n   * <img src=\"./img/empty.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the complete notification. It can be used for composing with other\n   * Observables, such as in a {@link mergeMap}.\n   *\n   * @example <caption>Emit the number 7, then complete.</caption>\n   * var result = Rx.Observable.empty().startWith(7);\n   * result.subscribe(x => console.log(x));\n   *\n   * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>\n   * var interval = Rx.Observable.interval(1000);\n   * var result = interval.mergeMap(x =>\n   *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()\n   * );\n   * result.subscribe(x => console.log(x));\n   *\n   * @see {@link create}\n   * @see {@link never}\n   * @see {@link of}\n   * @see {@link throw}\n   *\n   * @param {Scheduler} [scheduler] A {@link Scheduler} to use for scheduling\n   * the emission of the complete notification.\n   * @return {Observable} An \"empty\" Observable: emits only the complete\n   * notification.\n   * @static true\n   * @name empty\n   * @owner Observable\n   */\n  static create<T>(scheduler?: Scheduler): Observable<T> {\n    return new EmptyObservable<T>(scheduler);\n  }\n\n  static dispatch<T>(arg: DispatchArg<T>) {\n    const { subscriber } = arg;\n    subscriber.complete();\n  }\n\n  constructor(private scheduler?: Scheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber });\n    } else {\n      subscriber.complete();\n    }\n  }\n}\n","import { Scheduler } from '../Scheduler';\nexport function isScheduler<T>(value: any): value is Scheduler {\n  return value && typeof (<any>value).schedule === 'function';\n}\n","import { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { Subscriber } from '../Subscriber';\nimport { isScheduler } from '../util/isScheduler';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayObservable<T> extends Observable<T> {\n\n  static create<T>(array: T[], scheduler?: Scheduler): Observable<T> {\n    return new ArrayObservable(array, scheduler);\n  }\n\n  static of<T>(item1: T, scheduler?: Scheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, scheduler?: Scheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, scheduler?: Scheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, scheduler?: Scheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, scheduler?: Scheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, item6: T, scheduler?: Scheduler): Observable<T>;\n  static of<T>(...array: Array<T | Scheduler>): Observable<T>;\n  /**\n   * Creates an Observable that emits some values you specify as arguments,\n   * immediately one after the other, and then emits a complete notification.\n   *\n   * <span class=\"informal\">Emits the arguments you provide, then completes.\n   * </span>\n   *\n   * <img src=\"./img/of.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the arguments given, and the complete notification thereafter. It can\n   * be used for composing with other Observables, such as with {@link concat}.\n   * By default, it uses a `null` Scheduler, which means the `next`\n   * notifications are sent synchronously, although with a different Scheduler\n   * it is possible to determine when those notifications will be delivered.\n   *\n   * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>\n   * var numbers = Rx.Observable.of(10, 20, 30);\n   * var letters = Rx.Observable.of('a', 'b', 'c');\n   * var interval = Rx.Observable.interval(1000);\n   * var result = numbers.concat(letters).concat(interval);\n   * result.subscribe(x => console.log(x));\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link never}\n   * @see {@link throw}\n   *\n   * @param {...T} values Arguments that represent `next` values to be emitted.\n   * @param {Scheduler} [scheduler] A {@link Scheduler} to use for scheduling\n   * the emissions of the `next` notifications.\n   * @return {Observable<T>} An Observable that emits each given input value.\n   * @static true\n   * @name of\n   * @owner Observable\n   */\n  static of<T>(...array: Array<T | Scheduler>): Observable<T> {\n    let scheduler = <Scheduler>array[array.length - 1];\n    if (isScheduler(scheduler)) {\n      array.pop();\n    } else {\n      scheduler = null;\n    }\n\n    const len = array.length;\n    if (len > 1) {\n      return new ArrayObservable<T>(<any>array, scheduler);\n    } else if (len === 1) {\n      return new ScalarObservable<T>(<any>array[0], scheduler);\n    } else {\n      return new EmptyObservable<T>(scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n\n    const { array, index, count, subscriber } = state;\n\n    if (index >= count) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(array[index]);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  value: any;\n\n  constructor(private array: T[], private scheduler?: Scheduler) {\n    super();\n    if (!scheduler && array.length === 1) {\n      this._isScalar = true;\n      this.value = array[0];\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const array = this.array;\n    const count = array.length;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayObservable.dispatch, 0, {\n        array, index, count, subscriber\n      });\n    } else {\n      for (let i = 0; i < count && !subscriber.closed; i++) {\n        subscriber.next(array[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n","import { Subscriber } from './Subscriber';\nimport { InnerSubscriber } from './InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class OuterSubscriber<T, R> extends Subscriber<T> {\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this.destination.error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    this.destination.complete();\n  }\n}\n","export function isPromise<T>(value: any | Promise<T>): value is Promise<T> {\n  return value && typeof (<any>value).subscribe !== 'function' && typeof (value as any).then === 'function';\n}\n","import { Subscriber } from './Subscriber';\nimport { OuterSubscriber } from './OuterSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class InnerSubscriber<T, R> extends Subscriber<R> {\n  private index: number = 0;\n\n  constructor(private parent: OuterSubscriber<T, R>, private outerValue: T, private outerIndex: number) {\n    super();\n  }\n\n  protected _next(value: R): void {\n    this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n  }\n\n  protected _error(error: any): void {\n    this.parent.notifyError(error, this);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.parent.notifyComplete(this);\n    this.unsubscribe();\n  }\n}\n","import { root } from './root';\nimport { isArray } from './isArray';\nimport { isPromise } from './isPromise';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\nimport { $$iterator } from '../symbol/iterator';\nimport { Subscription } from '../Subscription';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { $$observable } from '../symbol/observable';\n\nexport function subscribeToResult<T, R>(outerSubscriber: OuterSubscriber<T, R>,\n                                        result: any,\n                                        outerValue?: T,\n                                        outerIndex?: number): Subscription;\nexport function subscribeToResult<T>(outerSubscriber: OuterSubscriber<any, any>,\n                                     result: ObservableInput<T>,\n                                     outerValue?: T,\n                                     outerIndex?: number): Subscription {\n  let destination: Subscriber<any> = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n\n  if (destination.closed) {\n    return null;\n  }\n\n  if (result instanceof Observable) {\n    if (result._isScalar) {\n      destination.next((<any>result).value);\n      destination.complete();\n      return null;\n    } else {\n      return result.subscribe(destination);\n    }\n  }\n\n  if (isArray(result)) {\n    for (let i = 0, len = result.length; i < len && !destination.closed; i++) {\n      destination.next(result[i]);\n    }\n    if (!destination.closed) {\n      destination.complete();\n    }\n  } else if (isPromise(result)) {\n    result.then(\n      (value) => {\n        if (!destination.closed) {\n          destination.next(<any>value);\n          destination.complete();\n        }\n      },\n      (err: any) => destination.error(err)\n    )\n    .then(null, (err: any) => {\n      // Escaping the Promise trap: globally throw unhandled errors\n      root.setTimeout(() => { throw err; });\n    });\n    return destination;\n  } else if (typeof result[$$iterator] === 'function') {\n    const iterator = <any>result[$$iterator]();\n    do {\n      let item = iterator.next();\n      if (item.done) {\n        destination.complete();\n        break;\n      }\n      destination.next(item.value);\n      if (destination.closed) {\n        break;\n      }\n    } while (true);\n  } else if (typeof result[$$observable] === 'function') {\n    const obs = result[$$observable]();\n    if (typeof obs.subscribe !== 'function') {\n      destination.error(new Error('invalid observable'));\n    } else {\n      return obs.subscribe(new InnerSubscriber(outerSubscriber, outerValue, outerIndex));\n    }\n  } else {\n    destination.error(new TypeError('unknown type returned'));\n  }\n  return null;\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { isArray } from '../util/isArray';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { $$iterator } from '../symbol/iterator';\n\n/**\n * @param observables\n * @return {Observable<R>}\n * @method zip\n * @owner Observable\n */\n/* tslint:disable:max-line-length */\nexport function zipProto<T, R>(this: Observable<T>, project: (v1: T) => R): Observable<R>;\nexport function zipProto<T, T2, R>(this: Observable<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function zipProto<T, T2, T3, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function zipProto<T, T2, T3, T4, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function zipProto<T, T2, T3, T4, T5, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function zipProto<T, T2, T3, T4, T5, T6, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R> ;\nexport function zipProto<T, T2>(this: Observable<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function zipProto<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function zipProto<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function zipProto<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function zipProto<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]> ;\nexport function zipProto<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function zipProto<T, R>(this: Observable<T>, array: Array<ObservableInput<T>>): Observable<R>;\nexport function zipProto<T, TOther, R>(this: Observable<T>, array: Array<ObservableInput<TOther>>, project: (v1: T, ...values: Array<TOther>) => R): Observable<R>;\n/* tslint:disable:max-line-length */\nexport function zipProto<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  return this.lift.call(zipStatic<R>(this, ...observables));\n}\n\n/* tslint:disable:max-line-length */\nexport function zipStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function zipStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function zipStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function zipStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function zipStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n\nexport function zipStatic<T, R>(v1: ObservableInput<T>, project: (v1: T) => R): Observable<R>;\nexport function zipStatic<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n\nexport function zipStatic<T>(array: ObservableInput<T>[]): Observable<T[]>;\nexport function zipStatic<R>(array: ObservableInput<any>[]): Observable<R>;\nexport function zipStatic<T, R>(array: ObservableInput<T>[], project: (...values: Array<T>) => R): Observable<R>;\nexport function zipStatic<R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R): Observable<R>;\n\nexport function zipStatic<T>(...observables: Array<ObservableInput<T>>): Observable<T[]>;\nexport function zipStatic<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function zipStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * @param observables\n * @return {Observable<R>}\n * @static true\n * @name zip\n * @owner Observable\n */\nexport function zipStatic<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  const project = <((...ys: Array<any>) => R)> observables[observables.length - 1];\n  if (typeof project === 'function') {\n    observables.pop();\n  }\n  return new ArrayObservable(observables).lift(new ZipOperator(project));\n}\n\nexport class ZipOperator<T, R> implements Operator<T, R> {\n\n  project: (...values: Array<any>) => R;\n\n  constructor(project?: (...values: Array<any>) => R) {\n    this.project = project;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new ZipSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ZipSubscriber<T, R> extends Subscriber<T> {\n  private index = 0;\n  private values: any;\n  private project: (...values: Array<any>) => R;\n  private iterators: LookAheadIterator<any>[] = [];\n  private active = 0;\n\n  constructor(destination: Subscriber<R>,\n              project?: (...values: Array<any>) => R,\n              values: any = Object.create(null)) {\n    super(destination);\n    this.project = (typeof project === 'function') ? project : null;\n    this.values = values;\n  }\n\n  protected _next(value: any) {\n    const iterators = this.iterators;\n    const index = this.index++;\n    if (isArray(value)) {\n      iterators.push(new StaticArrayIterator(value));\n    } else if (typeof value[$$iterator] === 'function') {\n      iterators.push(new StaticIterator(value[$$iterator]()));\n    } else {\n      iterators.push(new ZipBufferIterator(this.destination, this, value, index));\n    }\n  }\n\n  protected _complete() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n    this.active = len;\n    for (let i = 0; i < len; i++) {\n      let iterator: ZipBufferIterator<any, any> = <any>iterators[i];\n      if (iterator.stillUnsubscribed) {\n        this.add(iterator.subscribe(iterator, i));\n      } else {\n        this.active--; // not an observable\n      }\n    }\n  }\n\n  notifyInactive() {\n    this.active--;\n    if (this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  checkIterators() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n    const destination = this.destination;\n\n    // abort if not all of them have values\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {\n        return;\n      }\n    }\n\n    let shouldComplete = false;\n    const args: any[] = [];\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      let result = iterator.next();\n\n      // check to see if it's completed now that you've gotten\n      // the next value.\n      if (iterator.hasCompleted()) {\n        shouldComplete = true;\n      }\n\n      if (result.done) {\n        destination.complete();\n        return;\n      }\n\n      args.push(result.value);\n    }\n\n    if (this.project) {\n      this._tryProject(args);\n    } else {\n      destination.next(args);\n    }\n\n    if (shouldComplete) {\n      destination.complete();\n    }\n  }\n\n  protected _tryProject(args: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n\ninterface LookAheadIterator<T> extends Iterator<T> {\n  hasValue(): boolean;\n  hasCompleted(): boolean;\n}\n\nclass StaticIterator<T> implements LookAheadIterator<T> {\n  private nextResult: IteratorResult<T>;\n\n  constructor(private iterator: Iterator<T>) {\n    this.nextResult = iterator.next();\n  }\n\n  hasValue() {\n    return true;\n  }\n\n  next(): IteratorResult<T> {\n    const result = this.nextResult;\n    this.nextResult = this.iterator.next();\n    return result;\n  }\n\n  hasCompleted() {\n    const nextResult = this.nextResult;\n    return nextResult && nextResult.done;\n  }\n}\n\nclass StaticArrayIterator<T> implements LookAheadIterator<T> {\n  private index = 0;\n  private length = 0;\n\n  constructor(private array: T[]) {\n    this.length = array.length;\n  }\n\n  [$$iterator]() {\n    return this;\n  }\n\n  next(value?: any): IteratorResult<T> {\n    const i = this.index++;\n    const array = this.array;\n    return i < this.length ? { value: array[i], done: false } : { value: null, done: true };\n  }\n\n  hasValue() {\n    return this.array.length > this.index;\n  }\n\n  hasCompleted() {\n    return this.array.length === this.index;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ZipBufferIterator<T, R> extends OuterSubscriber<T, R> implements LookAheadIterator<T> {\n  stillUnsubscribed = true;\n  buffer: T[] = [];\n  isComplete = false;\n\n  constructor(destination: PartialObserver<T>,\n              private parent: ZipSubscriber<T, R>,\n              private observable: Observable<T>,\n              private index: number) {\n    super(destination);\n  }\n\n  [$$iterator]() {\n    return this;\n  }\n\n  // NOTE: there is actually a name collision here with Subscriber.next and Iterator.next\n  //    this is legit because `next()` will never be called by a subscription in this case.\n  next(): IteratorResult<T> {\n    const buffer = this.buffer;\n    if (buffer.length === 0 && this.isComplete) {\n      return { value: null, done: true };\n    } else {\n      return { value: buffer.shift(), done: false };\n    }\n  }\n\n  hasValue() {\n    return this.buffer.length > 0;\n  }\n\n  hasCompleted() {\n    return this.buffer.length === 0 && this.isComplete;\n  }\n\n  notifyComplete() {\n    if (this.buffer.length > 0) {\n      this.isComplete = true;\n      this.parent.notifyInactive();\n    } else {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.buffer.push(innerValue);\n    this.parent.checkIterators();\n  }\n\n  subscribe(value: any, index: number) {\n    return subscribeToResult<any, any>(this, this.observable, this, index);\n  }\n}\n","import { ZipOperator } from './zip';\nimport { Observable } from '../Observable';\n\n/**\n * @param project\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method zipAll\n * @owner Observable\n */\nexport function zipAll<T, R>(this: Observable<T>, project?: (...values: Array<any>) => R): Observable<R> {\n  return this.lift(new ZipOperator(project));\n}\n","\nimport { Observable } from '../../Observable';\nimport { zipAll } from '../../operator/zipAll';\n\nObservable.prototype.zipAll = zipAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    zipAll: typeof zipAll;\n  }\n}","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\n\n/**\n * @class AsyncSubject<T>\n */\nexport class AsyncSubject<T> extends Subject<T> {\n  private value: T = null;\n  private hasNext: boolean = false;\n  private hasCompleted: boolean = false;\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription {\n    if (this.hasCompleted && this.hasNext) {\n      subscriber.next(this.value);\n      subscriber.complete();\n      return Subscription.EMPTY;\n    } else if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    }\n\n    return super._subscribe(subscriber);\n  }\n\n  next(value: T): void {\n    if (!this.hasCompleted) {\n      this.value = value;\n      this.hasNext = true;\n    }\n  }\n\n  complete(): void {\n    this.hasCompleted = true;\n    if (this.hasNext) {\n      super.next(this.value);\n    }\n    super.complete();\n  }\n}\n","import { Observable } from '../Observable';\nimport { Scheduler } from '../Scheduler';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * @see {@link Notification}\n *\n * @param scheduler\n * @param delay\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method observeOn\n * @owner Observable\n */\nexport function observeOn<T>(this: Observable<T>, scheduler: Scheduler, delay: number = 0): Observable<T> {\n  return this.lift(new ObserveOnOperator(scheduler, delay));\n}\n\nexport class ObserveOnOperator<T> implements Operator<T, T> {\n  constructor(private scheduler: Scheduler, private delay: number = 0) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ObserveOnSubscriber<T> extends Subscriber<T> {\n  static dispatch(arg: ObserveOnMessage) {\n    const { notification, destination } = arg;\n    notification.observe(destination);\n  }\n\n  constructor(destination: Subscriber<T>,\n              private scheduler: Scheduler,\n              private delay: number = 0) {\n    super(destination);\n  }\n\n  private scheduleMessage(notification: Notification<any>): void {\n     this.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch,\n                                      this.delay,\n                                      new ObserveOnMessage(notification, this.destination)));\n   }\n\n  protected _next(value: T): void {\n    this.scheduleMessage(Notification.createNext(value));\n  }\n\n  protected _error(err: any): void {\n    this.scheduleMessage(Notification.createError(err));\n  }\n\n  protected _complete(): void {\n    this.scheduleMessage(Notification.createComplete());\n  }\n}\n\nexport class ObserveOnMessage {\n  constructor(public notification: Notification<any>,\n              public destination: PartialObserver<any>) {\n  }\n}\n","import { Subject } from './Subject';\nimport { Scheduler } from './Scheduler';\nimport { queue } from './scheduler/queue';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { ObserveOnSubscriber } from './operator/observeOn';\n\n/**\n * @class ReplaySubject<T>\n */\nexport class ReplaySubject<T> extends Subject<T> {\n  private _events: ReplayEvent<T>[] = [];\n  private _bufferSize: number;\n  private _windowTime: number;\n\n  constructor(bufferSize: number = Number.POSITIVE_INFINITY,\n              windowTime: number = Number.POSITIVE_INFINITY,\n              private scheduler?: Scheduler) {\n    super();\n    this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\n    this._windowTime = windowTime < 1 ? 1 : windowTime;\n  }\n\n  next(value: T): void {\n    const now = this._getNow();\n    this._events.push(new ReplayEvent(now, value));\n    this._trimBufferThenGetEvents();\n    super.next(value);\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const _events = this._trimBufferThenGetEvents();\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      subscriber.add(subscriber = new ObserveOnSubscriber<T>(subscriber, scheduler));\n    }\n\n    const len = _events.length;\n    for (let i = 0; i < len && !subscriber.closed; i++) {\n      subscriber.next(_events[i].value);\n    }\n\n    return super._subscribe(subscriber);\n  }\n\n  _getNow(): number {\n    return (this.scheduler || queue).now();\n  }\n\n  private _trimBufferThenGetEvents(): ReplayEvent<T>[] {\n    const now = this._getNow();\n    const _bufferSize = this._bufferSize;\n    const _windowTime = this._windowTime;\n    const _events = this._events;\n\n    let eventsCount = _events.length;\n    let spliceCount = 0;\n\n    // Trim events that fall out of the time window.\n    // Start at the front of the list. Break early once\n    // we encounter an event that falls within the window.\n    while (spliceCount < eventsCount) {\n      if ((now - _events[spliceCount].time) < _windowTime) {\n        break;\n      }\n      spliceCount++;\n    }\n\n    if (eventsCount > _bufferSize) {\n      spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\n    }\n\n    if (spliceCount > 0) {\n      _events.splice(0, spliceCount);\n    }\n\n    return _events;\n  }\n}\n\nclass ReplayEvent<T> {\n  constructor(public time: number, public value: T) {\n  }\n}\n","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, ISubscription } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\n\n/**\n * @class BehaviorSubject<T>\n */\nexport class BehaviorSubject<T> extends Subject<T> {\n\n  constructor(private _value: T) {\n    super();\n  }\n\n  get value(): T {\n    return this.getValue();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const subscription = super._subscribe(subscriber);\n    if (subscription && !(<ISubscription>subscription).closed) {\n      subscriber.next(this._value);\n    }\n    return subscription;\n  }\n\n  getValue(): T {\n    if (this.hasError) {\n      throw this.thrownError;\n    } else if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return this._value;\n    }\n  }\n\n  next(value: T): void {\n    super.next(this._value = value);\n  }\n}\n","import { Subject, SubjectSubscriber } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\n/**\n * @class ConnectableObservable<T>\n */\nexport class ConnectableObservable<T> extends Observable<T> {\n\n  protected _subject: Subject<T>;\n  protected _refCount: number = 0;\n  protected _connection: Subscription;\n\n  constructor(protected source: Observable<T>,\n              protected subjectFactory: () => Subject<T>) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    return this.getSubject().subscribe(subscriber);\n  }\n\n  protected getSubject(): Subject<T> {\n    const subject = this._subject;\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n    return this._subject;\n  }\n\n  connect(): Subscription {\n    let connection = this._connection;\n    if (!connection) {\n      connection = this._connection = new Subscription();\n      connection.add(this.source\n        .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n      if (connection.closed) {\n        this._connection = null;\n        connection = Subscription.EMPTY;\n      } else {\n        this._connection = connection;\n      }\n    }\n    return connection;\n  }\n\n  refCount(): Observable<T> {\n    return this.lift(new RefCountOperator<T>(this));\n  }\n}\n\nexport const connectableObservableDescriptor: PropertyDescriptorMap = {\n  operator: { value: null },\n  _refCount: { value: 0, writable: true },\n  _subscribe: { value: (<any> ConnectableObservable.prototype)._subscribe },\n  getSubject: { value: (<any> ConnectableObservable.prototype).getSubject },\n  connect: { value: (<any> ConnectableObservable.prototype).connect },\n  refCount: { value: (<any> ConnectableObservable.prototype).refCount }\n};\n\nclass ConnectableSubscriber<T> extends SubjectSubscriber<T> {\n  constructor(destination: Subject<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n  protected _error(err: any): void {\n    this._unsubscribe();\n    super._error(err);\n  }\n  protected _complete(): void {\n    this._unsubscribe();\n    super._complete();\n  }\n  protected _unsubscribe() {\n    const { connectable } = this;\n    if (connectable) {\n      this.connectable = null;\n      const connection = (<any> connectable)._connection;\n      (<any> connectable)._refCount = 0;\n      (<any> connectable)._subject = null;\n      (<any> connectable)._connection = null;\n      if (connection) {\n        connection.unsubscribe();\n      }\n    }\n  }\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source._subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  protected _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's dowstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // Observable.range(0, 10)\n    //   .publish()\n    //   .refCount()\n    //   .take(5)\n    //   .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","/**\n * An error thrown when an Observable or a sequence was queried but has no\n * elements.\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link single}\n *\n * @class EmptyError\n */\nexport class EmptyError extends Error {\n  constructor() {\n    const err: any = super('no elements in sequence');\n    (<any> this).name = err.name = 'EmptyError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","/**\n * An error thrown when an element was queried at a certain index of an\n * Observable, but no such index or position exists in that sequence.\n *\n * @see {@link elementAt}\n * @see {@link take}\n * @see {@link takeLast}\n *\n * @class ArgumentOutOfRangeError\n */\nexport class ArgumentOutOfRangeError extends Error {\n  constructor() {\n    const err: any = super('argument out of range');\n    (<any> this).name = err.name = 'ArgumentOutOfRangeError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","/**\r\n * An error thrown when duetime elapses.\r\n *\r\n * @see {@link timeout}\r\n *\r\n * @class TimeoutError\r\n */\r\nexport class TimeoutError extends Error {\r\n  constructor() {\r\n    const err: any = super('Timeout has occurred');\r\n    (<any> this).name = err.name = 'TimeoutError';\r\n    (<any> this).stack = err.stack;\r\n    (<any> this).message = err.message;\r\n  }\r\n}\r\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Scheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\n\n/**\n * @param scheduler\n * @return {Observable<TimeInterval<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timeInterval\n * @owner Observable\n */\nexport function timeInterval<T>(this: Observable<T>, scheduler: Scheduler = async): Observable<TimeInterval<T>> {\n  return this.lift(new TimeIntervalOperator(scheduler));\n}\n\nexport class TimeInterval<T> {\n  constructor(public value: T, public interval: number) {\n\n  }\n};\n\nclass TimeIntervalOperator<T> implements Operator<T, TimeInterval<T>> {\n  constructor(private scheduler: Scheduler) {\n\n  }\n\n  call(observer: Subscriber<TimeInterval<T>>, source: any): any {\n    return source._subscribe(new TimeIntervalSubscriber(observer, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeIntervalSubscriber<T> extends Subscriber<T> {\n  private lastTime: number = 0;\n\n  constructor(destination: Subscriber<TimeInterval<T>>, private scheduler: Scheduler) {\n    super(destination);\n\n    this.lastTime = scheduler.now();\n  }\n\n  protected _next(value: T) {\n    let now = this.scheduler.now();\n    let span = now - this.lastTime;\n    this.lastTime = now;\n\n    this.destination.next(new TimeInterval(value, span));\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Scheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\n\n/**\n * @param scheduler\n * @return {Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timestamp\n * @owner Observable\n */\nexport function timestamp<T>(this: Observable<T>, scheduler: Scheduler = async): Observable<Timestamp<T>> {\n  return this.lift(new TimestampOperator(scheduler));\n}\n\nexport class Timestamp<T> {\n  constructor(public value: T, public timestamp: number) {\n  }\n};\n\nclass TimestampOperator<T> implements Operator<T, Timestamp<T>> {\n  constructor(private scheduler: Scheduler) {\n  }\n\n  call(observer: Subscriber<Timestamp<T>>, source: any): any {\n    return source._subscribe(new TimestampSubscriber(observer, this.scheduler));\n  }\n}\n\nclass TimestampSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<Timestamp<T>>, private scheduler: Scheduler) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const now = this.scheduler.now();\n\n    this.destination.next(new Timestamp(value, now));\n  }\n}\n","import { PartialObserver } from './Observer';\nimport { Observable } from './Observable';\n\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nexport class Notification<T> {\n  hasValue: boolean;\n\n  constructor(public kind: string, public value?: T, public exception?: any) {\n    this.hasValue = kind === 'N';\n  }\n\n  /**\n   * Delivers to the given `observer` the value wrapped by this Notification.\n   * @param {Observer} observer\n   * @return\n   */\n  observe(observer: PartialObserver<T>): any {\n    switch (this.kind) {\n      case 'N':\n        return observer.next && observer.next(this.value);\n      case 'E':\n        return observer.error && observer.error(this.exception);\n      case 'C':\n        return observer.complete && observer.complete();\n    }\n  }\n\n  /**\n   * Given some {@link Observer} callbacks, deliver the value represented by the\n   * current Notification to the correctly corresponding callback.\n   * @param {function(value: T): void} next An Observer `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  do(next: (value: T) => void, error?: (err: any) => void, complete?: () => void): any {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return next && next(this.value);\n      case 'E':\n        return error && error(this.exception);\n      case 'C':\n        return complete && complete();\n    }\n  }\n\n  /**\n   * Takes an Observer or its individual callback functions, and calls `observe`\n   * or `do` methods accordingly.\n   * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n   * the `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  accept(nextOrObserver: PartialObserver<T> | ((value: T) => void), error?: (err: any) => void, complete?: () => void) {\n    if (nextOrObserver && typeof (<PartialObserver<T>>nextOrObserver).next === 'function') {\n      return this.observe(<PartialObserver<T>>nextOrObserver);\n    } else {\n      return this.do(<(value: T) => void>nextOrObserver, error, complete);\n    }\n  }\n\n  /**\n   * Returns a simple Observable that just delivers the notification represented\n   * by this Notification instance.\n   * @return {any}\n   */\n  toObservable(): Observable<T> {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return Observable.of(this.value);\n      case 'E':\n        return Observable.throw(this.exception);\n      case 'C':\n        return Observable.empty<T>();\n    }\n    throw new Error('unexpected notification kind value');\n  }\n\n  private static completeNotification: Notification<any> = new Notification('C');\n  private static undefinedValueNotification: Notification<any> = new Notification('N', undefined);\n\n  /**\n   * A shortcut to create a Notification instance of the type `next` from a\n   * given value.\n   * @param {T} value The `next` value.\n   * @return {Notification<T>} The \"next\" Notification representing the\n   * argument.\n   */\n  static createNext<T>(value: T): Notification<T> {\n    if (typeof value !== 'undefined') {\n      return new Notification('N', value);\n    }\n    return this.undefinedValueNotification;\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `error` from a\n   * given error.\n   * @param {any} [err] The `error` exception.\n   * @return {Notification<T>} The \"error\" Notification representing the\n   * argument.\n   */\n  static createError<T>(err?: any): Notification<T> {\n    return new Notification('E', undefined, err);\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `complete`.\n   * @return {Notification<any>} The valueless \"complete\" Notification.\n   */\n  static createComplete(): Notification<any> {\n    return this.completeNotification;\n  }\n}\n","import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { Scheduler } from '../Scheduler';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { SubscriptionLoggable } from './SubscriptionLoggable';\nimport { applyMixins } from '../util/applyMixins';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ColdObservable<T> extends Observable<T> implements SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n  logSubscribedFrame: () => number;\n  logUnsubscribedFrame: (index: number) => void;\n\n  constructor(public messages: TestMessage[],\n              scheduler: Scheduler) {\n    super(function (subscriber: Subscriber<any>) {\n      const observable: ColdObservable<T> = this;\n      const index = observable.logSubscribedFrame();\n      subscriber.add(new Subscription(() => {\n        observable.logUnsubscribedFrame(index);\n      }));\n      observable.scheduleMessages(subscriber);\n      return subscriber;\n    });\n    this.scheduler = scheduler;\n  }\n\n  scheduleMessages(subscriber: Subscriber<any>) {\n    const messagesLength = this.messages.length;\n    for (let i = 0; i < messagesLength; i++) {\n      const message = this.messages[i];\n      subscriber.add(\n        this.scheduler.schedule(({message, subscriber}) => { message.notification.observe(subscriber); },\n          message.frame,\n          {message, subscriber})\n      );\n    }\n  }\n}\napplyMixins(ColdObservable, [SubscriptionLoggable]);\n","/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nexport class ObjectUnsubscribedError extends Error {\n  constructor() {\n    const err: any = super('object unsubscribed');\n    (<any> this).name = err.name = 'ObjectUnsubscribedError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Subject } from './Subject';\nimport { Observer } from './Observer';\nimport { Subscription } from './Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SubjectSubscription<T> extends Subscription {\n  closed: boolean = false;\n\n  constructor(public subject: Subject<T>, public subscriber: Observer<T>) {\n    super();\n  }\n\n  unsubscribe() {\n    if (this.closed) {\n      return;\n    }\n\n    this.closed = true;\n\n    const subject = this.subject;\n    const observers = subject.observers;\n\n    this.subject = null;\n\n    if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n      return;\n    }\n\n    const subscriberIndex = observers.indexOf(this.subscriber);\n\n    if (subscriberIndex !== -1) {\n      observers.splice(subscriberIndex, 1);\n    }\n  }\n}\n","import { Operator } from './Operator';\nimport { Observer } from './Observer';\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { ISubscription, Subscription } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { $$rxSubscriber } from './symbol/rxSubscriber';\n\n/**\n * @class SubjectSubscriber<T>\n */\nexport class SubjectSubscriber<T> extends Subscriber<T> {\n  constructor(protected destination: Subject<T>) {\n    super(destination);\n  }\n}\n\n/**\n * @class Subject<T>\n */\nexport class Subject<T> extends Observable<T> implements ISubscription {\n\n  [$$rxSubscriber]() {\n    return new SubjectSubscriber(this);\n  }\n\n  observers: Observer<T>[] = [];\n\n  closed = false;\n\n  isStopped = false;\n\n  hasError = false;\n\n  thrownError: any = null;\n\n  constructor() {\n    super();\n  }\n\n  static create: Function = <T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\n    return new AnonymousSubject<T>(destination, source);\n  };\n\n  lift<T, R>(operator: Operator<T, R>): Observable<T> {\n    const subject = new AnonymousSubject(this, this);\n    subject.operator = operator;\n    return <any>subject;\n  }\n\n  next(value?: T) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    if (!this.isStopped) {\n      const { observers } = this;\n      const len = observers.length;\n      const copy = observers.slice();\n      for (let i = 0; i < len; i++) {\n        copy[i].next(value);\n      }\n    }\n  }\n\n  error(err: any) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.hasError = true;\n    this.thrownError = err;\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].error(err);\n    }\n    this.observers.length = 0;\n  }\n\n  complete() {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].complete();\n    }\n    this.observers.length = 0;\n  }\n\n  unsubscribe() {\n    this.isStopped = true;\n    this.closed = true;\n    this.observers = null;\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscriber.complete();\n      return Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      return new SubjectSubscription(this, subscriber);\n    }\n  }\n\n  asObservable(): Observable<T> {\n    const observable = new Observable<T>();\n    (<any>observable).source = this;\n    return observable;\n  }\n}\n\n/**\n * @class AnonymousSubject<T>\n */\nexport class AnonymousSubject<T> extends Subject<T> {\n  constructor(protected destination?: Observer<T>, source?: Observable<T>) {\n    super();\n    this.source = source;\n  }\n\n  next(value: T) {\n    const { destination } = this;\n    if (destination && destination.next) {\n      destination.next(value);\n    }\n  }\n\n  error(err: any) {\n    const { destination } = this;\n    if (destination && destination.error) {\n      this.destination.error(err);\n    }\n  }\n\n  complete() {\n    const { destination } = this;\n    if (destination && destination.complete) {\n      this.destination.complete();\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return this.source.subscribe(subscriber);\n    } else {\n      return Subscription.EMPTY;\n    }\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { SubscriptionLog } from './SubscriptionLog';\n\nexport class SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n\n  logSubscribedFrame(): number {\n    this.subscriptions.push(new SubscriptionLog(this.scheduler.now()));\n    return this.subscriptions.length - 1;\n  }\n\n  logUnsubscribedFrame(index: number) {\n    const subscriptionLogs = this.subscriptions;\n    const oldSubscriptionLog = subscriptionLogs[index];\n    subscriptionLogs[index] = new SubscriptionLog(\n      oldSubscriptionLog.subscribedFrame,\n      this.scheduler.now()\n    );\n  }\n}\n","export function applyMixins(derivedCtor: any, baseCtors: any[]) {\n  for (let i = 0, len = baseCtors.length; i < len; i++) {\n    const baseCtor = baseCtors[i];\n    const propertyKeys = Object.getOwnPropertyNames(baseCtor.prototype);\n    for (let j = 0, len2 = propertyKeys.length; j < len2; j++) {\n      const name = propertyKeys[j];\n      derivedCtor.prototype[name] = baseCtor.prototype[name];\n    }\n  }\n}","import { Subject } from '../Subject';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Scheduler } from '../Scheduler';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { SubscriptionLoggable } from './SubscriptionLoggable';\nimport { applyMixins } from '../util/applyMixins';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class HotObservable<T> extends Subject<T> implements SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n  logSubscribedFrame: () => number;\n  logUnsubscribedFrame: (index: number) => void;\n\n  constructor(public messages: TestMessage[],\n              scheduler: Scheduler) {\n    super();\n    this.scheduler = scheduler;\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription {\n    const subject: HotObservable<T> = this;\n    const index = subject.logSubscribedFrame();\n    subscriber.add(new Subscription(() => {\n      subject.logUnsubscribedFrame(index);\n    }));\n    return super._subscribe(subscriber);\n  }\n\n  setup() {\n    const subject = this;\n    const messagesLength = subject.messages.length;\n    /* tslint:disable:no-var-keyword */\n    for (var i = 0; i < messagesLength; i++) {\n      (() => {\n        var message = subject.messages[i];\n   /* tslint:enable */\n        subject.scheduler.schedule(\n          () => { message.notification.observe(subject); },\n          message.frame\n        );\n      })();\n    }\n  }\n}\napplyMixins(HotObservable, [SubscriptionLoggable]);\n","export class SubscriptionLog {\n  constructor(public subscribedFrame: number,\n              public unsubscribedFrame: number = Number.POSITIVE_INFINITY) {\n  }\n}","import { Observable } from '../Observable';\nimport { Notification } from '../Notification';\nimport { Subject } from '../Subject';\nimport { ColdObservable } from './ColdObservable';\nimport { HotObservable } from './HotObservable';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { Subscription } from '../Subscription';\nimport { VirtualTimeScheduler, VirtualAction } from '../scheduler/VirtualTimeScheduler';\n\nconst defaultMaxFrame: number = 750;\n\ninterface FlushableTest {\n  ready: boolean;\n  actual?: any[];\n  expected?: any[];\n}\n\nexport type observableToBeFn = (marbles: string, values?: any, errorValue?: any) => void;\nexport type subscriptionLogsToBeFn = (marbles: string | string[]) => void;\n\nexport class TestScheduler extends VirtualTimeScheduler {\n  private hotObservables: HotObservable<any>[] = [];\n  private coldObservables: ColdObservable<any>[] = [];\n  private flushTests: FlushableTest[] = [];\n\n  constructor(public assertDeepEqual: (actual: any, expected: any) => boolean | void) {\n    super(VirtualAction, defaultMaxFrame);\n  }\n\n  createTime(marbles: string): number {\n    const indexOf: number = marbles.indexOf('|');\n    if (indexOf === -1) {\n      throw new Error('marble diagram for time should have a completion marker \"|\"');\n    }\n    return indexOf * TestScheduler.frameTimeFactor;\n  }\n\n  createColdObservable<T>(marbles: string, values?: any, error?: any): Observable<T> {\n    if (marbles.indexOf('^') !== -1) {\n      throw new Error('cold observable cannot have subscription offset \"^\"');\n    }\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('cold observable cannot have unsubscription marker \"!\"');\n    }\n    const messages = TestScheduler.parseMarbles(marbles, values, error);\n    const cold = new ColdObservable<T>(messages, this);\n    this.coldObservables.push(cold);\n    return cold;\n  }\n\n  createHotObservable<T>(marbles: string, values?: any, error?: any): Subject<T> {\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('hot observable cannot have unsubscription marker \"!\"');\n    }\n    const messages = TestScheduler.parseMarbles(marbles, values, error);\n    const subject = new HotObservable<T>(messages, this);\n    this.hotObservables.push(subject);\n    return subject;\n  }\n\n  private materializeInnerObservable(observable: Observable<any>,\n                                     outerFrame: number): TestMessage[] {\n    const messages: TestMessage[] = [];\n    observable.subscribe((value) => {\n      messages.push({ frame: this.frame - outerFrame, notification: Notification.createNext(value) });\n    }, (err) => {\n      messages.push({ frame: this.frame - outerFrame, notification: Notification.createError(err) });\n    }, () => {\n      messages.push({ frame: this.frame - outerFrame, notification: Notification.createComplete() });\n    });\n    return messages;\n  }\n\n  expectObservable(observable: Observable<any>,\n                   unsubscriptionMarbles: string = null): ({ toBe: observableToBeFn }) {\n    const actual: TestMessage[] = [];\n    const flushTest: FlushableTest = { actual, ready: false };\n    const unsubscriptionFrame = TestScheduler\n      .parseMarblesAsSubscriptions(unsubscriptionMarbles).unsubscribedFrame;\n    let subscription: Subscription;\n\n    this.schedule(() => {\n      subscription = observable.subscribe(x => {\n        let value = x;\n        // Support Observable-of-Observables\n        if (x instanceof Observable) {\n          value = this.materializeInnerObservable(value, this.frame);\n        }\n        actual.push({ frame: this.frame, notification: Notification.createNext(value) });\n      }, (err) => {\n        actual.push({ frame: this.frame, notification: Notification.createError(err) });\n      }, () => {\n        actual.push({ frame: this.frame, notification: Notification.createComplete() });\n      });\n    }, 0);\n\n    if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n      this.schedule(() => subscription.unsubscribe(), unsubscriptionFrame);\n    }\n\n    this.flushTests.push(flushTest);\n\n    return {\n      toBe(marbles: string, values?: any, errorValue?: any) {\n        flushTest.ready = true;\n        flushTest.expected = TestScheduler.parseMarbles(marbles, values, errorValue, true);\n      }\n    };\n  }\n\n  expectSubscriptions(actualSubscriptionLogs: SubscriptionLog[]): ({ toBe: subscriptionLogsToBeFn }) {\n    const flushTest: FlushableTest = { actual: actualSubscriptionLogs, ready: false };\n    this.flushTests.push(flushTest);\n    return {\n      toBe(marbles: string | string[]) {\n        const marblesArray: string[] = (typeof marbles === 'string') ? [marbles] : marbles;\n        flushTest.ready = true;\n        flushTest.expected = marblesArray.map(marbles =>\n          TestScheduler.parseMarblesAsSubscriptions(marbles)\n        );\n      }\n    };\n  }\n\n  flush() {\n    const hotObservables = this.hotObservables;\n    while (hotObservables.length > 0) {\n      hotObservables.shift().setup();\n    }\n\n    super.flush();\n    const readyFlushTests = this.flushTests.filter(test => test.ready);\n    while (readyFlushTests.length > 0) {\n      const test = readyFlushTests.shift();\n      this.assertDeepEqual(test.actual, test.expected);\n    }\n  }\n\n  static parseMarblesAsSubscriptions(marbles: string): SubscriptionLog {\n    if (typeof marbles !== 'string') {\n      return new SubscriptionLog(Number.POSITIVE_INFINITY);\n    }\n    const len = marbles.length;\n    let groupStart = -1;\n    let subscriptionFrame = Number.POSITIVE_INFINITY;\n    let unsubscriptionFrame = Number.POSITIVE_INFINITY;\n\n    for (let i = 0; i < len; i++) {\n      const frame = i * this.frameTimeFactor;\n      const c = marbles[i];\n      switch (c) {\n        case '-':\n        case ' ':\n          break;\n        case '(':\n          groupStart = frame;\n          break;\n        case ')':\n          groupStart = -1;\n          break;\n        case '^':\n          if (subscriptionFrame !== Number.POSITIVE_INFINITY) {\n            throw new Error('found a second subscription point \\'^\\' in a ' +\n              'subscription marble diagram. There can only be one.');\n          }\n          subscriptionFrame = groupStart > -1 ? groupStart : frame;\n          break;\n        case '!':\n          if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n            throw new Error('found a second subscription point \\'^\\' in a ' +\n              'subscription marble diagram. There can only be one.');\n          }\n          unsubscriptionFrame = groupStart > -1 ? groupStart : frame;\n          break;\n        default:\n          throw new Error('there can only be \\'^\\' and \\'!\\' markers in a ' +\n            'subscription marble diagram. Found instead \\'' + c + '\\'.');\n      }\n    }\n\n    if (unsubscriptionFrame < 0) {\n      return new SubscriptionLog(subscriptionFrame);\n    } else {\n      return new SubscriptionLog(subscriptionFrame, unsubscriptionFrame);\n    }\n  }\n\n  static parseMarbles(marbles: string,\n                      values?: any,\n                      errorValue?: any,\n                      materializeInnerObservables: boolean = false): TestMessage[] {\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('conventional marble diagrams cannot have the ' +\n        'unsubscription marker \"!\"');\n    }\n    const len = marbles.length;\n    const testMessages: TestMessage[] = [];\n    const subIndex = marbles.indexOf('^');\n    const frameOffset = subIndex === -1 ? 0 : (subIndex * -this.frameTimeFactor);\n    const getValue = typeof values !== 'object' ?\n      (x: any) => x :\n      (x: any) => {\n        // Support Observable-of-Observables\n        if (materializeInnerObservables && values[x] instanceof ColdObservable) {\n          return values[x].messages;\n        }\n        return values[x];\n      };\n    let groupStart = -1;\n\n    for (let i = 0; i < len; i++) {\n      const frame = i * this.frameTimeFactor + frameOffset;\n      let notification: Notification<any>;\n      const c = marbles[i];\n      switch (c) {\n        case '-':\n        case ' ':\n          break;\n        case '(':\n          groupStart = frame;\n          break;\n        case ')':\n          groupStart = -1;\n          break;\n        case '|':\n          notification = Notification.createComplete();\n          break;\n        case '^':\n          break;\n        case '#':\n          notification = Notification.createError(errorValue || 'error');\n          break;\n        default:\n          notification = Notification.createNext(getValue(c));\n          break;\n      }\n\n      if (notification) {\n        testMessages.push({ frame: groupStart > -1 ? groupStart : frame, notification });\n      }\n    }\n    return testMessages;\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class VirtualTimeScheduler extends AsyncScheduler {\n\n  protected static frameTimeFactor: number = 10;\n\n  public frame: number = 0;\n  public index: number = -1;\n\n  constructor(SchedulerAction: typeof AsyncAction = VirtualAction,\n              public maxFrames: number = Number.POSITIVE_INFINITY) {\n    super(SchedulerAction, () => this.frame);\n  }\n\n  /**\n   * Prompt the Scheduler to execute all of its queued actions, therefore\n   * clearing its queue.\n   * @return {void}\n   */\n  public flush(): void {\n\n    const {actions, maxFrames} = this;\n    let error: any, action: AsyncAction<any>;\n\n    while ((action = actions.shift()) && (this.frame = action.delay) <= maxFrames) {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    }\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class VirtualAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: VirtualTimeScheduler,\n              protected work: (state?: T) => void,\n              protected index: number = scheduler.index += 1) {\n    super(scheduler, work);\n    this.index = scheduler.index = index;\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    return !this.id ?\n      super.schedule(state, delay) : (\n      // If an action is rescheduled, we save allocations by mutating its state,\n      // pushing it to the end of the scheduler queue, and recycling the action.\n      // But since the VirtualTimeScheduler is used for testing, VirtualActions\n      // must be immutable so they can be inspected later.\n      <VirtualAction<T>> this.add(\n        new VirtualAction<T>(this.scheduler, this.work))\n      ).schedule(state, delay);\n  }\n\n  protected requestAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay: number = 0): any {\n    this.delay = scheduler.frame + delay;\n    const {actions} = scheduler;\n    actions.push(this);\n    actions.sort(VirtualAction.sortActions);\n    return true;\n  }\n\n  protected recycleAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay: number = 0): any {\n    return undefined;\n  }\n\n  public static sortActions<T>(a: VirtualAction<T>, b: VirtualAction<T>) {\n    if (a.delay === b.delay) {\n      if (a.index === b.index) {\n        return 0;\n      } else if (a.index > b.index) {\n        return 1;\n      } else {\n        return -1;\n      }\n    } else if (a.delay > b.delay) {\n      return 1;\n    } else {\n      return -1;\n    }\n  }\n}\n","import { Subscriber } from '../Subscriber';\nimport { $$rxSubscriber } from '../symbol/rxSubscriber';\nimport { PartialObserver, empty as emptyObserver } from '../Observer';\n\nexport function toSubscriber<T>(\n  nextOrObserver?: PartialObserver<T> | ((value: T) => void),\n  error?: (error: any) => void,\n  complete?: () => void): Subscriber<T> {\n\n  if (nextOrObserver) {\n    if (nextOrObserver instanceof Subscriber) {\n      return (<Subscriber<T>> nextOrObserver);\n    }\n\n    if (nextOrObserver[$$rxSubscriber]) {\n      return nextOrObserver[$$rxSubscriber]();\n    }\n  }\n\n  if (!nextOrObserver && !error && !complete) {\n    return new Subscriber(emptyObserver);\n  }\n\n  return new Subscriber(nextOrObserver, error, complete);\n}\n","import { PartialObserver } from './Observer';\nimport { Operator } from './Operator';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, AnonymousSubscription, TeardownLogic } from './Subscription';\nimport { root } from './util/root';\nimport { toSubscriber } from './util/toSubscriber';\nimport { IfObservable } from './observable/IfObservable';\nimport { ErrorObservable } from './observable/ErrorObservable';\nimport { $$observable } from './symbol/observable';\n\nexport interface Subscribable<T> {\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): AnonymousSubscription;\n}\n\nexport type SubscribableOrPromise<T> = Subscribable<T> | PromiseLike<T>;\nexport type ObservableInput<T> = SubscribableOrPromise<T> | ArrayLike<T>;\n\n/**\n * A representation of any set of values over any amount of time. This the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport class Observable<T> implements Subscribable<T> {\n\n  public _isScalar: boolean = false;\n\n  protected source: Observable<any>;\n  protected operator: Operator<any, T>;\n\n  /**\n   * @constructor\n   * @param {Function} subscribe the function that is  called when the Observable is\n   * initially subscribed to. This function is given a Subscriber, to which new values\n   * can be `next`ed, or an `error` method can be called to raise an error, or\n   * `complete` can be called to notify of a successful completion.\n   */\n  constructor(subscribe?: <R>(subscriber: Subscriber<R>) => TeardownLogic) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n  /**\n   * Creates a new cold Observable by calling the Observable constructor\n   * @static true\n   * @owner Observable\n   * @method create\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n   * @return {Observable} a new cold observable\n   */\n  static create: Function = <T>(subscribe?: <R>(subscriber: Subscriber<R>) => TeardownLogic) => {\n    return new Observable<T>(subscribe);\n  };\n\n  /**\n   * Creates a new Observable, with this Observable as the source, and the passed\n   * operator defined as the new observable's operator.\n   * @method lift\n   * @param {Operator} operator the operator defining the operation to take on the observable\n   * @return {Observable} a new observable with the Operator applied\n   */\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const observable = new Observable<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  /**\n   * Registers handlers for handling emitted values, error and completions from the observable, and\n   *  executes the observable's subscriber function, which will take action to set up the underlying data stream\n   * @method subscribe\n   * @param {PartialObserver|Function} observerOrNext (optional) either an observer defining all functions to be called,\n   *  or the first of three possible handlers, which is the handler for each value emitted from the observable.\n   * @param {Function} error (optional) a handler for a terminal event resulting from an error. If no error handler is provided,\n   *  the error will be thrown as unhandled\n   * @param {Function} complete (optional) a handler for a terminal event resulting from successful completion.\n   * @return {ISubscription} a subscription reference to the registered handlers\n   */\n  subscribe(): Subscription;\n  subscribe(observer: PartialObserver<T>): Subscription;\n  subscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): Subscription;\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): Subscription {\n\n    const { operator } = this;\n    const sink = toSubscriber(observerOrNext, error, complete);\n\n    if (operator) {\n      operator.call(sink, this);\n    } else {\n      sink.add(this._subscribe(sink));\n    }\n\n    if (sink.syncErrorThrowable) {\n      sink.syncErrorThrowable = false;\n      if (sink.syncErrorThrown) {\n        throw sink.syncErrorValue;\n      }\n    }\n\n    return sink;\n  }\n\n  /**\n   * @method forEach\n   * @param {Function} next a handler for each value emitted by the observable\n   * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n   * @return {Promise} a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   */\n  forEach(next: (value: T) => void, PromiseCtor?: typeof Promise): Promise<void> {\n    if (!PromiseCtor) {\n      if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n        PromiseCtor = root.Rx.config.Promise;\n      } else if (root.Promise) {\n        PromiseCtor = root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor<void>((resolve, reject) => {\n      const subscription = this.subscribe((value) => {\n        if (subscription) {\n          // if there is a subscription, then we can surmise\n          // the next handling is asynchronous. Any errors thrown\n          // need to be rejected explicitly and unsubscribe must be\n          // called manually\n          try {\n            next(value);\n          } catch (err) {\n            reject(err);\n            subscription.unsubscribe();\n          }\n        } else {\n          // if there is NO subscription, then we're getting a nexted\n          // value synchronously during subscription. We can just call it.\n          // If it errors, Observable's `subscribe` will ensure the\n          // unsubscription logic is called, then synchronously rethrow the error.\n          // After that, Promise will trap the error and send it\n          // down the rejection path.\n          next(value);\n        }\n      }, reject, resolve);\n    });\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    return this.source.subscribe(subscriber);\n  }\n\n  // `if` and `throw` are special snow flakes, the compiler sees them as reserved words\n  static if: typeof IfObservable.create;\n  static throw: typeof ErrorObservable.create;\n\n  /**\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n   * @method Symbol.observable\n   * @return {Observable} this instance of the observable\n   */\n  [$$observable]() {\n    return this;\n  }\n}\n","export interface NextObserver<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error?: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface ErrorObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface CompletionObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error?: (err: any) => void;\n  complete: () => void;\n}\n\nexport type PartialObserver<T> = NextObserver<T> | ErrorObserver<T> | CompletionObserver<T>;\n\nexport interface Observer<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error: (err: any) => void;\n  complete: () => void;\n}\n\nexport const empty: Observer<any> = {\n  closed: true,\n  next(value: any): void { /* noop */},\n  error(err: any): void { throw err; },\n  complete(): void { /*noop*/ }\n};\n","import { isFunction } from './util/isFunction';\nimport { Observer, PartialObserver } from './Observer';\nimport { Subscription } from './Subscription';\nimport { empty as emptyObserver } from './Observer';\nimport { $$rxSubscriber } from './symbol/rxSubscriber';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n\n  [$$rxSubscriber]() { return this; }\n\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   */\n  static create<T>(next?: (x?: T) => void,\n                   error?: (e?: any) => void,\n                   complete?: () => void): Subscriber<T> {\n    const subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  }\n\n  public syncErrorValue: any = null;\n  public syncErrorThrown: boolean = false;\n  public syncErrorThrowable: boolean = false;\n\n  protected isStopped: boolean = false;\n  protected destination: PartialObserver<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  /**\n   * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n   * defined Observer or a `next` callback function.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   */\n  constructor(destinationOrNext?: PartialObserver<any> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    switch (arguments.length) {\n      case 0:\n        this.destination = emptyObserver;\n        break;\n      case 1:\n        if (!destinationOrNext) {\n          this.destination = emptyObserver;\n          break;\n        }\n        if (typeof destinationOrNext === 'object') {\n          if (destinationOrNext instanceof Subscriber) {\n            this.destination = (<Subscriber<any>> destinationOrNext);\n            (<any> this.destination).add(this);\n          } else {\n            this.syncErrorThrowable = true;\n            this.destination = new SafeSubscriber<T>(this, <PartialObserver<any>> destinationOrNext);\n          }\n          break;\n        }\n      default:\n        this.syncErrorThrowable = true;\n        this.destination = new SafeSubscriber<T>(this, <((value: T) => void)> destinationOrNext, error, complete);\n        break;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached {@link Error}. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (this.closed) {\n      return;\n    }\n    this.isStopped = true;\n    super.unsubscribe();\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.destination.complete();\n    this.unsubscribe();\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SafeSubscriber<T> extends Subscriber<T> {\n\n  private _context: any;\n\n  constructor(private _parent: Subscriber<T>,\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    let next: ((value: T) => void);\n    let context: any = this;\n\n    if (isFunction(observerOrNext)) {\n      next = (<((value: T) => void)> observerOrNext);\n    } else if (observerOrNext) {\n      context = observerOrNext;\n      next = (<PartialObserver<T>> observerOrNext).next;\n      error = (<PartialObserver<T>> observerOrNext).error;\n      complete = (<PartialObserver<T>> observerOrNext).complete;\n      if (isFunction(context.unsubscribe)) {\n        this.add(<() => void> context.unsubscribe.bind(context));\n      }\n      context.unsubscribe = this.unsubscribe.bind(this);\n    }\n\n    this._context = context;\n    this._next = next;\n    this._error = error;\n    this._complete = complete;\n  }\n\n  next(value?: T): void {\n    if (!this.isStopped && this._next) {\n      const { _parent } = this;\n      if (!_parent.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parent, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  error(err?: any): void {\n    if (!this.isStopped) {\n      const { _parent } = this;\n      if (this._error) {\n        if (!_parent.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parent, this._error, err);\n          this.unsubscribe();\n        }\n      } else if (!_parent.syncErrorThrowable) {\n        this.unsubscribe();\n        throw err;\n      } else {\n        _parent.syncErrorValue = err;\n        _parent.syncErrorThrown = true;\n        this.unsubscribe();\n      }\n    }\n  }\n\n  complete(): void {\n    if (!this.isStopped) {\n      const { _parent } = this;\n      if (this._complete) {\n        if (!_parent.syncErrorThrowable) {\n          this.__tryOrUnsub(this._complete);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parent, this._complete);\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  private __tryOrUnsub(fn: Function, value?: any): void {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n      throw err;\n    }\n  }\n\n  private __tryOrSetError(parent: Subscriber<T>, fn: Function, value?: any): boolean {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      parent.syncErrorValue = err;\n      parent.syncErrorThrown = true;\n      return true;\n    }\n    return false;\n  }\n\n  protected _unsubscribe(): void {\n    const { _parent } = this;\n    this._context = null;\n    this._parent = null;\n    _parent.unsubscribe();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map<T, R>(this: Observable<T>, project: (value: T, index: number) => R, thisArg?: any): Observable<R> {\n  if (typeof project !== 'function') {\n    throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n  }\n  return this.lift(new MapOperator(project, thisArg));\n}\n\nexport class MapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => R, private thisArg: any) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapSubscriber<T, R> extends Subscriber<T> {\n  count: number = 0;\n  private thisArg: any;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => R,\n              thisArg: any) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  // NOTE: This looks unoptimized, but it's actually purposefully NOT\n  // using try/catch optimizations.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.project.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { root } from '../../util/root';\nimport { tryCatch } from '../../util/tryCatch';\nimport { errorObject } from '../../util/errorObject';\nimport { Observable } from '../../Observable';\nimport { Subscriber } from '../../Subscriber';\nimport { TeardownLogic } from '../../Subscription';\nimport { MapOperator } from '../../operator/map';\n\nexport interface AjaxRequest {\n  url?: string;\n  body?: any;\n  user?: string;\n  async?: boolean;\n  method?: string;\n  headers?: Object;\n  timeout?: number;\n  password?: string;\n  hasContent?: boolean;\n  crossDomain?: boolean;\n  withCredentials?: boolean;\n  createXHR?: () => XMLHttpRequest;\n  progressSubscriber?: Subscriber<any>;\n  responseType?: string;\n}\n\nfunction getCORSRequest(): XMLHttpRequest {\n  if (root.XMLHttpRequest) {\n    const xhr = new root.XMLHttpRequest();\n    if ('withCredentials' in xhr) {\n      xhr.withCredentials = !!this.withCredentials;\n    }\n    return xhr;\n  } else if (!!root.XDomainRequest) {\n    return new root.XDomainRequest();\n  } else {\n    throw new Error('CORS is not supported by your browser');\n  }\n}\n\nfunction getXMLHttpRequest(): XMLHttpRequest {\n  if (root.XMLHttpRequest) {\n    return new root.XMLHttpRequest();\n  } else {\n    let progId: string;\n    try {\n      const progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'];\n      for (let i = 0; i < 3; i++) {\n        try {\n          progId = progIds[i];\n          if (new root.ActiveXObject(progId)) {\n            break;\n          }\n        } catch (e) {\n          //suppress exceptions\n        }\n      }\n      return new root.ActiveXObject(progId);\n    } catch (e) {\n      throw new Error('XMLHttpRequest is not supported by your browser');\n    }\n  }\n}\n\nexport interface AjaxCreationMethod {\n  (urlOrRequest: string | AjaxRequest): Observable<AjaxResponse>;\n  get(url: string, headers?: Object): Observable<AjaxResponse>;\n  post(url: string, body?: any, headers?: Object): Observable<AjaxResponse>;\n  put(url: string, body?: any, headers?: Object): Observable<AjaxResponse>;\n  delete(url: string, headers?: Object): Observable<AjaxResponse>;\n  getJSON<T, R>(url: string, headers?: Object): Observable<R>;\n}\n\nexport function ajaxGet(url: string, headers: Object = null) {\n  return new AjaxObservable<AjaxResponse>({ method: 'GET', url, headers });\n};\n\nexport function ajaxPost(url: string, body?: any, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'POST', url, body, headers });\n};\n\nexport function ajaxDelete(url: string, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'DELETE', url, headers });\n};\n\nexport function ajaxPut(url: string, body?: any, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'PUT', url, body, headers });\n};\n\nexport function ajaxGetJSON<T>(url: string, headers?: Object): Observable<T> {\n  return new AjaxObservable<AjaxResponse>({ method: 'GET', url, responseType: 'json', headers })\n    .lift<T>(new MapOperator<AjaxResponse, T>((x: AjaxResponse, index: number): T => x.response, null));\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class AjaxObservable<T> extends Observable<T> {\n  /**\n   * Creates an observable for an Ajax request with either a request object with\n   * url, headers, etc or a string for a URL.\n   *\n   * @example\n   * source = Rx.Observable.ajax('/products');\n   * source = Rx.Observable.ajax({ url: 'products', method: 'GET' });\n   *\n   * @param {string|Object} request Can be one of the following:\n   *   A string of the URL to make the Ajax call.\n   *   An object with the following properties\n   *   - url: URL of the request\n   *   - body: The body of the request\n   *   - method: Method of the request, such as GET, POST, PUT, PATCH, DELETE\n   *   - async: Whether the request is async\n   *   - headers: Optional headers\n   *   - crossDomain: true if a cross domain request, else false\n   *   - createXHR: a function to override if you need to use an alternate\n   *   XMLHttpRequest implementation.\n   *   - resultSelector: a function to use to alter the output value type of\n   *   the Observable. Gets {@link AjaxResponse} as an argument.\n   * @return {Observable} An observable sequence containing the XMLHttpRequest.\n   * @static true\n   * @name ajax\n   * @owner Observable\n  */\n  static create: AjaxCreationMethod = (() => {\n    const create: any = (urlOrRequest: string | AjaxRequest) => {\n      return new AjaxObservable(urlOrRequest);\n    };\n\n    create.get = ajaxGet;\n    create.post = ajaxPost;\n    create.delete = ajaxDelete;\n    create.put = ajaxPut;\n    create.getJSON = ajaxGetJSON;\n\n    return <AjaxCreationMethod>create;\n  })();\n\n  private request: AjaxRequest;\n\n  constructor(urlOrRequest: string | AjaxRequest) {\n    super();\n\n    const request: AjaxRequest = {\n      async: true,\n      createXHR: function() {\n        return this.crossDomain ? getCORSRequest.call(this) : getXMLHttpRequest();\n      },\n      crossDomain: false,\n      withCredentials: false,\n      headers: {},\n      method: 'GET',\n      responseType: 'json',\n      timeout: 0\n    };\n\n    if (typeof urlOrRequest === 'string') {\n      request.url = urlOrRequest;\n    } else {\n      for (const prop in urlOrRequest) {\n        if (urlOrRequest.hasOwnProperty(prop)) {\n          request[prop] = urlOrRequest[prop];\n        }\n      }\n    }\n\n    this.request = request;\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    return new AjaxSubscriber(subscriber, this.request);\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AjaxSubscriber<T> extends Subscriber<Event> {\n  private xhr: XMLHttpRequest;\n  private done: boolean = false;\n\n  constructor(destination: Subscriber<T>, public request: AjaxRequest) {\n    super(destination);\n\n    const headers = request.headers = request.headers || {};\n\n    // force CORS if requested\n    if (!request.crossDomain && !headers['X-Requested-With']) {\n      headers['X-Requested-With'] = 'XMLHttpRequest';\n    }\n\n    // ensure content type is set\n    if (!('Content-Type' in headers) && !(root.FormData && request.body instanceof root.FormData) && typeof request.body !== 'undefined') {\n      headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';\n    }\n\n    // properly serialize body\n    request.body = this.serializeBody(request.body, request.headers['Content-Type']);\n\n    this.send();\n  }\n\n  next(e: Event): void {\n    this.done = true;\n    const { xhr, request, destination } = this;\n    const response = new AjaxResponse(e, xhr, request);\n\n    destination.next(response);\n  }\n\n  private send(): XMLHttpRequest {\n    const {\n      request,\n      request: { user, method, url, async, password, headers, body }\n    } = this;\n    const createXHR = request.createXHR;\n    const xhr: XMLHttpRequest = tryCatch(createXHR).call(request);\n\n    if (<any>xhr === errorObject) {\n      this.error(errorObject.e);\n    } else {\n      this.xhr = xhr;\n\n      // open XHR first\n      let result: any;\n      if (user) {\n        result = tryCatch(xhr.open).call(xhr, method, url, async, user, password);\n      } else {\n        result = tryCatch(xhr.open).call(xhr, method, url, async);\n      }\n\n      if (result === errorObject) {\n        this.error(errorObject.e);\n        return null;\n      }\n\n      // timeout and responseType can be set once the XHR is open\n      xhr.timeout = request.timeout;\n      xhr.responseType = request.responseType;\n\n      // set headers\n      this.setHeaders(xhr, headers);\n\n      // now set up the events\n      this.setupEvents(xhr, request);\n\n      // finally send the request\n      if (body) {\n        xhr.send(body);\n      } else {\n        xhr.send();\n      }\n    }\n\n    return xhr;\n  }\n\n  private serializeBody(body: any, contentType?: string) {\n    if (!body || typeof body === 'string') {\n      return body;\n    } else if (root.FormData && body instanceof root.FormData) {\n      return body;\n    }\n\n    if (contentType) {\n      const splitIndex = contentType.indexOf(';');\n      if (splitIndex !== -1) {\n        contentType = contentType.substring(0, splitIndex);\n      }\n    }\n\n    switch (contentType) {\n      case 'application/x-www-form-urlencoded':\n        return Object.keys(body).map(key => `${encodeURI(key)}=${encodeURI(body[key])}`).join('&');\n      case 'application/json':\n        return JSON.stringify(body);\n      default:\n        return body;\n    }\n  }\n\n  private setHeaders(xhr: XMLHttpRequest, headers: Object) {\n    for (let key in headers) {\n      if (headers.hasOwnProperty(key)) {\n        xhr.setRequestHeader(key, headers[key]);\n      }\n    }\n  }\n\n  private setupEvents(xhr: XMLHttpRequest, request: AjaxRequest) {\n    const progressSubscriber = request.progressSubscriber;\n\n    xhr.ontimeout = function xhrTimeout(e) {\n      const {subscriber, progressSubscriber, request } = (<any>xhrTimeout);\n      if (progressSubscriber) {\n        progressSubscriber.error(e);\n      }\n      subscriber.error(new AjaxTimeoutError(this, request)); //TODO: Make betterer.\n    };\n    (<any>xhr.ontimeout).request = request;\n    (<any>xhr.ontimeout).subscriber = this;\n    (<any>xhr.ontimeout).progressSubscriber = progressSubscriber;\n\n    if (xhr.upload && 'withCredentials' in xhr && root.XDomainRequest) {\n      if (progressSubscriber) {\n        xhr.onprogress = function xhrProgress(e) {\n          const { progressSubscriber } = (<any>xhrProgress);\n          progressSubscriber.next(e);\n        };\n        (<any>xhr.onprogress).progressSubscriber = progressSubscriber;\n      }\n\n      xhr.onerror = function xhrError(e) {\n        const { progressSubscriber, subscriber, request } = (<any>xhrError);\n        if (progressSubscriber) {\n          progressSubscriber.error(e);\n        }\n        subscriber.error(new AjaxError('ajax error', this, request));\n      };\n      (<any>xhr.onerror).request = request;\n      (<any>xhr.onerror).subscriber = this;\n      (<any>xhr.onerror).progressSubscriber = progressSubscriber;\n    }\n\n    xhr.onreadystatechange = function xhrReadyStateChange(e) {\n      const { subscriber, progressSubscriber, request } = (<any>xhrReadyStateChange);\n      if (this.readyState === 4) {\n        // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n        let status: number = this.status === 1223 ? 204 : this.status;\n        let response: any = (this.responseType === 'text' ?  (\n          this.response || this.responseText) : this.response);\n\n        // fix status code when it is 0 (0 status is undocumented).\n        // Occurs when accessing file resources or on Android 4.1 stock browser\n        // while retrieving files from application cache.\n        if (status === 0) {\n          status = response ? 200 : 0;\n        }\n\n        if (200 <= status && status < 300) {\n          if (progressSubscriber) {\n            progressSubscriber.complete();\n          }\n          subscriber.next(e);\n          subscriber.complete();\n        } else {\n          if (progressSubscriber) {\n            progressSubscriber.error(e);\n          }\n          subscriber.error(new AjaxError('ajax error ' + status, this, request));\n        }\n      }\n    };\n    (<any>xhr.onreadystatechange).subscriber = this;\n    (<any>xhr.onreadystatechange).progressSubscriber = progressSubscriber;\n    (<any>xhr.onreadystatechange).request = request;\n  }\n\n  unsubscribe() {\n    const { done, xhr } = this;\n    if (!done && xhr && xhr.readyState !== 4 && typeof xhr.abort === 'function') {\n      xhr.abort();\n    }\n    super.unsubscribe();\n  }\n}\n\n/**\n * A normalized AJAX response.\n *\n * @see {@link ajax}\n *\n * @class AjaxResponse\n */\nexport class AjaxResponse {\n  /** @type {number} The HTTP status code */\n  status: number;\n\n  /** @type {string|ArrayBuffer|Document|object|any} The response data */\n  response: any;\n\n  /** @type {string} The raw responseText */\n  responseText: string;\n\n  /** @type {string} The responseType (e.g. 'json', 'arraybuffer', or 'xml') */\n  responseType: string;\n\n  constructor(public originalEvent: Event, public xhr: XMLHttpRequest, public request: AjaxRequest) {\n    this.status = xhr.status;\n    this.responseType = xhr.responseType || request.responseType;\n\n    switch (this.responseType) {\n      case 'json':\n        if ('response' in xhr) {\n          //IE does not support json as responseType, parse it internally\n          this.response = xhr.responseType ? xhr.response : JSON.parse(xhr.response || xhr.responseText || 'null');\n        } else {\n          this.response = JSON.parse(xhr.responseText || 'null');\n        }\n        break;\n      case 'xml':\n        this.response = xhr.responseXML;\n        break;\n      case 'text':\n      default:\n        this.response = ('response' in xhr) ? xhr.response : xhr.responseText;\n        break;\n    }\n  }\n}\n\n/**\n * A normalized AJAX error.\n *\n * @see {@link ajax}\n *\n * @class AjaxError\n */\nexport class AjaxError extends Error {\n  /** @type {XMLHttpRequest} The XHR instance associated with the error */\n  xhr: XMLHttpRequest;\n\n  /** @type {AjaxRequest} The AjaxRequest associated with the error */\n  request: AjaxRequest;\n\n  /** @type {number} The HTTP status code */\n  status: number;\n\n  constructor(message: string, xhr: XMLHttpRequest, request: AjaxRequest) {\n    super(message);\n    this.message = message;\n    this.xhr = xhr;\n    this.request = request;\n    this.status = xhr.status;\n  }\n}\n\n/**\n * @see {@link ajax}\n *\n * @class AjaxTimeoutError\n */\nexport class AjaxTimeoutError extends AjaxError {\n  constructor(xhr: XMLHttpRequest, request: AjaxRequest) {\n    super('ajax timeout', xhr, request);\n  }\n}\n","/**\nSome credit for this helper goes to http://github.com/YuzuJS/setImmediate\n*/\n\nimport {  root  } from './root';\n\nexport class ImmediateDefinition {\n  setImmediate: (cb: () => void) => number;\n\n  clearImmediate: (handle: number) => void;\n\n  private identify(o: any): string {\n    return this.root.Object.prototype.toString.call(o);\n  }\n\n  tasksByHandle: any;\n\n  nextHandle: number;\n\n  currentlyRunningATask: boolean;\n\n  constructor(private root: any) {\n    if (root.setImmediate && typeof root.setImmediate === 'function') {\n      this.setImmediate = root.setImmediate.bind(root);\n      this.clearImmediate = root.clearImmediate.bind(root);\n    } else {\n      this.nextHandle = 1;\n      this.tasksByHandle = {};\n      this.currentlyRunningATask = false;\n\n      // Don't get fooled by e.g. browserify environments.\n      if (this.canUseProcessNextTick()) {\n        // For Node.js before 0.9\n        this.setImmediate = this.createProcessNextTickSetImmediate();\n      } else if (this.canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        this.setImmediate = this.createPostMessageSetImmediate();\n      } else if (this.canUseMessageChannel()) {\n        // For web workers, where supported\n        this.setImmediate = this.createMessageChannelSetImmediate();\n      } else if (this.canUseReadyStateChange()) {\n        // For IE 6–8\n        this.setImmediate = this.createReadyStateChangeSetImmediate();\n      } else {\n        // For older browsers\n        this.setImmediate = this.createSetTimeoutSetImmediate();\n      }\n\n      let ci = function clearImmediate(handle: any) {\n        delete (<any>clearImmediate).instance.tasksByHandle[handle];\n      };\n\n      (<any>ci).instance = this;\n\n      this.clearImmediate = ci;\n    }\n  }\n\n  canUseProcessNextTick() {\n    return this.identify(this.root.process) === '[object process]';\n  }\n\n  canUseMessageChannel() {\n    return Boolean(this.root.MessageChannel);\n  }\n\n  canUseReadyStateChange() {\n    const document = this.root.document;\n    return Boolean(document && 'onreadystatechange' in document.createElement('script'));\n  }\n\n  canUsePostMessage() {\n    const root = this.root;\n    // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n    // where `root.postMessage` means something completely different and can't be used for this purpose.\n    if (root.postMessage && !root.importScripts) {\n      let postMessageIsAsynchronous = true;\n      let oldOnMessage = root.onmessage;\n      root.onmessage = function() {\n        postMessageIsAsynchronous = false;\n      };\n      root.postMessage('', '*');\n      root.onmessage = oldOnMessage;\n      return postMessageIsAsynchronous;\n    }\n\n    return false;\n  }\n\n  // This function accepts the same arguments as setImmediate, but\n  // returns a function that requires no arguments.\n  partiallyApplied(handler: any, ...args: any[]) {\n    let fn = function result () {\n      const { handler, args } = <any>result;\n      if (typeof handler === 'function') {\n        handler.apply(undefined, args);\n      } else {\n        (new Function('' + handler))();\n      }\n    };\n\n    (<any>fn).handler = handler;\n    (<any>fn).args = args;\n\n    return fn;\n  }\n\n  addFromSetImmediateArguments(args: any[]) {\n    this.tasksByHandle[this.nextHandle] = this.partiallyApplied.apply(undefined, args);\n    return this.nextHandle++;\n  }\n\n  createProcessNextTickSetImmediate() {\n    let fn = function setImmediate() {\n      const { instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.process.nextTick(instance.partiallyApplied(instance.runIfPresent, handle));\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createPostMessageSetImmediate() {\n    // Installs an event handler on `global` for the `message` event: see\n    // * https://developer.mozilla.org/en/DOM/window.postMessage\n    // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n    const root = this.root;\n\n    let messagePrefix = 'setImmediate$' + root.Math.random() + '$';\n    let onGlobalMessage = function globalMessageHandler(event: any) {\n      const instance = (<any>globalMessageHandler).instance;\n      if (event.source === root &&\n        typeof event.data === 'string' &&\n        event.data.indexOf(messagePrefix) === 0) {\n        instance.runIfPresent(+event.data.slice(messagePrefix.length));\n      }\n    };\n    (<any>onGlobalMessage).instance = this;\n\n    root.addEventListener('message', onGlobalMessage, false);\n\n    let fn = function setImmediate() {\n      const { messagePrefix, instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.postMessage(messagePrefix + handle, '*');\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n    (<any>fn).messagePrefix = messagePrefix;\n\n    return fn;\n  }\n\n  runIfPresent(handle: any) {\n    // From the spec: 'Wait until any invocations of this algorithm started before this one have completed.'\n    // So if we're currently running a task, we'll need to delay this invocation.\n    if (this.currentlyRunningATask) {\n      // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n      // 'too much recursion' error.\n      this.root.setTimeout(this.partiallyApplied(this.runIfPresent, handle), 0);\n    } else {\n      let task = this.tasksByHandle[handle];\n      if (task) {\n        this.currentlyRunningATask = true;\n        try {\n          task();\n        } finally {\n          this.clearImmediate(handle);\n          this.currentlyRunningATask = false;\n        }\n      }\n    }\n  }\n\n  createMessageChannelSetImmediate() {\n    let channel = new this.root.MessageChannel();\n    channel.port1.onmessage = (event: any) => {\n      let handle = event.data;\n      this.runIfPresent(handle);\n    };\n\n    let fn = function setImmediate() {\n      const { channel, instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      channel.port2.postMessage(handle);\n      return handle;\n    };\n\n    (<any>fn).channel = channel;\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createReadyStateChangeSetImmediate() {\n    let fn = function setImmediate() {\n      const instance = (<any>setImmediate).instance;\n      const root = instance.root;\n      const doc = root.document;\n      const html = doc.documentElement;\n\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n      let script = doc.createElement('script');\n      script.onreadystatechange = () => {\n        instance.runIfPresent(handle);\n        script.onreadystatechange = null;\n        html.removeChild(script);\n        script = null;\n      };\n      html.appendChild(script);\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createSetTimeoutSetImmediate() {\n    let fn = function setImmediate() {\n      const instance = (<any>setImmediate).instance;\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.setTimeout(instance.partiallyApplied(instance.runIfPresent, handle), 0);\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n}\nexport const Immediate = new ImmediateDefinition(root);\n","import { Immediate } from '../util/Immediate';\nimport { AsyncAction } from './AsyncAction';\nimport { AsapScheduler } from './AsapScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsapAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: AsapScheduler,\n              protected work: (state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If a microtask has already been scheduled, don't schedule another\n    // one. If a microtask hasn't been scheduled yet, schedule one now. Return\n    // the current scheduled microtask id.\n    return scheduler.scheduled || (scheduler.scheduled = Immediate.setImmediate(\n      scheduler.flush.bind(scheduler, null)\n    ));\n  }\n  protected recycleAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue is empty, cancel the requested microtask and\n    // set the scheduled flag to undefined so the next AsapAction will schedule\n    // its own.\n    if (scheduler.actions.length === 0) {\n      Immediate.clearImmediate(id);\n      scheduler.scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class AsapScheduler extends AsyncScheduler {\n  public flush(action?: AsyncAction<any>): void {\n\n    this.active = true;\n    this.scheduled = undefined;\n\n    const {actions} = this;\n    let error: any;\n    let index: number = -1;\n    let count: number = actions.length;\n    action = action || actions.shift();\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (++index < count && (action = actions.shift()));\n\n    this.active = false;\n\n    if (error) {\n      while (++index < count && (action = actions.shift())) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AsapAction } from './AsapAction';\nimport { AsapScheduler } from './AsapScheduler';\n\nexport const asap = new AsapScheduler(AsapAction);\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport const async = new AsyncScheduler(AsyncAction);\n","import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { QueueScheduler } from './QueueScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class QueueAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: QueueScheduler,\n              protected work: (state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (delay > 0) {\n      return super.schedule(state, delay);\n    }\n    this.delay = delay;\n    this.state = state;\n    this.scheduler.flush(this);\n    return this;\n  }\n\n  public execute(state: T, delay: number): any {\n    return (delay > 0 || this.closed) ?\n      super.execute(state, delay) :\n      this._execute(state, delay) ;\n  }\n\n  protected requestAsyncId(scheduler: QueueScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Otherwise flush the scheduler starting with this action.\n    return scheduler.flush(this);\n  }\n}\n","import { AsyncScheduler } from './AsyncScheduler';\n\nexport class QueueScheduler extends AsyncScheduler {\n}\n","import { QueueAction } from './QueueAction';\nimport { QueueScheduler } from './QueueScheduler';\n\nexport const queue = new QueueScheduler(QueueAction);\n","export const isArray = Array.isArray || (<T>(x: any): x is T[] => x && typeof x.length === 'number');\n","export function isObject(x: any): x is Object {\n  return x != null && typeof x === 'object';\n}\n","export function isFunction(x: any): x is Function {\n  return typeof x === 'function';\n}\n","import { errorObject } from './errorObject';\n\nlet tryCatchTarget: Function;\n\nfunction tryCatcher(): any {\n  try {\n    return tryCatchTarget.apply(this, arguments);\n  } catch (e) {\n    errorObject.e = e;\n    return errorObject;\n  }\n}\n\nexport function tryCatch<T extends Function>(fn: T): T {\n  tryCatchTarget = fn;\n  return <any>tryCatcher;\n};\n","// typeof any so that it we don't have to cast when comparing a result to the error object\nexport var errorObject: any = { e: {} };","/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport class UnsubscriptionError extends Error {\n  constructor(public errors: any[]) {\n    super();\n    const err: any = Error.call(this, errors ?\n      `${errors.length} errors occurred during unsubscription:\n  ${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}` : '');\n    (<any> this).name = err.name = 'UnsubscriptionError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { tryCatch } from './util/tryCatch';\nimport { errorObject } from './util/errorObject';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\n\nexport interface AnonymousSubscription {\n  unsubscribe(): void;\n}\n\nexport type TeardownLogic = AnonymousSubscription | Function | void;\n\nexport interface ISubscription extends AnonymousSubscription {\n  unsubscribe(): void;\n  closed: boolean;\n}\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements ISubscription {\n  public static EMPTY: Subscription = (function(empty: any){\n    empty.closed = true;\n    return empty;\n  }(new Subscription()));\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   * @type {boolean}\n   */\n  public closed: boolean = false;\n\n  /**\n   * @param {function(): void} [unsubscribe] A function describing how to\n   * perform the disposal of resources when the `unsubscribe` method is called.\n   */\n  constructor(unsubscribe?: () => void) {\n    if (unsubscribe) {\n      (<any> this)._unsubscribe = unsubscribe;\n    }\n  }\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let hasErrors = false;\n    let errors: any[];\n\n    if (this.closed) {\n      return;\n    }\n\n    this.closed = true;\n\n    const { _unsubscribe, _subscriptions } = (<any> this);\n\n    (<any> this)._subscriptions = null;\n\n    if (isFunction(_unsubscribe)) {\n      let trial = tryCatch(_unsubscribe).call(this);\n      if (trial === errorObject) {\n        hasErrors = true;\n        (errors = errors || []).push(errorObject.e);\n      }\n    }\n\n    if (isArray(_subscriptions)) {\n\n      let index = -1;\n      const len = _subscriptions.length;\n\n      while (++index < len) {\n        const sub = _subscriptions[index];\n        if (isObject(sub)) {\n          let trial = tryCatch(sub.unsubscribe).call(sub);\n          if (trial === errorObject) {\n            hasErrors = true;\n            errors = errors || [];\n            let err = errorObject.e;\n            if (err instanceof UnsubscriptionError) {\n              errors = errors.concat(err.errors);\n            } else {\n              errors.push(err);\n            }\n          }\n        }\n      }\n    }\n\n    if (hasErrors) {\n      throw new UnsubscriptionError(errors);\n    }\n  }\n\n  /**\n   * Adds a tear down to be called during the unsubscribe() of this\n   * Subscription.\n   *\n   * If the tear down being added is a subscription that is already\n   * unsubscribed, is the same reference `add` is being called on, or is\n   * `Subscription.EMPTY`, it will not be added.\n   *\n   * If this subscription is already in an `closed` state, the passed\n   * tear down logic will be executed immediately.\n   *\n   * @param {TeardownLogic} teardown The additional logic to execute on\n   * teardown.\n   * @return {Subscription} Returns the Subscription used or created to be\n   * added to the inner subscriptions list. This Subscription can be used with\n   * `remove()` to remove the passed teardown logic from the inner subscriptions\n   * list.\n   */\n  add(teardown: TeardownLogic): Subscription {\n    if (!teardown || (teardown === Subscription.EMPTY)) {\n      return Subscription.EMPTY;\n    }\n\n    if (teardown === this) {\n      return this;\n    }\n\n    let sub = (<Subscription> teardown);\n\n    switch (typeof teardown) {\n      case 'function':\n        sub = new Subscription(<(() => void) > teardown);\n      case 'object':\n        if (sub.closed || typeof sub.unsubscribe !== 'function') {\n          break;\n        } else if (this.closed) {\n          sub.unsubscribe();\n        } else {\n          ((<any> this)._subscriptions || ((<any> this)._subscriptions = [])).push(sub);\n        }\n        break;\n      default:\n        throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n    }\n\n    return sub;\n  }\n\n  /**\n   * Removes a Subscription from the internal list of subscriptions that will\n   * unsubscribe during the unsubscribe process of this Subscription.\n   * @param {Subscription} subscription The subscription to remove.\n   * @return {void}\n   */\n  remove(subscription: Subscription): void {\n\n    // HACK: This might be redundant because of the logic in `add()`\n    if (subscription == null   || (\n        subscription === this) || (\n        subscription === Subscription.EMPTY)) {\n      return;\n    }\n\n    const subscriptions = (<any> this)._subscriptions;\n\n    if (subscriptions) {\n      const subscriptionIndex = subscriptions.indexOf(subscription);\n      if (subscriptionIndex !== -1) {\n        subscriptions.splice(subscriptionIndex, 1);\n      }\n    }\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { Subscription } from '../Subscription';\n\n/**\n * A unit of work to be executed in a {@link Scheduler}. An action is typically\n * created from within a Scheduler and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nexport class Action<T> extends Subscription {\n  constructor(scheduler: Scheduler, work: (state?: T) => void) {\n    super();\n  }\n  /**\n   * Schedules this action on its parent Scheduler for execution. May be passed\n   * some context object, `state`. May happen at some point in the future,\n   * according to the `delay` parameter, if specified.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler.\n   * @return {void}\n   */\n  public schedule(state?: T, delay: number = 0): Subscription {\n    return this;\n  }\n}\n","import { root } from '../util/root';\nimport { Action } from './Action';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsyncAction<T> extends Action<T> {\n\n  public id: any;\n  public state: T;\n  public delay: number;\n  protected pending: boolean = false;\n\n  constructor(protected scheduler: AsyncScheduler,\n              protected work: (state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n\n    if (this.closed) {\n      return this;\n     }\n\n    // Always replace the current state with the new state.\n    this.state = state;\n\n    // Set the pending flag indicating that this action has been scheduled, or\n    // has recursively rescheduled itself.\n    this.pending = true;\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n\n    //\n    // Important implementation note:\n    //\n    // Actions only execute once by default, unless rescheduled from within the\n    // scheduled callback. This allows us to implement single and repeat\n    // actions via the same code path, without adding API surface area, as well\n    // as mimic traditional recursion but across asynchronous boundaries.\n    //\n    // However, JS runtimes and timers distinguish between intervals achieved by\n    // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n    // serial `setTimeout` calls can be individually delayed, which delays\n    // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n    // guarantee the interval callback will be invoked more precisely to the\n    // interval period, regardless of load.\n    //\n    // Therefore, we use `setInterval` to schedule single and repeat actions.\n    // If the action reschedules itself with the same delay, the interval is not\n    // canceled. If the action doesn't reschedule, or reschedules with a\n    // different delay, the interval will be canceled after scheduled callback\n    // execution.\n    //\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, delay);\n    }\n\n    this.delay = delay;\n    // If this action has already an async Id, don't request a new one.\n    this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n\n    return this;\n  }\n\n  protected requestAsyncId(scheduler: AsyncScheduler, id?: any, delay: number = 0): any {\n    return root.setInterval(scheduler.flush.bind(scheduler, this), delay);\n  }\n\n  protected recycleAsyncId(scheduler: AsyncScheduler, id: any, delay: number = 0): any {\n    // If this action is rescheduled with the same delay time, don't clear the interval id.\n    if (delay !== null && this.delay === delay) {\n      return id;\n    }\n    // Otherwise, if the action's delay time is different from the current delay,\n    // clear the interval id\n    return root.clearInterval(id) && undefined || undefined;\n  }\n\n  /**\n   * Immediately executes this action and the `work` it contains.\n   * @return {any}\n   */\n  public execute(state: T, delay: number): any {\n\n    if (this.closed) {\n      return new Error('executing a cancelled action');\n    }\n\n    this.pending = false;\n    const error = this._execute(state, delay);\n    if (error) {\n      return error;\n    } else if (this.pending === false && this.id != null) {\n      // Dequeue if the action didn't reschedule itself. Don't call\n      // unsubscribe(), because the action could reschedule later.\n      // For example:\n      // ```\n      // scheduler.schedule(function doWork(counter) {\n      //   /* ... I'm a busy worker bee ... */\n      //   var originalAction = this;\n      //   /* wait 100ms before rescheduling the action */\n      //   setTimeout(function () {\n      //     originalAction.schedule(counter + 1);\n      //   }, 100);\n      // }, 1000);\n      // ```\n      this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n    }\n  }\n\n  protected _execute(state: T, delay: number): any {\n    let errored: boolean = false;\n    let errorValue: any = undefined;\n    try {\n      this.work(state);\n    } catch (e) {\n      errored = true;\n      errorValue = !!e && e || new Error(e);\n    }\n    if (errored) {\n      this.unsubscribe();\n      return errorValue;\n    }\n  }\n\n  protected _unsubscribe() {\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n    const actions = scheduler.actions;\n    const index = actions.indexOf(this);\n\n    this.work  = null;\n    this.delay = null;\n    this.state = null;\n    this.pending = false;\n    this.scheduler = null;\n\n    if (index !== -1) {\n      actions.splice(index, 1);\n    }\n\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, null);\n    }\n  }\n}\n","import {  root  } from './root';\n\nexport class RequestAnimationFrameDefinition {\n  cancelAnimationFrame: (handle: number) => void;\n  requestAnimationFrame: (cb: () => void) => number;\n  constructor(root: any) {\n    if (root.requestAnimationFrame) {\n      this.cancelAnimationFrame = root.cancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.requestAnimationFrame.bind(root);\n    } else if (root.mozRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.mozCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.mozRequestAnimationFrame.bind(root);\n    } else if (root.webkitRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.webkitCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.webkitRequestAnimationFrame.bind(root);\n    } else if (root.msRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.msCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.msRequestAnimationFrame.bind(root);\n    } else if (root.oRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.oCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.oRequestAnimationFrame.bind(root);\n    } else {\n      this.cancelAnimationFrame = root.clearTimeout.bind(root);\n      this.requestAnimationFrame = function(cb) { return root.setTimeout(cb, 1000 / 60); };\n    }\n  }\n}\n\nexport const AnimationFrame = new RequestAnimationFrameDefinition(root);\n","import { AsyncAction } from './AsyncAction';\nimport { AnimationFrame } from '../util/AnimationFrame';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AnimationFrameAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: AnimationFrameScheduler,\n              protected work: (state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AnimationFrameScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If an animation frame has already been requested, don't request another\n    // one. If an animation frame hasn't been requested yet, request one. Return\n    // the current animation frame request id.\n    return scheduler.scheduled || (scheduler.scheduled = AnimationFrame.requestAnimationFrame(\n      scheduler.flush.bind(scheduler, null)\n    ));\n  }\n  protected recycleAsyncId(scheduler: AnimationFrameScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue is empty, cancel the requested animation frame and\n    // set the scheduled flag to undefined so the next AnimationFrameAction will\n    // request its own.\n    if (scheduler.actions.length === 0) {\n      AnimationFrame.cancelAnimationFrame(id);\n      scheduler.scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n","import { Action } from './scheduler/Action';\nimport { Subscription } from './Subscription';\n\n/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an {@link Action}.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n */\nexport class Scheduler {\n\n  public static now: () => number = Date.now ? Date.now : () => +new Date();\n\n  constructor(private SchedulerAction: typeof Action,\n              now: () => number = Scheduler.now) {\n    this.now = now;\n  }\n\n  /**\n   * A getter method that returns a number representing the current time\n   * (at the time this function was called) according to the scheduler's own\n   * internal clock.\n   * @return {number} A number that represents the current time. May or may not\n   * have a relation to wall-clock time. May or may not refer to a time unit\n   * (e.g. milliseconds).\n   */\n  public now: () => number;\n\n  /**\n   * Schedules a function, `work`, for execution. May happen at some point in\n   * the future, according to the `delay` parameter, if specified. May be passed\n   * some context object, `state`, which will be passed to the `work` function.\n   *\n   * The given arguments will be processed an stored as an Action object in a\n   * queue of actions.\n   *\n   * @param {function(state: ?T): ?Subscription} work A function representing a\n   * task, or some unit of work to be executed by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler itself.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @return {Subscription} A subscription in order to be able to unsubscribe\n   * the scheduled work.\n   */\n  public schedule<T>(work: (state?: T) => void, delay: number = 0, state?: T): Subscription {\n    return new this.SchedulerAction<T>(this, work).schedule(state, delay);\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { AsyncAction } from './AsyncAction';\n\nexport class AsyncScheduler extends Scheduler {\n  public actions: Array<AsyncAction<any>> = [];\n  /**\n   * A flag to indicate whether the Scheduler is currently executing a batch of\n   * queued actions.\n   * @type {boolean}\n   */\n  public active: boolean = false;\n  /**\n   * An internal ID used to track the latest asynchronous task such as those\n   * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n   * others.\n   * @type {any}\n   */\n  public scheduled: any = undefined;\n\n  public flush(action: AsyncAction<any>): void {\n\n    const {actions} = this;\n\n    if (this.active) {\n      actions.push(action);\n      return;\n    }\n\n    let error: any;\n    this.active = true;\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (action = actions.shift()); // exhaust the scheduler queue\n\n    this.active = false;\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class AnimationFrameScheduler extends AsyncScheduler {\n  public flush(action?: AsyncAction<any>): void {\n\n    this.active = true;\n    this.scheduled = undefined;\n\n    const {actions} = this;\n    let error: any;\n    let index: number = -1;\n    let count: number = actions.length;\n    action = action || actions.shift();\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (++index < count && (action = actions.shift()));\n\n    this.active = false;\n\n    if (error) {\n      while (++index < count && (action = actions.shift())) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AnimationFrameAction } from './AnimationFrameAction';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\n\nexport const animationFrame = new AnimationFrameScheduler(AnimationFrameAction);\n","import { root } from '../util/root';\n\nconst Symbol: any = root.Symbol;\n\nexport const $$rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?\n  Symbol.for('rxSubscriber') : '@@rxSubscriber';\n","import { root } from '../util/root';\n\nexport let $$iterator: any;\n\nconst Symbol: any = root.Symbol;\n\nif (typeof Symbol === 'function') {\n  if (Symbol.iterator) {\n    $$iterator = Symbol.iterator;\n  } else if (typeof Symbol.for === 'function') {\n    $$iterator = Symbol.for('iterator');\n  }\n} else {\n    if (root.Set && typeof new root.Set()['@@iterator'] === 'function') {\n      // Bug for mozilla version\n      $$iterator = '@@iterator';\n    } else if (root.Map) {\n      // es6-shim specific logic\n      let keys = Object.getOwnPropertyNames(root.Map.prototype);\n      for (let i = 0; i < keys.length; ++i) {\n        let key = keys[i];\n        if (key !== 'entries' && key !== 'size' && root.Map.prototype[key] === root.Map.prototype['entries']) {\n          $$iterator = key;\n          break;\n        }\n      }\n    } else {\n      $$iterator = '@@iterator';\n    }\n}","declare let global: NodeJS.Global;\ndeclare let module: any;\ndeclare let exports: any;\n\ndeclare module NodeJS {\n  interface Global {\n    window: any;\n    global: any;\n  }\n}\n\n/**\n * window: browser in DOM main thread\n * self: browser in WebWorker\n * global: Node.js/other\n */\nexport const root: any = (\n     typeof window == 'object' && window.window === window && window\n  || typeof self == 'object' && self.self === self && self\n  || typeof global == 'object' && global.global === global && global\n);\n\nif (!root) {\n  throw new Error('RxJS could not find any global context (window, self, global)');\n}\n","import { root } from '../util/root';\n\nexport function getSymbolObservable(context: any) {\n  let $$observable: any;\n  let Symbol = context.Symbol;\n\n  if (typeof Symbol === 'function') {\n    if (Symbol.observable) {\n      $$observable = Symbol.observable;\n    } else {\n        $$observable = Symbol('observable');\n        Symbol.observable = $$observable;\n    }\n  } else {\n    $$observable = '@@observable';\n  }\n\n  return $$observable;\n}\n\nexport const $$observable = getSymbolObservable(root);","/* tslint:disable:no-unused-variable */\n// Subject imported before Observable to bypass circular dependency issue since\n// Subject extends Observable and Observable references Subject in it's\n// definition\nexport {Subject, AnonymousSubject} from './Subject';\n/* tslint:enable:no-unused-variable */\nexport {Observable} from './Observable';\n\n// statics\n/* tslint:disable:no-use-before-declare */\nimport './add/observable/bindCallback';\nimport './add/observable/bindNodeCallback';\nimport './add/observable/combineLatest';\nimport './add/observable/concat';\nimport './add/observable/defer';\nimport './add/observable/empty';\nimport './add/observable/forkJoin';\nimport './add/observable/from';\nimport './add/observable/fromEvent';\nimport './add/observable/fromEventPattern';\nimport './add/observable/fromPromise';\nimport './add/observable/generate';\nimport './add/observable/if';\nimport './add/observable/interval';\nimport './add/observable/merge';\nimport './add/observable/race';\nimport './add/observable/never';\nimport './add/observable/of';\nimport './add/observable/onErrorResumeNext';\nimport './add/observable/pairs';\nimport './add/observable/range';\nimport './add/observable/using';\nimport './add/observable/throw';\nimport './add/observable/timer';\nimport './add/observable/zip';\n\n//dom\nimport './add/observable/dom/ajax';\nimport './add/observable/dom/webSocket';\n\n//operators\nimport './add/operator/buffer';\nimport './add/operator/bufferCount';\nimport './add/operator/bufferTime';\nimport './add/operator/bufferToggle';\nimport './add/operator/bufferWhen';\nimport './add/operator/catch';\nimport './add/operator/combineAll';\nimport './add/operator/combineLatest';\nimport './add/operator/concat';\nimport './add/operator/concatAll';\nimport './add/operator/concatMap';\nimport './add/operator/concatMapTo';\nimport './add/operator/count';\nimport './add/operator/dematerialize';\nimport './add/operator/debounce';\nimport './add/operator/debounceTime';\nimport './add/operator/defaultIfEmpty';\nimport './add/operator/delay';\nimport './add/operator/delayWhen';\nimport './add/operator/distinct';\nimport './add/operator/distinctKey';\nimport './add/operator/distinctUntilChanged';\nimport './add/operator/distinctUntilKeyChanged';\nimport './add/operator/do';\nimport './add/operator/exhaust';\nimport './add/operator/exhaustMap';\nimport './add/operator/expand';\nimport './add/operator/elementAt';\nimport './add/operator/filter';\nimport './add/operator/finally';\nimport './add/operator/find';\nimport './add/operator/findIndex';\nimport './add/operator/first';\nimport './add/operator/groupBy';\nimport './add/operator/ignoreElements';\nimport './add/operator/isEmpty';\nimport './add/operator/audit';\nimport './add/operator/auditTime';\nimport './add/operator/last';\nimport './add/operator/let';\nimport './add/operator/every';\nimport './add/operator/map';\nimport './add/operator/mapTo';\nimport './add/operator/materialize';\nimport './add/operator/max';\nimport './add/operator/merge';\nimport './add/operator/mergeAll';\nimport './add/operator/mergeMap';\nimport './add/operator/mergeMapTo';\nimport './add/operator/mergeScan';\nimport './add/operator/min';\nimport './add/operator/multicast';\nimport './add/operator/observeOn';\nimport './add/operator/onErrorResumeNext';\nimport './add/operator/pairwise';\nimport './add/operator/partition';\nimport './add/operator/pluck';\nimport './add/operator/publish';\nimport './add/operator/publishBehavior';\nimport './add/operator/publishReplay';\nimport './add/operator/publishLast';\nimport './add/operator/race';\nimport './add/operator/reduce';\nimport './add/operator/repeat';\nimport './add/operator/repeatWhen';\nimport './add/operator/retry';\nimport './add/operator/retryWhen';\nimport './add/operator/sample';\nimport './add/operator/sampleTime';\nimport './add/operator/scan';\nimport './add/operator/sequenceEqual';\nimport './add/operator/share';\nimport './add/operator/single';\nimport './add/operator/skip';\nimport './add/operator/skipUntil';\nimport './add/operator/skipWhile';\nimport './add/operator/startWith';\nimport './add/operator/subscribeOn';\nimport './add/operator/switch';\nimport './add/operator/switchMap';\nimport './add/operator/switchMapTo';\nimport './add/operator/take';\nimport './add/operator/takeLast';\nimport './add/operator/takeUntil';\nimport './add/operator/takeWhile';\nimport './add/operator/throttle';\nimport './add/operator/throttleTime';\nimport './add/operator/timeInterval';\nimport './add/operator/timeout';\nimport './add/operator/timeoutWith';\nimport './add/operator/timestamp';\nimport './add/operator/toArray';\nimport './add/operator/toPromise';\nimport './add/operator/window';\nimport './add/operator/windowCount';\nimport './add/operator/windowTime';\nimport './add/operator/windowToggle';\nimport './add/operator/windowWhen';\nimport './add/operator/withLatestFrom';\nimport './add/operator/zip';\nimport './add/operator/zipAll';\n\n/* tslint:disable:no-unused-variable */\nexport {Operator} from './Operator';\nexport {Observer} from './Observer';\nexport {Subscription} from './Subscription';\nexport {Subscriber} from './Subscriber';\nexport {AsyncSubject} from './AsyncSubject';\nexport {ReplaySubject} from './ReplaySubject';\nexport {BehaviorSubject} from './BehaviorSubject';\nexport {ConnectableObservable} from './observable/ConnectableObservable';\nexport {Notification} from './Notification';\nexport {EmptyError} from './util/EmptyError';\nexport {ArgumentOutOfRangeError} from './util/ArgumentOutOfRangeError';\nexport {ObjectUnsubscribedError} from './util/ObjectUnsubscribedError';\nexport {TimeoutError} from './util/TimeoutError';\nexport {UnsubscriptionError} from './util/UnsubscriptionError';\nexport {TimeInterval} from './operator/timeInterval';\nexport {Timestamp} from './operator/timestamp';\nexport {TestScheduler} from './testing/TestScheduler';\nexport {VirtualTimeScheduler} from './scheduler/VirtualTimeScheduler';\nexport {AjaxRequest, AjaxResponse, AjaxError, AjaxTimeoutError} from './observable/dom/AjaxObservable';\n\nimport { asap } from './scheduler/asap';\nimport { async } from './scheduler/async';\nimport { queue } from './scheduler/queue';\nimport { animationFrame } from './scheduler/animationFrame';\nimport { AsapScheduler } from './scheduler/AsapScheduler';\nimport { AsyncScheduler } from './scheduler/AsyncScheduler';\nimport { QueueScheduler } from './scheduler/QueueScheduler';\nimport { AnimationFrameScheduler } from './scheduler/AnimationFrameScheduler';\nimport { $$rxSubscriber as rxSubscriber } from './symbol/rxSubscriber';\nimport { $$iterator as iterator } from './symbol/iterator';\nimport { $$observable as observable } from './symbol/observable';\n\n/* tslint:enable:no-unused-variable */\n\n/**\n * @typedef {Object} Rx.Scheduler\n * @property {Scheduler} queue Schedules on a queue in the current event frame\n * (trampoline scheduler). Use this for iteration operations.\n * @property {Scheduler} asap Schedules on the micro task queue, which uses the\n * fastest transport mechanism available, either Node.js' `process.nextTick()`\n * or Web Worker MessageChannel or setTimeout or others. Use this for\n * asynchronous conversions.\n * @property {Scheduler} async Schedules work with `setInterval`. Use this for\n * time-based operations.\n * @property {Scheduler} animationFrame Schedules work with `requestAnimationFrame`.\n * Use this for synchronizing with the platform's painting\n */\nlet Scheduler = {\n  asap,\n  queue,\n  animationFrame,\n  async\n};\n\n/**\n * @typedef {Object} Rx.Symbol\n * @property {Symbol|string} rxSubscriber A symbol to use as a property name to\n * retrieve an \"Rx safe\" Observer from an object. \"Rx safety\" can be defined as\n * an object that has all of the traits of an Rx Subscriber, including the\n * ability to add and remove subscriptions to the subscription chain and\n * guarantees involving event triggering (can't \"next\" after unsubscription,\n * etc).\n * @property {Symbol|string} observable A symbol to use as a property name to\n * retrieve an Observable as defined by the [ECMAScript \"Observable\" spec](https://github.com/zenparsing/es-observable).\n * @property {Symbol|string} iterator The ES6 symbol to use as a property name\n * to retrieve an iterator from an object.\n */\nlet Symbol = {\n  rxSubscriber,\n  observable,\n  iterator\n};\n\nexport {\n    Scheduler,\n    Symbol\n};\n"]}