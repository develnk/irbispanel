{"version":3,"file":"/home/kluch/QProjects/irbispanel/admin/tools/utils/seed/code_change_tools.ts","sources":["/home/kluch/QProjects/irbispanel/admin/tools/utils/seed/code_change_tools.ts"],"names":[],"mappings":";AAAA,0CAA4C;AAC5C,gCAAgC;AAEhC,uCAAkC;AAElC;IAAA;QACU,WAAM,GAAa,EAAE,CAAC;QACtB,cAAS,GAAG,IAAI,CAAC;IAsB3B,CAAC;IApBC,sBAAI,+CAAgB;aAApB;YACE,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;QAC7B,CAAC;;;OAAA;IAED,sBAAI,uCAAQ;aAAZ;YACE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;QACxB,CAAC;;;OAAA;IAED,mCAAO,GAAP,UAAQ,IAAY;QAClB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACvB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACzB,CAAC;IAED,oCAAQ,GAAR,UAAS,KAAe;QAAxB,iBAEC;QADC,KAAK,CAAC,OAAO,CAAC,UAAA,CAAC,IAAI,OAAA,KAAI,CAAC,OAAO,CAAC,CAAC,CAAC,EAAf,CAAe,CAAC,CAAC;IACtC,CAAC;IAED,iCAAK,GAAL;QACE,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;IACnB,CAAC;IACH,wBAAC;AAAD,CAAC,AAxBD,IAwBC;AAEU,QAAA,iBAAiB,GAAG,IAAI,iBAAiB,EAAE,CAAC;AAEvD;;GAEG;AACH,IAAI,SAAS,GAAG;IACd,WAAW,CAAC,IAAI,CAAC,gBAAM,CAAC,eAAe,CAAC,cAAc,CAAC,CAAC,CAAC;AAC3D,CAAC,CAAC;AAEF;;GAEG;AACH,IAAI,MAAM,GAAG;IACX,4BAA4B;IAC5B,0BAA0B;IAC1B,6BAA6B;IAC7B,6BAA6B;IAC7B,+EAA+E;IAC/E,QAAQ;IACR,QAAQ;IACR,IAAI;IACJ,SAAS,EAAE,CAAC;AACd,CAAC,CAAC;AA2BO,iBArCL,MAAM,CAqCK;AAzBf;;GAEG;AACH,IAAI,OAAO,GAAG,UAAC,KAAU;IACvB,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,CAAC;QAC9B,KAAK,GAAG,CAAC,KAAK,CAAC,CAAC;IAClB,CAAC;IAED,2BAA2B;IAC3B,WAAW;IACX,6CAA6C;IAC7C,4GAA4G;IAC5G,EAAE;IACF,4BAA4B;IAC5B,kCAAkC;IAClC,WAAW;IACX,sDAAsD;IACtD,qCAAqC;IACnC,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAC5B,WAAW;IACX,iCAAiC;IACjC,IAAI;IACJ,GAAG;AACL,CAAC,CAAC;AAEe,kBAtBb,OAAO,CAsBa","sourcesContent":["import * as browserSync from 'browser-sync';\n// import * as path from 'path';\n\nimport Config from '../../config';\n\nclass ChangeFileManager {\n  private _files: string[] = [];\n  private _pristine = true;\n\n  get lastChangedFiles() {\n    return this._files.slice();\n  }\n\n  get pristine() {\n    return this._pristine;\n  }\n\n  addFile(file: string) {\n    this._pristine = false;\n    this._files.push(file);\n  }\n\n  addFiles(files: string[]) {\n    files.forEach(f => this.addFile(f));\n  }\n\n  clear() {\n    this._files = [];\n  }\n}\n\nexport let changeFileManager = new ChangeFileManager();\n\n/**\n * Initialises BrowserSync with the configuration defined in seed.config.ts (or if overriden: project.config.ts).\n */\nlet runServer = () => {\n  browserSync.init(Config.getPluginConfig('browser-sync'));\n};\n\n/**\n * Runs BrowserSync as the listening process for the application.\n */\nlet listen = () => {\n  // if (ENABLE_HOT_LOADING) {\n  //   ng2HotLoader.listen({\n  //     port: HOT_LOADER_PORT,\n  //     processPath: file => {\n  //       return file.replace(join(PROJECT_ROOT, APP_SRC), join('dist', 'dev'));\n  //     }\n  //   });\n  // }\n  runServer();\n};\n\n/**\n * Provides a flag to mark which files have changed and reloads BrowserSync accordingly.\n */\nlet changed = (files: any) => {\n  if (!(files instanceof Array)) {\n    files = [files];\n  }\n\n  //  let onlyStylesChanged =\n  //    files\n  //      .map((f:string) => path.parse(f).ext)\n  //      .reduce((prev:string, current:string) => prev && (current === '.scss' || current === '.css'), true);\n  //\n  // if (ENABLE_HOT_LOADING) {\n  //   ng2HotLoader.onChange(files);\n  // } else {\n  //TODO: Figure out why you can't pass a file to reload\n  // if (onlyStylesChanged === false) {\n    browserSync.reload(files);\n  // } else {\n  //   browserSync.reload('*.css');\n  // }\n  //}\n};\n\nexport { listen, changed };\n"]}