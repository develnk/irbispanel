{"version":3,"file":"/home/kluch/QProjects/irbispanel/admin/tools/tasks/seed/check.versions.ts","sources":["/home/kluch/QProjects/irbispanel/admin/tools/tasks/seed/check.versions.ts"],"names":[],"mappings":";AAAA,gCAAkC;AAClC,uCAAkC;AAElC,qBAAqB,OAAe;IAClC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;IACrD,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC;AAMD,iBAAS;IACP,IAAI,IAAI,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC;IACzC,IAAI,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;IAE/B,IAAI,CAAC,eAAe,EAClB,UAAS,KAAY,EAAE,MAAkB,EAAE,MAAkB;QAC3D,EAAE,CAAC,CAAC,KAAK,KAAK,IAAI,CAAC,CAAC,CAAC;YACnB,WAAW,CAAC,wBAAwB,GAAG,KAAK,GAAG,MAAM,CAAC,CAAC;QACzD,CAAC;QAED,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,EAAE,gBAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;YACnD,WAAW,CAAC,8CAA8C,GAAG,gBAAM,CAAC,WAAW,GAAG,qBAAqB,GAAG,MAAM,CAAC,CAAC;QAC7G,CAAC;IACH,CAAC,CAAC,CAAC;IAEL,IAAI,CAAC,gBAAgB,EACnB,UAAS,KAAY,EAAE,MAAkB,EAAE,MAAkB;QAC3D,EAAE,CAAC,CAAC,KAAK,KAAK,IAAI,CAAC,CAAC,CAAC;YACnB,WAAW,CAAC,wBAAwB,GAAG,KAAK,GAAG,MAAM,CAAC,CAAC;QACzD,CAAC;QAED,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,EAAE,gBAAM,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YACpD,WAAW,CAAC,+CAA+C,GAAG,gBAAM,CAAC,YAAY,GAAG,qBAAqB,GAAG,MAAM,CAAC,CAAC;QAC/G,CAAC;IACH,CAAC,CAAC,CAAC;AACP,CAAC,CAAC","sourcesContent":["import * as util from 'gulp-util';\nimport Config from '../../config';\n\nfunction reportError(message: string) {\n  console.error(util.colors.white.bgRed.bold(message));\n  process.exit(1);\n}\n\n/**\n * Executes the build process, verifying that the installed NodeJS and NPM version matches the required versions as\n * defined in the application configuration.\n */\nexport = () => {\n  let exec = require('child_process').exec;\n  let semver = require('semver');\n\n  exec('npm --version',\n    function(error: Error, stdout: NodeBuffer, stderr: NodeBuffer) {\n      if (error !== null) {\n        reportError('npm preinstall error: ' + error + stderr);\n      }\n\n      if (!semver.gte(stdout, Config.VERSION_NPM)) {\n\treportError('NPM is not in required version! Required is ' + Config.VERSION_NPM + ' and you\\'re using ' + stdout);\n      }\n    });\n\n  exec('node --version',\n    function(error: Error, stdout: NodeBuffer, stderr: NodeBuffer) {\n      if (error !== null) {\n        reportError('npm preinstall error: ' + error + stderr);\n      }\n\n      if (!semver.gte(stdout, Config.VERSION_NODE)) {\n\treportError('NODE is not in required version! Required is ' + Config.VERSION_NODE + ' and you\\'re using ' + stdout);\n      }\n    });\n};\n"]}